
rfid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ddc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000086c  08004f6c  08004f6c  00014f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057d8  080057d8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080057d8  080057d8  000157d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057e0  080057e0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057e0  080057e0  000157e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057e4  080057e4  000157e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080057e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          0000052c  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005a4  200005a4  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dff3  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d82  00000000  00000000  0002e09b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c58  00000000  00000000  0002fe20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bb0  00000000  00000000  00030a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002169d  00000000  00000000  00031628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f0a6  00000000  00000000  00052cc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8a7d  00000000  00000000  00061d6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012a7e8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000037e0  00000000  00000000  0012a838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004f54 	.word	0x08004f54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08004f54 	.word	0x08004f54

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <spi_transfer>:




uint8_t spi_transfer (uint8_t byte_s)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af02      	add	r7, sp, #8
 800057a:	4603      	mov	r3, r0
 800057c:	71fb      	strb	r3, [r7, #7]
	uint8_t rx;
	HAL_SPI_TransmitReceive(&hspi1, &byte_s, &rx, 1, 0xffffffff);
 800057e:	f107 020f 	add.w	r2, r7, #15
 8000582:	1df9      	adds	r1, r7, #7
 8000584:	f04f 33ff 	mov.w	r3, #4294967295
 8000588:	9300      	str	r3, [sp, #0]
 800058a:	2301      	movs	r3, #1
 800058c:	4803      	ldr	r0, [pc, #12]	; (800059c <spi_transfer+0x28>)
 800058e:	f003 f948 	bl	8003822 <HAL_SPI_TransmitReceive>
	return rx;
 8000592:	7bfb      	ldrb	r3, [r7, #15]
}
 8000594:	4618      	mov	r0, r3
 8000596:	3710      	adds	r7, #16
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	200000e8 	.word	0x200000e8

080005a0 <Write_MFRC522>:





void Write_MFRC522 (uchar addr, uchar val) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	460a      	mov	r2, r1
 80005aa:	71fb      	strb	r3, [r7, #7]
 80005ac:	4613      	mov	r3, r2
 80005ae:	71bb      	strb	r3, [r7, #6]

 cs_clr;
 80005b0:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <Write_MFRC522+0x4c>)
 80005b2:	695b      	ldr	r3, [r3, #20]
 80005b4:	4a0d      	ldr	r2, [pc, #52]	; (80005ec <Write_MFRC522+0x4c>)
 80005b6:	f023 0308 	bic.w	r3, r3, #8
 80005ba:	6153      	str	r3, [r2, #20]
 spi_transfer(((addr << 1) & 0x7E));
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff ffd3 	bl	8000574 <spi_transfer>
 spi_transfer(val);
 80005ce:	79bb      	ldrb	r3, [r7, #6]
 80005d0:	4618      	mov	r0, r3
 80005d2:	f7ff ffcf 	bl	8000574 <spi_transfer>
 cs_set;
 80005d6:	4b05      	ldr	r3, [pc, #20]	; (80005ec <Write_MFRC522+0x4c>)
 80005d8:	695b      	ldr	r3, [r3, #20]
 80005da:	4a04      	ldr	r2, [pc, #16]	; (80005ec <Write_MFRC522+0x4c>)
 80005dc:	f043 0308 	orr.w	r3, r3, #8
 80005e0:	6153      	str	r3, [r2, #20]

}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40020000 	.word	0x40020000

080005f0 <Read_MFRC522>:


uchar Read_MFRC522(uchar addr) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
 
 int value;
 cs_clr;
 80005fa:	4b12      	ldr	r3, [pc, #72]	; (8000644 <Read_MFRC522+0x54>)
 80005fc:	695b      	ldr	r3, [r3, #20]
 80005fe:	4a11      	ldr	r2, [pc, #68]	; (8000644 <Read_MFRC522+0x54>)
 8000600:	f023 0308 	bic.w	r3, r3, #8
 8000604:	6153      	str	r3, [r2, #20]
 spi_transfer((((addr << 1) & 0x7E) | 0x80));
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	b25b      	sxtb	r3, r3
 800060c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000610:	b25b      	sxtb	r3, r3
 8000612:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000616:	b25b      	sxtb	r3, r3
 8000618:	b2db      	uxtb	r3, r3
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff ffaa 	bl	8000574 <spi_transfer>
 value=spi_transfer(0x00);
 8000620:	2000      	movs	r0, #0
 8000622:	f7ff ffa7 	bl	8000574 <spi_transfer>
 8000626:	4603      	mov	r3, r0
 8000628:	60fb      	str	r3, [r7, #12]
 cs_set;
 800062a:	4b06      	ldr	r3, [pc, #24]	; (8000644 <Read_MFRC522+0x54>)
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	4a05      	ldr	r2, [pc, #20]	; (8000644 <Read_MFRC522+0x54>)
 8000630:	f043 0308 	orr.w	r3, r3, #8
 8000634:	6153      	str	r3, [r2, #20]
 
 return value;  
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	b2db      	uxtb	r3, r3
}
 800063a:	4618      	mov	r0, r3
 800063c:	3710      	adds	r7, #16
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40020000 	.word	0x40020000

08000648 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  Write_MFRC522(CommandReg, PCD_RESETPHASE);
 800064c:	210f      	movs	r1, #15
 800064e:	2001      	movs	r0, #1
 8000650:	f7ff ffa6 	bl	80005a0 <Write_MFRC522>
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}

08000658 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  MFRC522_Reset();
 800065c:	f7ff fff4 	bl	8000648 <MFRC522_Reset>

  // Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
  Write_MFRC522(TModeReg, 0x8D);      // Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8000660:	218d      	movs	r1, #141	; 0x8d
 8000662:	202a      	movs	r0, #42	; 0x2a
 8000664:	f7ff ff9c 	bl	80005a0 <Write_MFRC522>
  Write_MFRC522(TPrescalerReg, 0x3E); // TModeReg[3..0] + TPrescalerReg
 8000668:	213e      	movs	r1, #62	; 0x3e
 800066a:	202b      	movs	r0, #43	; 0x2b
 800066c:	f7ff ff98 	bl	80005a0 <Write_MFRC522>
  Write_MFRC522(TReloadRegL, 30);
 8000670:	211e      	movs	r1, #30
 8000672:	202d      	movs	r0, #45	; 0x2d
 8000674:	f7ff ff94 	bl	80005a0 <Write_MFRC522>
  Write_MFRC522(TReloadRegH, 0);
 8000678:	2100      	movs	r1, #0
 800067a:	202c      	movs	r0, #44	; 0x2c
 800067c:	f7ff ff90 	bl	80005a0 <Write_MFRC522>
  Write_MFRC522(TxAutoReg, 0x40);     // force 100% ASK modulation
 8000680:	2140      	movs	r1, #64	; 0x40
 8000682:	2015      	movs	r0, #21
 8000684:	f7ff ff8c 	bl	80005a0 <Write_MFRC522>
  Write_MFRC522(ModeReg, 0x3D);       // CRC Initial value 0x6363
 8000688:	213d      	movs	r1, #61	; 0x3d
 800068a:	2011      	movs	r0, #17
 800068c:	f7ff ff88 	bl	80005a0 <Write_MFRC522>
  // interrupts, still playing with these
  // Write_MFRC522(CommIEnReg, 0xFF);
  // Write_MFRC522(DivlEnReg, 0xFF);

  // turn antenna on
  AntennaOn();
 8000690:	f000 f802 	bl	8000698 <AntennaOn>
}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}

08000698 <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  SetBitMask(TxControlReg, 0x03);
 800069c:	2103      	movs	r1, #3
 800069e:	2014      	movs	r0, #20
 80006a0:	f000 f802 	bl	80006a8 <SetBitMask>
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)  
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	460a      	mov	r2, r1
 80006b2:	71fb      	strb	r3, [r7, #7]
 80006b4:	4613      	mov	r3, r2
 80006b6:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff ff98 	bl	80005f0 <Read_MFRC522>
 80006c0:	4603      	mov	r3, r0
 80006c2:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 80006c4:	7bfa      	ldrb	r2, [r7, #15]
 80006c6:	79bb      	ldrb	r3, [r7, #6]
 80006c8:	4313      	orrs	r3, r2
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	4611      	mov	r1, r2
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff ff65 	bl	80005a0 <Write_MFRC522>
}
 80006d6:	bf00      	nop
 80006d8:	3710      	adds	r7, #16
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}

080006de <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 80006de:	b580      	push	{r7, lr}
 80006e0:	b086      	sub	sp, #24
 80006e2:	af02      	add	r7, sp, #8
 80006e4:	4603      	mov	r3, r0
 80006e6:	6039      	str	r1, [r7, #0]
 80006e8:	71fb      	strb	r3, [r7, #7]
  uchar status;
  uint backBits; // The received data bits

  Write_MFRC522(BitFramingReg, 0x07); 
 80006ea:	2107      	movs	r1, #7
 80006ec:	200d      	movs	r0, #13
 80006ee:	f7ff ff57 	bl	80005a0 <Write_MFRC522>
   // TxLastBists = BitFramingReg[2..0]

  TagType[0] = reqMode;
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	79fa      	ldrb	r2, [r7, #7]
 80006f6:	701a      	strb	r2, [r3, #0]

  status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);  
 80006f8:	f107 0308 	add.w	r3, r7, #8
 80006fc:	9300      	str	r3, [sp, #0]
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	2201      	movs	r2, #1
 8000702:	6839      	ldr	r1, [r7, #0]
 8000704:	200c      	movs	r0, #12
 8000706:	f000 f80f 	bl	8000728 <MFRC522_ToCard>
 800070a:	4603      	mov	r3, r0
 800070c:	73fb      	strb	r3, [r7, #15]
  if ((status != MI_OK) || (backBits != 0x10)) {
 800070e:	7bfb      	ldrb	r3, [r7, #15]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d102      	bne.n	800071a <MFRC522_Request+0x3c>
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	2b10      	cmp	r3, #16
 8000718:	d001      	beq.n	800071e <MFRC522_Request+0x40>
    status = MI_ERR;
 800071a:	2302      	movs	r3, #2
 800071c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800071e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000720:	4618      	mov	r0, r3
 8000722:	3710      	adds	r7, #16
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 8000728:	b590      	push	{r4, r7, lr}
 800072a:	b089      	sub	sp, #36	; 0x24
 800072c:	af00      	add	r7, sp, #0
 800072e:	60b9      	str	r1, [r7, #8]
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	4603      	mov	r3, r0
 8000734:	73fb      	strb	r3, [r7, #15]
 8000736:	4613      	mov	r3, r2
 8000738:	73bb      	strb	r3, [r7, #14]
  uchar status = MI_ERR;
 800073a:	2302      	movs	r3, #2
 800073c:	77fb      	strb	r3, [r7, #31]
  uchar irqEn = 0x00;
 800073e:	2300      	movs	r3, #0
 8000740:	77bb      	strb	r3, [r7, #30]
  uchar waitIRq = 0x00;
 8000742:	2300      	movs	r3, #0
 8000744:	777b      	strb	r3, [r7, #29]
  uchar lastBits;
  uchar n;
  uint i;

  switch (command)
 8000746:	7bfb      	ldrb	r3, [r7, #15]
 8000748:	2b0c      	cmp	r3, #12
 800074a:	d006      	beq.n	800075a <MFRC522_ToCard+0x32>
 800074c:	2b0e      	cmp	r3, #14
 800074e:	d109      	bne.n	8000764 <MFRC522_ToCard+0x3c>
  {
    case PCD_AUTHENT:     // Certification cards close
      {
        irqEn = 0x12;
 8000750:	2312      	movs	r3, #18
 8000752:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x10;
 8000754:	2310      	movs	r3, #16
 8000756:	777b      	strb	r3, [r7, #29]
        break;
 8000758:	e005      	b.n	8000766 <MFRC522_ToCard+0x3e>
      }
    case PCD_TRANSCEIVE:  // Transmit FIFO data
      {
        irqEn = 0x77;
 800075a:	2377      	movs	r3, #119	; 0x77
 800075c:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x30;
 800075e:	2330      	movs	r3, #48	; 0x30
 8000760:	777b      	strb	r3, [r7, #29]
        break;
 8000762:	e000      	b.n	8000766 <MFRC522_ToCard+0x3e>
      }
    default:
      break;
 8000764:	bf00      	nop
  }

  Write_MFRC522(CommIEnReg, irqEn|0x80);  // Interrupt request
 8000766:	7fbb      	ldrb	r3, [r7, #30]
 8000768:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800076c:	b2db      	uxtb	r3, r3
 800076e:	4619      	mov	r1, r3
 8000770:	2002      	movs	r0, #2
 8000772:	f7ff ff15 	bl	80005a0 <Write_MFRC522>
  ClearBitMask(CommIrqReg, 0x80);         // Clear all interrupt request bit
 8000776:	2180      	movs	r1, #128	; 0x80
 8000778:	2004      	movs	r0, #4
 800077a:	f000 f89e 	bl	80008ba <ClearBitMask>
  SetBitMask(FIFOLevelReg, 0x80);         // FlushBuffer=1, FIFO Initialization
 800077e:	2180      	movs	r1, #128	; 0x80
 8000780:	200a      	movs	r0, #10
 8000782:	f7ff ff91 	bl	80006a8 <SetBitMask>

  Write_MFRC522(CommandReg, PCD_IDLE);    // NO action; Cancel the current command
 8000786:	2100      	movs	r1, #0
 8000788:	2001      	movs	r0, #1
 800078a:	f7ff ff09 	bl	80005a0 <Write_MFRC522>

  // Writing data to the FIFO
  for (i=0; i<sendLen; i++)
 800078e:	2300      	movs	r3, #0
 8000790:	61bb      	str	r3, [r7, #24]
 8000792:	e00a      	b.n	80007aa <MFRC522_ToCard+0x82>
  {
    Write_MFRC522(FIFODataReg, sendData[i]);
 8000794:	68ba      	ldr	r2, [r7, #8]
 8000796:	69bb      	ldr	r3, [r7, #24]
 8000798:	4413      	add	r3, r2
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	4619      	mov	r1, r3
 800079e:	2009      	movs	r0, #9
 80007a0:	f7ff fefe 	bl	80005a0 <Write_MFRC522>
  for (i=0; i<sendLen; i++)
 80007a4:	69bb      	ldr	r3, [r7, #24]
 80007a6:	3301      	adds	r3, #1
 80007a8:	61bb      	str	r3, [r7, #24]
 80007aa:	7bbb      	ldrb	r3, [r7, #14]
 80007ac:	69ba      	ldr	r2, [r7, #24]
 80007ae:	429a      	cmp	r2, r3
 80007b0:	d3f0      	bcc.n	8000794 <MFRC522_ToCard+0x6c>
  }

  // Execute the command
  Write_MFRC522(CommandReg, command);
 80007b2:	7bfb      	ldrb	r3, [r7, #15]
 80007b4:	4619      	mov	r1, r3
 80007b6:	2001      	movs	r0, #1
 80007b8:	f7ff fef2 	bl	80005a0 <Write_MFRC522>
  if (command == PCD_TRANSCEIVE)
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
 80007be:	2b0c      	cmp	r3, #12
 80007c0:	d103      	bne.n	80007ca <MFRC522_ToCard+0xa2>
  {
    SetBitMask(BitFramingReg, 0x80);      // StartSend=1,transmission of data starts  
 80007c2:	2180      	movs	r1, #128	; 0x80
 80007c4:	200d      	movs	r0, #13
 80007c6:	f7ff ff6f 	bl	80006a8 <SetBitMask>
  }

  // Waiting to receive data to complete
  i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 80007ca:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80007ce:	61bb      	str	r3, [r7, #24]
  do
  {
    // CommIrqReg[7..0]
    // Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
    n = Read_MFRC522(CommIrqReg);
 80007d0:	2004      	movs	r0, #4
 80007d2:	f7ff ff0d 	bl	80005f0 <Read_MFRC522>
 80007d6:	4603      	mov	r3, r0
 80007d8:	773b      	strb	r3, [r7, #28]
    i--;
 80007da:	69bb      	ldr	r3, [r7, #24]
 80007dc:	3b01      	subs	r3, #1
 80007de:	61bb      	str	r3, [r7, #24]
  }
  while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80007e0:	69bb      	ldr	r3, [r7, #24]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d00a      	beq.n	80007fc <MFRC522_ToCard+0xd4>
 80007e6:	7f3b      	ldrb	r3, [r7, #28]
 80007e8:	f003 0301 	and.w	r3, r3, #1
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d105      	bne.n	80007fc <MFRC522_ToCard+0xd4>
 80007f0:	7f3a      	ldrb	r2, [r7, #28]
 80007f2:	7f7b      	ldrb	r3, [r7, #29]
 80007f4:	4013      	ands	r3, r2
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d0e9      	beq.n	80007d0 <MFRC522_ToCard+0xa8>
  ClearBitMask(BitFramingReg, 0x80);      // StartSend=0
 80007fc:	2180      	movs	r1, #128	; 0x80
 80007fe:	200d      	movs	r0, #13
 8000800:	f000 f85b 	bl	80008ba <ClearBitMask>
  if (i != 0)
 8000804:	69bb      	ldr	r3, [r7, #24]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d052      	beq.n	80008b0 <MFRC522_ToCard+0x188>
  {
		if(!(Read_MFRC522(ErrorReg) & 0x1B))  // BufferOvfl Collerr CRCErr ProtecolErr
 800080a:	2006      	movs	r0, #6
 800080c:	f7ff fef0 	bl	80005f0 <Read_MFRC522>
 8000810:	4603      	mov	r3, r0
 8000812:	f003 031b 	and.w	r3, r3, #27
 8000816:	2b00      	cmp	r3, #0
 8000818:	d148      	bne.n	80008ac <MFRC522_ToCard+0x184>
    {
      status = MI_OK;
 800081a:	2300      	movs	r3, #0
 800081c:	77fb      	strb	r3, [r7, #31]
      if (n & irqEn & 0x01)
 800081e:	7f3a      	ldrb	r2, [r7, #28]
 8000820:	7fbb      	ldrb	r3, [r7, #30]
 8000822:	4013      	ands	r3, r2
 8000824:	b2db      	uxtb	r3, r3
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MFRC522_ToCard+0x10a>
      {
        status = MI_NOTAGERR;             // ??
 800082e:	2301      	movs	r3, #1
 8000830:	77fb      	strb	r3, [r7, #31]
      }

      if (command == PCD_TRANSCEIVE)
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	2b0c      	cmp	r3, #12
 8000836:	d13b      	bne.n	80008b0 <MFRC522_ToCard+0x188>
      {
        n = Read_MFRC522(FIFOLevelReg);
 8000838:	200a      	movs	r0, #10
 800083a:	f7ff fed9 	bl	80005f0 <Read_MFRC522>
 800083e:	4603      	mov	r3, r0
 8000840:	773b      	strb	r3, [r7, #28]
        lastBits = Read_MFRC522(ControlReg) & 0x07;
 8000842:	200c      	movs	r0, #12
 8000844:	f7ff fed4 	bl	80005f0 <Read_MFRC522>
 8000848:	4603      	mov	r3, r0
 800084a:	f003 0307 	and.w	r3, r3, #7
 800084e:	75fb      	strb	r3, [r7, #23]
        if (lastBits)
 8000850:	7dfb      	ldrb	r3, [r7, #23]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d008      	beq.n	8000868 <MFRC522_ToCard+0x140>
        {
          *backLen = (n-1)*8 + lastBits;
 8000856:	7f3b      	ldrb	r3, [r7, #28]
 8000858:	3b01      	subs	r3, #1
 800085a:	00da      	lsls	r2, r3, #3
 800085c:	7dfb      	ldrb	r3, [r7, #23]
 800085e:	4413      	add	r3, r2
 8000860:	461a      	mov	r2, r3
 8000862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	e004      	b.n	8000872 <MFRC522_ToCard+0x14a>
        }
        else
        {
          *backLen = n*8;
 8000868:	7f3b      	ldrb	r3, [r7, #28]
 800086a:	00db      	lsls	r3, r3, #3
 800086c:	461a      	mov	r2, r3
 800086e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000870:	601a      	str	r2, [r3, #0]
        }

        if (n == 0)
 8000872:	7f3b      	ldrb	r3, [r7, #28]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d101      	bne.n	800087c <MFRC522_ToCard+0x154>
        {
          n = 1;
 8000878:	2301      	movs	r3, #1
 800087a:	773b      	strb	r3, [r7, #28]
        }
        if (n > MAX_LEN)
 800087c:	7f3b      	ldrb	r3, [r7, #28]
 800087e:	2b10      	cmp	r3, #16
 8000880:	d901      	bls.n	8000886 <MFRC522_ToCard+0x15e>
        {
          n = MAX_LEN;
 8000882:	2310      	movs	r3, #16
 8000884:	773b      	strb	r3, [r7, #28]
        }

        // Reading the received data in FIFO
        for (i=0; i<n; i++)
 8000886:	2300      	movs	r3, #0
 8000888:	61bb      	str	r3, [r7, #24]
 800088a:	e00a      	b.n	80008a2 <MFRC522_ToCard+0x17a>
        {
          backData[i] = Read_MFRC522(FIFODataReg);
 800088c:	687a      	ldr	r2, [r7, #4]
 800088e:	69bb      	ldr	r3, [r7, #24]
 8000890:	18d4      	adds	r4, r2, r3
 8000892:	2009      	movs	r0, #9
 8000894:	f7ff feac 	bl	80005f0 <Read_MFRC522>
 8000898:	4603      	mov	r3, r0
 800089a:	7023      	strb	r3, [r4, #0]
        for (i=0; i<n; i++)
 800089c:	69bb      	ldr	r3, [r7, #24]
 800089e:	3301      	adds	r3, #1
 80008a0:	61bb      	str	r3, [r7, #24]
 80008a2:	7f3b      	ldrb	r3, [r7, #28]
 80008a4:	69ba      	ldr	r2, [r7, #24]
 80008a6:	429a      	cmp	r2, r3
 80008a8:	d3f0      	bcc.n	800088c <MFRC522_ToCard+0x164>
 80008aa:	e001      	b.n	80008b0 <MFRC522_ToCard+0x188>
      }
    }
    else {
      //printf("~~~ buffer overflow, collerr, crcerr, or protecolerr\r\n");
			//HAL_UART_Transmit(&huart1,(uchar *)"~~~ buffer overflow, collerr, crcerr, or protecolerr\r\n", 54, 5000);
      status = MI_ERR;
 80008ac:	2302      	movs	r3, #2
 80008ae:	77fb      	strb	r3, [r7, #31]
      
  }
 
    
 
  return status;
 80008b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3724      	adds	r7, #36	; 0x24
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd90      	pop	{r4, r7, pc}

080008ba <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)  
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	b084      	sub	sp, #16
 80008be:	af00      	add	r7, sp, #0
 80008c0:	4603      	mov	r3, r0
 80008c2:	460a      	mov	r2, r1
 80008c4:	71fb      	strb	r3, [r7, #7]
 80008c6:	4613      	mov	r3, r2
 80008c8:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff fe8f 	bl	80005f0 <Read_MFRC522>
 80008d2:	4603      	mov	r3, r0
 80008d4:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 80008d6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80008da:	43db      	mvns	r3, r3
 80008dc:	b25a      	sxtb	r2, r3
 80008de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008e2:	4013      	ands	r3, r2
 80008e4:	b25b      	sxtb	r3, r3
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	4611      	mov	r1, r2
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff fe57 	bl	80005a0 <Write_MFRC522>
} 
 80008f2:	bf00      	nop
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b086      	sub	sp, #24
 80008fe:	af02      	add	r7, sp, #8
 8000900:	6078      	str	r0, [r7, #4]
  uchar status;
  uchar i;
  uchar serNumCheck=0;
 8000902:	2300      	movs	r3, #0
 8000904:	737b      	strb	r3, [r7, #13]
  uint unLen;


  //ClearBitMask(Status2Reg, 0x08);		//TempSensclear
  //ClearBitMask(CollReg,0x80);			//ValuesAfterColl
  Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8000906:	2100      	movs	r1, #0
 8000908:	200d      	movs	r0, #13
 800090a:	f7ff fe49 	bl	80005a0 <Write_MFRC522>

  serNum[0] = PICC_ANTICOLL;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2293      	movs	r2, #147	; 0x93
 8000912:	701a      	strb	r2, [r3, #0]
  serNum[1] = 0x20;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	3301      	adds	r3, #1
 8000918:	2220      	movs	r2, #32
 800091a:	701a      	strb	r2, [r3, #0]
  status = MFRC522_ToCard(PCD_TRANSCEIVE , serNum, 2, serNum, &unLen);
 800091c:	f107 0308 	add.w	r3, r7, #8
 8000920:	9300      	str	r3, [sp, #0]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2202      	movs	r2, #2
 8000926:	6879      	ldr	r1, [r7, #4]
 8000928:	200c      	movs	r0, #12
 800092a:	f7ff fefd 	bl	8000728 <MFRC522_ToCard>
 800092e:	4603      	mov	r3, r0
 8000930:	73fb      	strb	r3, [r7, #15]

  if (status == MI_OK)
 8000932:	7bfb      	ldrb	r3, [r7, #15]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d118      	bne.n	800096a <MFRC522_Anticoll+0x70>
  {
    //Check card serial number
    for (i=0; i<4; i++)
 8000938:	2300      	movs	r3, #0
 800093a:	73bb      	strb	r3, [r7, #14]
 800093c:	e009      	b.n	8000952 <MFRC522_Anticoll+0x58>
    {   
      serNumCheck ^= serNum[i];
 800093e:	7bbb      	ldrb	r3, [r7, #14]
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	4413      	add	r3, r2
 8000944:	781a      	ldrb	r2, [r3, #0]
 8000946:	7b7b      	ldrb	r3, [r7, #13]
 8000948:	4053      	eors	r3, r2
 800094a:	737b      	strb	r3, [r7, #13]
    for (i=0; i<4; i++)
 800094c:	7bbb      	ldrb	r3, [r7, #14]
 800094e:	3301      	adds	r3, #1
 8000950:	73bb      	strb	r3, [r7, #14]
 8000952:	7bbb      	ldrb	r3, [r7, #14]
 8000954:	2b03      	cmp	r3, #3
 8000956:	d9f2      	bls.n	800093e <MFRC522_Anticoll+0x44>
    }
    if (serNumCheck != serNum[i])
 8000958:	7bbb      	ldrb	r3, [r7, #14]
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	4413      	add	r3, r2
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	7b7a      	ldrb	r2, [r7, #13]
 8000962:	429a      	cmp	r2, r3
 8000964:	d001      	beq.n	800096a <MFRC522_Anticoll+0x70>
    {   
      status = MI_ERR;    
 8000966:	2302      	movs	r3, #2
 8000968:	73fb      	strb	r3, [r7, #15]
    }
  }

  //SetBitMask(CollReg, 0x80);		//ValuesAfterColl=1

  return status;
 800096a:	7bfb      	ldrb	r3, [r7, #15]
} 
 800096c:	4618      	mov	r0, r3
 800096e:	3710      	adds	r7, #16
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}

08000974 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8000974:	b5b0      	push	{r4, r5, r7, lr}
 8000976:	b0f8      	sub	sp, #480	; 0x1e0
 8000978:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uchar process, status, checksum1, str[MAX_LEN],cap,findex=0,mystr[16];
 800097a:	2300      	movs	r3, #0
 800097c:	f887 31d7 	strb.w	r3, [r7, #471]	; 0x1d7
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000980:	f001 faa0 	bl	8001ec4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000984:	f000 fd88 	bl	8001498 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000988:	f000 fe7e 	bl	8001688 <MX_GPIO_Init>
  MX_SPI1_Init();
 800098c:	f000 fe1c 	bl	80015c8 <MX_SPI1_Init>
  MX_I2C1_Init();
 8000990:	f000 fdec 	bl	800156c <MX_I2C1_Init>
  MX_UART4_Init();
 8000994:	f000 fe4e 	bl	8001634 <MX_UART4_Init>
  ssd1306_Init();
 8000998:	f000 fef6 	bl	8001788 <ssd1306_Init>
  unsigned char transmit_buf[100] = "AT\r\n";
 800099c:	4abd      	ldr	r2, [pc, #756]	; (8000c94 <main+0x320>)
 800099e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80009a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009a6:	6018      	str	r0, [r3, #0]
 80009a8:	3304      	adds	r3, #4
 80009aa:	7019      	strb	r1, [r3, #0]
 80009ac:	f107 03f5 	add.w	r3, r7, #245	; 0xf5
 80009b0:	225f      	movs	r2, #95	; 0x5f
 80009b2:	2100      	movs	r1, #0
 80009b4:	4618      	mov	r0, r3
 80009b6:	f003 fe57 	bl	8004668 <memset>
  unsigned char a[200];



  HAL_Delay(3000);
 80009ba:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80009be:	f001 faf3 	bl	8001fa8 <HAL_Delay>
  /* USER CODE BEGIN 2 */
  //SPI_mfrc_Init();
  MFRC522_Init();
 80009c2:	f7ff fe49 	bl	8000658 <MFRC522_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    GPIOA->ODR |= 1<<4;
 80009c6:	4bb4      	ldr	r3, [pc, #720]	; (8000c98 <main+0x324>)
 80009c8:	695b      	ldr	r3, [r3, #20]
 80009ca:	4ab3      	ldr	r2, [pc, #716]	; (8000c98 <main+0x324>)
 80009cc:	f043 0310 	orr.w	r3, r3, #16
 80009d0:	6153      	str	r3, [r2, #20]


    	HAL_UART_Transmit(&huart4, transmit_buf, sizeof(transmit_buf), 2000);
 80009d2:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 80009d6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80009da:	2264      	movs	r2, #100	; 0x64
 80009dc:	48af      	ldr	r0, [pc, #700]	; (8000c9c <main+0x328>)
 80009de:	f003 f9da 	bl	8003d96 <HAL_UART_Transmit>


    	  int c = HAL_UART_Receive(&huart4, a, sizeof(a), 2000);
 80009e2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80009e6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80009ea:	22c8      	movs	r2, #200	; 0xc8
 80009ec:	48ab      	ldr	r0, [pc, #684]	; (8000c9c <main+0x328>)
 80009ee:	f003 fa64 	bl	8003eba <HAL_UART_Receive>
 80009f2:	4603      	mov	r3, r0
 80009f4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    	  for (int i= 0; i <200;i ++)
 80009f8:	2300      	movs	r3, #0
 80009fa:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80009fe:	e01d      	b.n	8000a3c <main+0xc8>
    	  {
    		  if (!isprint(a[i]))
 8000a00:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000a04:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 8000a08:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000a0c:	4413      	add	r3, r2
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	3301      	adds	r3, #1
 8000a12:	4aa3      	ldr	r2, [pc, #652]	; (8000ca0 <main+0x32c>)
 8000a14:	4413      	add	r3, r2
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	f003 0397 	and.w	r3, r3, #151	; 0x97
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d108      	bne.n	8000a32 <main+0xbe>
    			  a[i] = '_';
 8000a20:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000a24:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 8000a28:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000a2c:	4413      	add	r3, r2
 8000a2e:	225f      	movs	r2, #95	; 0x5f
 8000a30:	701a      	strb	r2, [r3, #0]
    	  for (int i= 0; i <200;i ++)
 8000a32:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000a36:	3301      	adds	r3, #1
 8000a38:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8000a3c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000a40:	2bc7      	cmp	r3, #199	; 0xc7
 8000a42:	dddd      	ble.n	8000a00 <main+0x8c>
    	  }
    	  for (int i = 0; i < 6; i++)
 8000a44:	2300      	movs	r3, #0
 8000a46:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8000a4a:	e02f      	b.n	8000aac <main+0x138>
    	  {
    		  int offset = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
    		  int y = 1;
 8000a52:	2301      	movs	r3, #1
 8000a54:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
    		  int satir = 15;
 8000a58:	230f      	movs	r3, #15
 8000a5a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    		  char yazdir[20];
    		  strncpy(yazdir,a,20);
 8000a5e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000a62:	f107 0314 	add.w	r3, r7, #20
 8000a66:	2214      	movs	r2, #20
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f003 fe25 	bl	80046b8 <strncpy>
        	  ssd1306_SetCursor(3, y);
 8000a6e:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	4619      	mov	r1, r3
 8000a76:	2003      	movs	r0, #3
 8000a78:	f001 f83e 	bl	8001af8 <ssd1306_SetCursor>
    		  ssd1306_WriteString(yazdir, Font_6x8, 1);
 8000a7c:	4a89      	ldr	r2, [pc, #548]	; (8000ca4 <main+0x330>)
 8000a7e:	f107 0014 	add.w	r0, r7, #20
 8000a82:	2301      	movs	r3, #1
 8000a84:	ca06      	ldmia	r2, {r1, r2}
 8000a86:	f001 f811 	bl	8001aac <ssd1306_WriteString>
    		  ssd1306_UpdateScreen();
 8000a8a:	f000 ff0b 	bl	80018a4 <ssd1306_UpdateScreen>
    		  y += 10;
 8000a8e:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8000a92:	330a      	adds	r3, #10
 8000a94:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
    		  offset += 15;
 8000a98:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8000a9c:	330f      	adds	r3, #15
 8000a9e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
    	  for (int i = 0; i < 6; i++)
 8000aa2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8000aac:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000ab0:	2b05      	cmp	r3, #5
 8000ab2:	ddcb      	ble.n	8000a4c <main+0xd8>
    	  }




    	  strcpy(transmit_buf,"AT+GMR\r\n");
 8000ab4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000ab8:	4a7b      	ldr	r2, [pc, #492]	; (8000ca8 <main+0x334>)
 8000aba:	ca07      	ldmia	r2, {r0, r1, r2}
 8000abc:	c303      	stmia	r3!, {r0, r1}
 8000abe:	701a      	strb	r2, [r3, #0]
    	  memset(a,'\0',200);
 8000ac0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ac4:	22c8      	movs	r2, #200	; 0xc8
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f003 fdcd 	bl	8004668 <memset>
    	  HAL_UART_Transmit(&huart4, transmit_buf, sizeof(transmit_buf), 2000);
 8000ace:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8000ad2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000ad6:	2264      	movs	r2, #100	; 0x64
 8000ad8:	4870      	ldr	r0, [pc, #448]	; (8000c9c <main+0x328>)
 8000ada:	f003 f95c 	bl	8003d96 <HAL_UART_Transmit>


    	  HAL_UART_Receive(&huart4, a, sizeof(a), 2000);
 8000ade:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000ae2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000ae6:	22c8      	movs	r2, #200	; 0xc8
 8000ae8:	486c      	ldr	r0, [pc, #432]	; (8000c9c <main+0x328>)
 8000aea:	f003 f9e6 	bl	8003eba <HAL_UART_Receive>
    	  for (int i= 0; i <200;i ++)
 8000aee:	2300      	movs	r3, #0
 8000af0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000af4:	e01d      	b.n	8000b32 <main+0x1be>
    	  {
    		  if (!isprint(a[i]))
 8000af6:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000afa:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 8000afe:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000b02:	4413      	add	r3, r2
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	3301      	adds	r3, #1
 8000b08:	4a65      	ldr	r2, [pc, #404]	; (8000ca0 <main+0x32c>)
 8000b0a:	4413      	add	r3, r2
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	f003 0397 	and.w	r3, r3, #151	; 0x97
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d108      	bne.n	8000b28 <main+0x1b4>
    			  a[i] = '_';
 8000b16:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000b1a:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 8000b1e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000b22:	4413      	add	r3, r2
 8000b24:	225f      	movs	r2, #95	; 0x5f
 8000b26:	701a      	strb	r2, [r3, #0]
    	  for (int i= 0; i <200;i ++)
 8000b28:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000b32:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000b36:	2bc7      	cmp	r3, #199	; 0xc7
 8000b38:	dddd      	ble.n	8000af6 <main+0x182>
    	  }
    	  for (int i = 0; i < 6; i++)
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000b40:	e030      	b.n	8000ba4 <main+0x230>
    	  {
    		  int offset = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
    		  int y = 1;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    		  int satir = 15;
 8000b4e:	230f      	movs	r3, #15
 8000b50:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    		  char yazdir[20];
    		  strncpy(yazdir,a+offset,20);
 8000b54:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000b58:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000b5c:	18d1      	adds	r1, r2, r3
 8000b5e:	463b      	mov	r3, r7
 8000b60:	2214      	movs	r2, #20
 8000b62:	4618      	mov	r0, r3
 8000b64:	f003 fda8 	bl	80046b8 <strncpy>
        	  ssd1306_SetCursor(3, y);
 8000b68:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	4619      	mov	r1, r3
 8000b70:	2003      	movs	r0, #3
 8000b72:	f000 ffc1 	bl	8001af8 <ssd1306_SetCursor>
    		  ssd1306_WriteString(yazdir, Font_6x8, 1);
 8000b76:	4a4b      	ldr	r2, [pc, #300]	; (8000ca4 <main+0x330>)
 8000b78:	4638      	mov	r0, r7
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	ca06      	ldmia	r2, {r1, r2}
 8000b7e:	f000 ff95 	bl	8001aac <ssd1306_WriteString>
    		  ssd1306_UpdateScreen();
 8000b82:	f000 fe8f 	bl	80018a4 <ssd1306_UpdateScreen>
    		  y += 10;
 8000b86:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000b8a:	330a      	adds	r3, #10
 8000b8c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    		  offset += 15;
 8000b90:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000b94:	330f      	adds	r3, #15
 8000b96:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
    	  for (int i = 0; i < 6; i++)
 8000b9a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000ba4:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000ba8:	2b05      	cmp	r3, #5
 8000baa:	ddca      	ble.n	8000b42 <main+0x1ce>
    	  }
    	  strcpy(transmit_buf,"AT+CIPSERVER=0\r\n");
 8000bac:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000bb0:	4a3e      	ldr	r2, [pc, #248]	; (8000cac <main+0x338>)
 8000bb2:	461c      	mov	r4, r3
 8000bb4:	4615      	mov	r5, r2
 8000bb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bba:	682b      	ldr	r3, [r5, #0]
 8000bbc:	7023      	strb	r3, [r4, #0]
    	  memset(a,'\0',200);
 8000bbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bc2:	22c8      	movs	r2, #200	; 0xc8
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f003 fd4e 	bl	8004668 <memset>
    	  HAL_UART_Transmit(&huart4, transmit_buf, sizeof(transmit_buf), 2000);
 8000bcc:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8000bd0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000bd4:	2264      	movs	r2, #100	; 0x64
 8000bd6:	4831      	ldr	r0, [pc, #196]	; (8000c9c <main+0x328>)
 8000bd8:	f003 f8dd 	bl	8003d96 <HAL_UART_Transmit>


    	  HAL_UART_Receive(&huart4, a, sizeof(a), 2000);
 8000bdc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000be0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000be4:	22c8      	movs	r2, #200	; 0xc8
 8000be6:	482d      	ldr	r0, [pc, #180]	; (8000c9c <main+0x328>)
 8000be8:	f003 f967 	bl	8003eba <HAL_UART_Receive>
    	  for (int i= 0; i <200;i ++)
 8000bec:	2300      	movs	r3, #0
 8000bee:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000bf2:	e01d      	b.n	8000c30 <main+0x2bc>
    	  {
    		  if (!isprint(a[i]))
 8000bf4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000bf8:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 8000bfc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000c00:	4413      	add	r3, r2
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	3301      	adds	r3, #1
 8000c06:	4a26      	ldr	r2, [pc, #152]	; (8000ca0 <main+0x32c>)
 8000c08:	4413      	add	r3, r2
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	f003 0397 	and.w	r3, r3, #151	; 0x97
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d108      	bne.n	8000c26 <main+0x2b2>
    			  a[i] = '_';
 8000c14:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000c18:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 8000c1c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000c20:	4413      	add	r3, r2
 8000c22:	225f      	movs	r2, #95	; 0x5f
 8000c24:	701a      	strb	r2, [r3, #0]
    	  for (int i= 0; i <200;i ++)
 8000c26:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000c30:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000c34:	2bc7      	cmp	r3, #199	; 0xc7
 8000c36:	dddd      	ble.n	8000bf4 <main+0x280>
    	  }
    	  ssd1306_SetCursor(3, 10);
 8000c38:	210a      	movs	r1, #10
 8000c3a:	2003      	movs	r0, #3
 8000c3c:	f000 ff5c 	bl	8001af8 <ssd1306_SetCursor>
		  ssd1306_WriteString(a, Font_6x8, 1);
 8000c40:	4a18      	ldr	r2, [pc, #96]	; (8000ca4 <main+0x330>)
 8000c42:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000c46:	2301      	movs	r3, #1
 8000c48:	ca06      	ldmia	r2, {r1, r2}
 8000c4a:	f000 ff2f 	bl	8001aac <ssd1306_WriteString>
		  ssd1306_UpdateScreen();
 8000c4e:	f000 fe29 	bl	80018a4 <ssd1306_UpdateScreen>
    	  strcpy(transmit_buf,"AT+RST\r\n");
 8000c52:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000c56:	4a16      	ldr	r2, [pc, #88]	; (8000cb0 <main+0x33c>)
 8000c58:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c5a:	c303      	stmia	r3!, {r0, r1}
 8000c5c:	701a      	strb	r2, [r3, #0]
    	  memset(a,'\0',200);
 8000c5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c62:	22c8      	movs	r2, #200	; 0xc8
 8000c64:	2100      	movs	r1, #0
 8000c66:	4618      	mov	r0, r3
 8000c68:	f003 fcfe 	bl	8004668 <memset>
    	  HAL_UART_Transmit(&huart4, transmit_buf, sizeof(transmit_buf), 2000);
 8000c6c:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8000c70:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000c74:	2264      	movs	r2, #100	; 0x64
 8000c76:	4809      	ldr	r0, [pc, #36]	; (8000c9c <main+0x328>)
 8000c78:	f003 f88d 	bl	8003d96 <HAL_UART_Transmit>


    	  HAL_UART_Receive(&huart4, a, sizeof(a), 2000);
 8000c7c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000c80:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000c84:	22c8      	movs	r2, #200	; 0xc8
 8000c86:	4805      	ldr	r0, [pc, #20]	; (8000c9c <main+0x328>)
 8000c88:	f003 f917 	bl	8003eba <HAL_UART_Receive>
    	  for (int i= 0; i <200;i ++)
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000c92:	e02d      	b.n	8000cf0 <main+0x37c>
 8000c94:	08005038 	.word	0x08005038
 8000c98:	40020000 	.word	0x40020000
 8000c9c:	20000140 	.word	0x20000140
 8000ca0:	080056a4 	.word	0x080056a4
 8000ca4:	20000000 	.word	0x20000000
 8000ca8:	08004f6c 	.word	0x08004f6c
 8000cac:	08004f78 	.word	0x08004f78
 8000cb0:	08004f8c 	.word	0x08004f8c
    	  {
    		  if (!isprint(a[i]))
 8000cb4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000cb8:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 8000cbc:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8000cc0:	4413      	add	r3, r2
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	4aca      	ldr	r2, [pc, #808]	; (8000ff0 <main+0x67c>)
 8000cc8:	4413      	add	r3, r2
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	f003 0397 	and.w	r3, r3, #151	; 0x97
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d108      	bne.n	8000ce6 <main+0x372>
    			  a[i] = '_';
 8000cd4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000cd8:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 8000cdc:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8000ce0:	4413      	add	r3, r2
 8000ce2:	225f      	movs	r2, #95	; 0x5f
 8000ce4:	701a      	strb	r2, [r3, #0]
    	  for (int i= 0; i <200;i ++)
 8000ce6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8000cea:	3301      	adds	r3, #1
 8000cec:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000cf0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8000cf4:	2bc7      	cmp	r3, #199	; 0xc7
 8000cf6:	dddd      	ble.n	8000cb4 <main+0x340>
    	  }
    	  ssd1306_SetCursor(3, 10);
 8000cf8:	210a      	movs	r1, #10
 8000cfa:	2003      	movs	r0, #3
 8000cfc:	f000 fefc 	bl	8001af8 <ssd1306_SetCursor>
		  ssd1306_WriteString(a, Font_6x8, 1);
 8000d00:	4abc      	ldr	r2, [pc, #752]	; (8000ff4 <main+0x680>)
 8000d02:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000d06:	2301      	movs	r3, #1
 8000d08:	ca06      	ldmia	r2, {r1, r2}
 8000d0a:	f000 fecf 	bl	8001aac <ssd1306_WriteString>
		  ssd1306_UpdateScreen();
 8000d0e:	f000 fdc9 	bl	80018a4 <ssd1306_UpdateScreen>
    	  strcpy(transmit_buf,"AT+RESTORE\r\n");
 8000d12:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000d16:	4ab8      	ldr	r2, [pc, #736]	; (8000ff8 <main+0x684>)
 8000d18:	461c      	mov	r4, r3
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d1e:	c407      	stmia	r4!, {r0, r1, r2}
 8000d20:	7023      	strb	r3, [r4, #0]
    	  memset(a,'\0',200);
 8000d22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d26:	22c8      	movs	r2, #200	; 0xc8
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f003 fc9c 	bl	8004668 <memset>
    	  HAL_UART_Transmit(&huart4, transmit_buf, sizeof(transmit_buf), 2000);
 8000d30:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8000d34:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000d38:	2264      	movs	r2, #100	; 0x64
 8000d3a:	48b0      	ldr	r0, [pc, #704]	; (8000ffc <main+0x688>)
 8000d3c:	f003 f82b 	bl	8003d96 <HAL_UART_Transmit>


    	  HAL_UART_Receive(&huart4, a, sizeof(a), 2000);
 8000d40:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000d44:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000d48:	22c8      	movs	r2, #200	; 0xc8
 8000d4a:	48ac      	ldr	r0, [pc, #688]	; (8000ffc <main+0x688>)
 8000d4c:	f003 f8b5 	bl	8003eba <HAL_UART_Receive>
    	  for (int i= 0; i <200;i ++)
 8000d50:	2300      	movs	r3, #0
 8000d52:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8000d56:	e01d      	b.n	8000d94 <main+0x420>
    	  {
    		  if (!isprint(a[i]))
 8000d58:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000d5c:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 8000d60:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8000d64:	4413      	add	r3, r2
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	4aa1      	ldr	r2, [pc, #644]	; (8000ff0 <main+0x67c>)
 8000d6c:	4413      	add	r3, r2
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	f003 0397 	and.w	r3, r3, #151	; 0x97
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d108      	bne.n	8000d8a <main+0x416>
    			  a[i] = '_';
 8000d78:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000d7c:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 8000d80:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8000d84:	4413      	add	r3, r2
 8000d86:	225f      	movs	r2, #95	; 0x5f
 8000d88:	701a      	strb	r2, [r3, #0]
    	  for (int i= 0; i <200;i ++)
 8000d8a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8000d8e:	3301      	adds	r3, #1
 8000d90:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8000d94:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8000d98:	2bc7      	cmp	r3, #199	; 0xc7
 8000d9a:	dddd      	ble.n	8000d58 <main+0x3e4>
    	  }
    	  ssd1306_SetCursor(3, 10);
 8000d9c:	210a      	movs	r1, #10
 8000d9e:	2003      	movs	r0, #3
 8000da0:	f000 feaa 	bl	8001af8 <ssd1306_SetCursor>
		  ssd1306_WriteString(a, Font_6x8, 1);
 8000da4:	4a93      	ldr	r2, [pc, #588]	; (8000ff4 <main+0x680>)
 8000da6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000daa:	2301      	movs	r3, #1
 8000dac:	ca06      	ldmia	r2, {r1, r2}
 8000dae:	f000 fe7d 	bl	8001aac <ssd1306_WriteString>
		  ssd1306_UpdateScreen();
 8000db2:	f000 fd77 	bl	80018a4 <ssd1306_UpdateScreen>
    	  strcpy(transmit_buf,"AT+CWMODE?\r\n");
 8000db6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000dba:	4a91      	ldr	r2, [pc, #580]	; (8001000 <main+0x68c>)
 8000dbc:	461c      	mov	r4, r3
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dc2:	c407      	stmia	r4!, {r0, r1, r2}
 8000dc4:	7023      	strb	r3, [r4, #0]
    	  memset(a,'\0',200);
 8000dc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dca:	22c8      	movs	r2, #200	; 0xc8
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f003 fc4a 	bl	8004668 <memset>
    	  HAL_UART_Transmit(&huart4, transmit_buf, sizeof(transmit_buf), 2000);
 8000dd4:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8000dd8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000ddc:	2264      	movs	r2, #100	; 0x64
 8000dde:	4887      	ldr	r0, [pc, #540]	; (8000ffc <main+0x688>)
 8000de0:	f002 ffd9 	bl	8003d96 <HAL_UART_Transmit>


    	  HAL_UART_Receive(&huart4, a, sizeof(a), 2000);
 8000de4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000de8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000dec:	22c8      	movs	r2, #200	; 0xc8
 8000dee:	4883      	ldr	r0, [pc, #524]	; (8000ffc <main+0x688>)
 8000df0:	f003 f863 	bl	8003eba <HAL_UART_Receive>
    	  for (int i= 0; i <200;i ++)
 8000df4:	2300      	movs	r3, #0
 8000df6:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8000dfa:	e01d      	b.n	8000e38 <main+0x4c4>
    	  {
    		  if (!isprint(a[i]))
 8000dfc:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000e00:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 8000e04:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000e08:	4413      	add	r3, r2
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	4a78      	ldr	r2, [pc, #480]	; (8000ff0 <main+0x67c>)
 8000e10:	4413      	add	r3, r2
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	f003 0397 	and.w	r3, r3, #151	; 0x97
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d108      	bne.n	8000e2e <main+0x4ba>
    			  a[i] = '_';
 8000e1c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000e20:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 8000e24:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000e28:	4413      	add	r3, r2
 8000e2a:	225f      	movs	r2, #95	; 0x5f
 8000e2c:	701a      	strb	r2, [r3, #0]
    	  for (int i= 0; i <200;i ++)
 8000e2e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000e32:	3301      	adds	r3, #1
 8000e34:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8000e38:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000e3c:	2bc7      	cmp	r3, #199	; 0xc7
 8000e3e:	dddd      	ble.n	8000dfc <main+0x488>
    	  }
    	  ssd1306_SetCursor(3, 10);
 8000e40:	210a      	movs	r1, #10
 8000e42:	2003      	movs	r0, #3
 8000e44:	f000 fe58 	bl	8001af8 <ssd1306_SetCursor>
		  ssd1306_WriteString(a, Font_6x8, 1);
 8000e48:	4a6a      	ldr	r2, [pc, #424]	; (8000ff4 <main+0x680>)
 8000e4a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000e4e:	2301      	movs	r3, #1
 8000e50:	ca06      	ldmia	r2, {r1, r2}
 8000e52:	f000 fe2b 	bl	8001aac <ssd1306_WriteString>
		  ssd1306_UpdateScreen();
 8000e56:	f000 fd25 	bl	80018a4 <ssd1306_UpdateScreen>
    	  strcpy(transmit_buf,"AT+CWMODE=3\r\n");
 8000e5a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000e5e:	4a69      	ldr	r2, [pc, #420]	; (8001004 <main+0x690>)
 8000e60:	461c      	mov	r4, r3
 8000e62:	4613      	mov	r3, r2
 8000e64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e66:	c407      	stmia	r4!, {r0, r1, r2}
 8000e68:	8023      	strh	r3, [r4, #0]
    	  memset(a,'\0',200);
 8000e6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e6e:	22c8      	movs	r2, #200	; 0xc8
 8000e70:	2100      	movs	r1, #0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f003 fbf8 	bl	8004668 <memset>
    	  HAL_UART_Transmit(&huart4, transmit_buf, sizeof(transmit_buf), 2000);
 8000e78:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8000e7c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000e80:	2264      	movs	r2, #100	; 0x64
 8000e82:	485e      	ldr	r0, [pc, #376]	; (8000ffc <main+0x688>)
 8000e84:	f002 ff87 	bl	8003d96 <HAL_UART_Transmit>


    	  HAL_UART_Receive(&huart4, a, sizeof(a), 2000);
 8000e88:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000e8c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000e90:	22c8      	movs	r2, #200	; 0xc8
 8000e92:	485a      	ldr	r0, [pc, #360]	; (8000ffc <main+0x688>)
 8000e94:	f003 f811 	bl	8003eba <HAL_UART_Receive>
    	  for (int i= 0; i <200;i ++)
 8000e98:	2300      	movs	r3, #0
 8000e9a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8000e9e:	e01d      	b.n	8000edc <main+0x568>
    	  {
    		  if (!isprint(a[i]))
 8000ea0:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000ea4:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 8000ea8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000eac:	4413      	add	r3, r2
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	4a4f      	ldr	r2, [pc, #316]	; (8000ff0 <main+0x67c>)
 8000eb4:	4413      	add	r3, r2
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	f003 0397 	and.w	r3, r3, #151	; 0x97
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d108      	bne.n	8000ed2 <main+0x55e>
    			  a[i] = '_';
 8000ec0:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000ec4:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 8000ec8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000ecc:	4413      	add	r3, r2
 8000ece:	225f      	movs	r2, #95	; 0x5f
 8000ed0:	701a      	strb	r2, [r3, #0]
    	  for (int i= 0; i <200;i ++)
 8000ed2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8000edc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000ee0:	2bc7      	cmp	r3, #199	; 0xc7
 8000ee2:	dddd      	ble.n	8000ea0 <main+0x52c>
    	  }
    	  ssd1306_SetCursor(3, 10);
 8000ee4:	210a      	movs	r1, #10
 8000ee6:	2003      	movs	r0, #3
 8000ee8:	f000 fe06 	bl	8001af8 <ssd1306_SetCursor>
		  ssd1306_WriteString(a, Font_6x8, 1);
 8000eec:	4a41      	ldr	r2, [pc, #260]	; (8000ff4 <main+0x680>)
 8000eee:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	ca06      	ldmia	r2, {r1, r2}
 8000ef6:	f000 fdd9 	bl	8001aac <ssd1306_WriteString>
		  ssd1306_UpdateScreen();
 8000efa:	f000 fcd3 	bl	80018a4 <ssd1306_UpdateScreen>
    	  strcpy(transmit_buf,"AT+CWMODE?\r\n");
 8000efe:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000f02:	4a3f      	ldr	r2, [pc, #252]	; (8001000 <main+0x68c>)
 8000f04:	461c      	mov	r4, r3
 8000f06:	4613      	mov	r3, r2
 8000f08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f0a:	c407      	stmia	r4!, {r0, r1, r2}
 8000f0c:	7023      	strb	r3, [r4, #0]
    	  memset(a,'\0',200);
 8000f0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f12:	22c8      	movs	r2, #200	; 0xc8
 8000f14:	2100      	movs	r1, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f003 fba6 	bl	8004668 <memset>
    	  HAL_UART_Transmit(&huart4, transmit_buf, sizeof(transmit_buf), 2000);
 8000f1c:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8000f20:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000f24:	2264      	movs	r2, #100	; 0x64
 8000f26:	4835      	ldr	r0, [pc, #212]	; (8000ffc <main+0x688>)
 8000f28:	f002 ff35 	bl	8003d96 <HAL_UART_Transmit>


    	  HAL_UART_Receive(&huart4, a, sizeof(a), 2000);
 8000f2c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000f30:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000f34:	22c8      	movs	r2, #200	; 0xc8
 8000f36:	4831      	ldr	r0, [pc, #196]	; (8000ffc <main+0x688>)
 8000f38:	f002 ffbf 	bl	8003eba <HAL_UART_Receive>
    	  for (int i= 0; i <200;i ++)
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8000f42:	e01d      	b.n	8000f80 <main+0x60c>
    	  {
    		  if (!isprint(a[i]))
 8000f44:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000f48:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 8000f4c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000f50:	4413      	add	r3, r2
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	3301      	adds	r3, #1
 8000f56:	4a26      	ldr	r2, [pc, #152]	; (8000ff0 <main+0x67c>)
 8000f58:	4413      	add	r3, r2
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	f003 0397 	and.w	r3, r3, #151	; 0x97
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d108      	bne.n	8000f76 <main+0x602>
    			  a[i] = '_';
 8000f64:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000f68:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 8000f6c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000f70:	4413      	add	r3, r2
 8000f72:	225f      	movs	r2, #95	; 0x5f
 8000f74:	701a      	strb	r2, [r3, #0]
    	  for (int i= 0; i <200;i ++)
 8000f76:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8000f80:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000f84:	2bc7      	cmp	r3, #199	; 0xc7
 8000f86:	dddd      	ble.n	8000f44 <main+0x5d0>
    	  }
    	  ssd1306_SetCursor(3, 10);
 8000f88:	210a      	movs	r1, #10
 8000f8a:	2003      	movs	r0, #3
 8000f8c:	f000 fdb4 	bl	8001af8 <ssd1306_SetCursor>
		  ssd1306_WriteString(a, Font_6x8, 1);
 8000f90:	4a18      	ldr	r2, [pc, #96]	; (8000ff4 <main+0x680>)
 8000f92:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000f96:	2301      	movs	r3, #1
 8000f98:	ca06      	ldmia	r2, {r1, r2}
 8000f9a:	f000 fd87 	bl	8001aac <ssd1306_WriteString>
		  ssd1306_UpdateScreen();
 8000f9e:	f000 fc81 	bl	80018a4 <ssd1306_UpdateScreen>
    	  strcpy(transmit_buf,"AT+CWJAP=\"muz\",\"12345678\"\r\n");
 8000fa2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000fa6:	4a18      	ldr	r2, [pc, #96]	; (8001008 <main+0x694>)
 8000fa8:	461c      	mov	r4, r3
 8000faa:	4615      	mov	r5, r2
 8000fac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fb0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fb4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    	  memset(a,'\0',200);
 8000fb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fbc:	22c8      	movs	r2, #200	; 0xc8
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f003 fb51 	bl	8004668 <memset>
    	  HAL_UART_Transmit(&huart4, transmit_buf, sizeof(transmit_buf), 5000);
 8000fc6:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8000fca:	f241 3388 	movw	r3, #5000	; 0x1388
 8000fce:	2264      	movs	r2, #100	; 0x64
 8000fd0:	480a      	ldr	r0, [pc, #40]	; (8000ffc <main+0x688>)
 8000fd2:	f002 fee0 	bl	8003d96 <HAL_UART_Transmit>


    	  HAL_UART_Receive(&huart4, a, sizeof(a), 5000);
 8000fd6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000fda:	f241 3388 	movw	r3, #5000	; 0x1388
 8000fde:	22c8      	movs	r2, #200	; 0xc8
 8000fe0:	4806      	ldr	r0, [pc, #24]	; (8000ffc <main+0x688>)
 8000fe2:	f002 ff6a 	bl	8003eba <HAL_UART_Receive>
    	  for (int i= 0; i <200;i ++)
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000fec:	e02c      	b.n	8001048 <main+0x6d4>
 8000fee:	bf00      	nop
 8000ff0:	080056a4 	.word	0x080056a4
 8000ff4:	20000000 	.word	0x20000000
 8000ff8:	08004f98 	.word	0x08004f98
 8000ffc:	20000140 	.word	0x20000140
 8001000:	08004fa8 	.word	0x08004fa8
 8001004:	08004fb8 	.word	0x08004fb8
 8001008:	08004fc8 	.word	0x08004fc8
    	  {
    		  if (!isprint(a[i]))
 800100c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001010:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 8001014:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001018:	4413      	add	r3, r2
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	3301      	adds	r3, #1
 800101e:	4acd      	ldr	r2, [pc, #820]	; (8001354 <main+0x9e0>)
 8001020:	4413      	add	r3, r2
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	f003 0397 	and.w	r3, r3, #151	; 0x97
 8001028:	2b00      	cmp	r3, #0
 800102a:	d108      	bne.n	800103e <main+0x6ca>
    			  a[i] = '_';
 800102c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001030:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 8001034:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001038:	4413      	add	r3, r2
 800103a:	225f      	movs	r2, #95	; 0x5f
 800103c:	701a      	strb	r2, [r3, #0]
    	  for (int i= 0; i <200;i ++)
 800103e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001042:	3301      	adds	r3, #1
 8001044:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001048:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800104c:	2bc7      	cmp	r3, #199	; 0xc7
 800104e:	dddd      	ble.n	800100c <main+0x698>
    	  }
    	  ssd1306_SetCursor(3, 10);
 8001050:	210a      	movs	r1, #10
 8001052:	2003      	movs	r0, #3
 8001054:	f000 fd50 	bl	8001af8 <ssd1306_SetCursor>
		  ssd1306_WriteString(a, Font_6x8, 1);
 8001058:	4abf      	ldr	r2, [pc, #764]	; (8001358 <main+0x9e4>)
 800105a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800105e:	2301      	movs	r3, #1
 8001060:	ca06      	ldmia	r2, {r1, r2}
 8001062:	f000 fd23 	bl	8001aac <ssd1306_WriteString>
		  ssd1306_UpdateScreen();
 8001066:	f000 fc1d 	bl	80018a4 <ssd1306_UpdateScreen>
    	  strcpy(transmit_buf,"AT+CIFSR\r\n");
 800106a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800106e:	4abb      	ldr	r2, [pc, #748]	; (800135c <main+0x9e8>)
 8001070:	ca07      	ldmia	r2, {r0, r1, r2}
 8001072:	c303      	stmia	r3!, {r0, r1}
 8001074:	801a      	strh	r2, [r3, #0]
 8001076:	3302      	adds	r3, #2
 8001078:	0c12      	lsrs	r2, r2, #16
 800107a:	701a      	strb	r2, [r3, #0]
    	  memset(a,'\0',200);
 800107c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001080:	22c8      	movs	r2, #200	; 0xc8
 8001082:	2100      	movs	r1, #0
 8001084:	4618      	mov	r0, r3
 8001086:	f003 faef 	bl	8004668 <memset>
    	  HAL_UART_Transmit(&huart4, transmit_buf, sizeof(transmit_buf), 2000);
 800108a:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 800108e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001092:	2264      	movs	r2, #100	; 0x64
 8001094:	48b2      	ldr	r0, [pc, #712]	; (8001360 <main+0x9ec>)
 8001096:	f002 fe7e 	bl	8003d96 <HAL_UART_Transmit>


    	  HAL_UART_Receive(&huart4, a, sizeof(a), 2000);
 800109a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800109e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80010a2:	22c8      	movs	r2, #200	; 0xc8
 80010a4:	48ae      	ldr	r0, [pc, #696]	; (8001360 <main+0x9ec>)
 80010a6:	f002 ff08 	bl	8003eba <HAL_UART_Receive>
    	  for (int i= 0; i <200;i ++)
 80010aa:	2300      	movs	r3, #0
 80010ac:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80010b0:	e01d      	b.n	80010ee <main+0x77a>
    	  {
    		  if (!isprint(a[i]))
 80010b2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80010b6:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 80010ba:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80010be:	4413      	add	r3, r2
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	3301      	adds	r3, #1
 80010c4:	4aa3      	ldr	r2, [pc, #652]	; (8001354 <main+0x9e0>)
 80010c6:	4413      	add	r3, r2
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	f003 0397 	and.w	r3, r3, #151	; 0x97
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d108      	bne.n	80010e4 <main+0x770>
    			  a[i] = '_';
 80010d2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80010d6:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 80010da:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80010de:	4413      	add	r3, r2
 80010e0:	225f      	movs	r2, #95	; 0x5f
 80010e2:	701a      	strb	r2, [r3, #0]
    	  for (int i= 0; i <200;i ++)
 80010e4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80010e8:	3301      	adds	r3, #1
 80010ea:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80010ee:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80010f2:	2bc7      	cmp	r3, #199	; 0xc7
 80010f4:	dddd      	ble.n	80010b2 <main+0x73e>
    	  }
    	  ssd1306_SetCursor(3, 10);
 80010f6:	210a      	movs	r1, #10
 80010f8:	2003      	movs	r0, #3
 80010fa:	f000 fcfd 	bl	8001af8 <ssd1306_SetCursor>
		  ssd1306_WriteString(a, Font_6x8, 1);
 80010fe:	4a96      	ldr	r2, [pc, #600]	; (8001358 <main+0x9e4>)
 8001100:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001104:	2301      	movs	r3, #1
 8001106:	ca06      	ldmia	r2, {r1, r2}
 8001108:	f000 fcd0 	bl	8001aac <ssd1306_WriteString>
		  ssd1306_UpdateScreen();
 800110c:	f000 fbca 	bl	80018a4 <ssd1306_UpdateScreen>
    	  strcpy(transmit_buf,"AT+CIFSR\r\n");
 8001110:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001114:	4a91      	ldr	r2, [pc, #580]	; (800135c <main+0x9e8>)
 8001116:	ca07      	ldmia	r2, {r0, r1, r2}
 8001118:	c303      	stmia	r3!, {r0, r1}
 800111a:	801a      	strh	r2, [r3, #0]
 800111c:	3302      	adds	r3, #2
 800111e:	0c12      	lsrs	r2, r2, #16
 8001120:	701a      	strb	r2, [r3, #0]
    	  memset(a,'\0',200);
 8001122:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001126:	22c8      	movs	r2, #200	; 0xc8
 8001128:	2100      	movs	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f003 fa9c 	bl	8004668 <memset>
    	  HAL_UART_Transmit(&huart4, transmit_buf, sizeof(transmit_buf), 2000);
 8001130:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8001134:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001138:	2264      	movs	r2, #100	; 0x64
 800113a:	4889      	ldr	r0, [pc, #548]	; (8001360 <main+0x9ec>)
 800113c:	f002 fe2b 	bl	8003d96 <HAL_UART_Transmit>


    	  HAL_UART_Receive(&huart4, a, sizeof(a), 2000);
 8001140:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001144:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001148:	22c8      	movs	r2, #200	; 0xc8
 800114a:	4885      	ldr	r0, [pc, #532]	; (8001360 <main+0x9ec>)
 800114c:	f002 feb5 	bl	8003eba <HAL_UART_Receive>
    	  for (int i= 0; i <200;i ++)
 8001150:	2300      	movs	r3, #0
 8001152:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001156:	e01d      	b.n	8001194 <main+0x820>
    	  {
    		  if (!isprint(a[i]))
 8001158:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800115c:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 8001160:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001164:	4413      	add	r3, r2
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	3301      	adds	r3, #1
 800116a:	4a7a      	ldr	r2, [pc, #488]	; (8001354 <main+0x9e0>)
 800116c:	4413      	add	r3, r2
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	f003 0397 	and.w	r3, r3, #151	; 0x97
 8001174:	2b00      	cmp	r3, #0
 8001176:	d108      	bne.n	800118a <main+0x816>
    			  a[i] = '_';
 8001178:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800117c:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 8001180:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001184:	4413      	add	r3, r2
 8001186:	225f      	movs	r2, #95	; 0x5f
 8001188:	701a      	strb	r2, [r3, #0]
    	  for (int i= 0; i <200;i ++)
 800118a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800118e:	3301      	adds	r3, #1
 8001190:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001194:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001198:	2bc7      	cmp	r3, #199	; 0xc7
 800119a:	dddd      	ble.n	8001158 <main+0x7e4>
    	  }
    	  ssd1306_SetCursor(3, 10);
 800119c:	210a      	movs	r1, #10
 800119e:	2003      	movs	r0, #3
 80011a0:	f000 fcaa 	bl	8001af8 <ssd1306_SetCursor>
		  ssd1306_WriteString(a, Font_6x8, 1);
 80011a4:	4a6c      	ldr	r2, [pc, #432]	; (8001358 <main+0x9e4>)
 80011a6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80011aa:	2301      	movs	r3, #1
 80011ac:	ca06      	ldmia	r2, {r1, r2}
 80011ae:	f000 fc7d 	bl	8001aac <ssd1306_WriteString>
		  ssd1306_UpdateScreen();
 80011b2:	f000 fb77 	bl	80018a4 <ssd1306_UpdateScreen>
    	  strcpy(transmit_buf,"AT+CIFSR\r\n");
 80011b6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80011ba:	4a68      	ldr	r2, [pc, #416]	; (800135c <main+0x9e8>)
 80011bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80011be:	c303      	stmia	r3!, {r0, r1}
 80011c0:	801a      	strh	r2, [r3, #0]
 80011c2:	3302      	adds	r3, #2
 80011c4:	0c12      	lsrs	r2, r2, #16
 80011c6:	701a      	strb	r2, [r3, #0]
    	  memset(a,'\0',200);
 80011c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011cc:	22c8      	movs	r2, #200	; 0xc8
 80011ce:	2100      	movs	r1, #0
 80011d0:	4618      	mov	r0, r3
 80011d2:	f003 fa49 	bl	8004668 <memset>
    	  HAL_UART_Transmit(&huart4, transmit_buf, sizeof(transmit_buf), 2000);
 80011d6:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 80011da:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80011de:	2264      	movs	r2, #100	; 0x64
 80011e0:	485f      	ldr	r0, [pc, #380]	; (8001360 <main+0x9ec>)
 80011e2:	f002 fdd8 	bl	8003d96 <HAL_UART_Transmit>


    	  HAL_UART_Receive(&huart4, a, sizeof(a), 2000);
 80011e6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80011ea:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80011ee:	22c8      	movs	r2, #200	; 0xc8
 80011f0:	485b      	ldr	r0, [pc, #364]	; (8001360 <main+0x9ec>)
 80011f2:	f002 fe62 	bl	8003eba <HAL_UART_Receive>
    	  for (int i= 0; i <200;i ++)
 80011f6:	2300      	movs	r3, #0
 80011f8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80011fc:	e01d      	b.n	800123a <main+0x8c6>
    	  {
    		  if (!isprint(a[i]))
 80011fe:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001202:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 8001206:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800120a:	4413      	add	r3, r2
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	3301      	adds	r3, #1
 8001210:	4a50      	ldr	r2, [pc, #320]	; (8001354 <main+0x9e0>)
 8001212:	4413      	add	r3, r2
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	f003 0397 	and.w	r3, r3, #151	; 0x97
 800121a:	2b00      	cmp	r3, #0
 800121c:	d108      	bne.n	8001230 <main+0x8bc>
    			  a[i] = '_';
 800121e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001222:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 8001226:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800122a:	4413      	add	r3, r2
 800122c:	225f      	movs	r2, #95	; 0x5f
 800122e:	701a      	strb	r2, [r3, #0]
    	  for (int i= 0; i <200;i ++)
 8001230:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001234:	3301      	adds	r3, #1
 8001236:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800123a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800123e:	2bc7      	cmp	r3, #199	; 0xc7
 8001240:	dddd      	ble.n	80011fe <main+0x88a>
    	  }
    	  ssd1306_SetCursor(3, 10);
 8001242:	210a      	movs	r1, #10
 8001244:	2003      	movs	r0, #3
 8001246:	f000 fc57 	bl	8001af8 <ssd1306_SetCursor>
		  ssd1306_WriteString(a, Font_6x8, 1);
 800124a:	4a43      	ldr	r2, [pc, #268]	; (8001358 <main+0x9e4>)
 800124c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001250:	2301      	movs	r3, #1
 8001252:	ca06      	ldmia	r2, {r1, r2}
 8001254:	f000 fc2a 	bl	8001aac <ssd1306_WriteString>
		  ssd1306_UpdateScreen();
 8001258:	f000 fb24 	bl	80018a4 <ssd1306_UpdateScreen>
    	  strcpy(transmit_buf,"AT+CIFSR\r\n");
 800125c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001260:	4a3e      	ldr	r2, [pc, #248]	; (800135c <main+0x9e8>)
 8001262:	ca07      	ldmia	r2, {r0, r1, r2}
 8001264:	c303      	stmia	r3!, {r0, r1}
 8001266:	801a      	strh	r2, [r3, #0]
 8001268:	3302      	adds	r3, #2
 800126a:	0c12      	lsrs	r2, r2, #16
 800126c:	701a      	strb	r2, [r3, #0]
    	  memset(a,'\0',200);
 800126e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001272:	22c8      	movs	r2, #200	; 0xc8
 8001274:	2100      	movs	r1, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f003 f9f6 	bl	8004668 <memset>
    	  HAL_UART_Transmit(&huart4, transmit_buf, sizeof(transmit_buf), 2000);
 800127c:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8001280:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001284:	2264      	movs	r2, #100	; 0x64
 8001286:	4836      	ldr	r0, [pc, #216]	; (8001360 <main+0x9ec>)
 8001288:	f002 fd85 	bl	8003d96 <HAL_UART_Transmit>


    	  HAL_UART_Receive(&huart4, a, sizeof(a), 2000);
 800128c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001290:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001294:	22c8      	movs	r2, #200	; 0xc8
 8001296:	4832      	ldr	r0, [pc, #200]	; (8001360 <main+0x9ec>)
 8001298:	f002 fe0f 	bl	8003eba <HAL_UART_Receive>
    	  for (int i= 0; i <200;i ++)
 800129c:	2300      	movs	r3, #0
 800129e:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 80012a2:	e01d      	b.n	80012e0 <main+0x96c>
    	  {
    		  if (!isprint(a[i]))
 80012a4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80012a8:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 80012ac:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80012b0:	4413      	add	r3, r2
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	3301      	adds	r3, #1
 80012b6:	4a27      	ldr	r2, [pc, #156]	; (8001354 <main+0x9e0>)
 80012b8:	4413      	add	r3, r2
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	f003 0397 	and.w	r3, r3, #151	; 0x97
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d108      	bne.n	80012d6 <main+0x962>
    			  a[i] = '_';
 80012c4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80012c8:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 80012cc:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80012d0:	4413      	add	r3, r2
 80012d2:	225f      	movs	r2, #95	; 0x5f
 80012d4:	701a      	strb	r2, [r3, #0]
    	  for (int i= 0; i <200;i ++)
 80012d6:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80012da:	3301      	adds	r3, #1
 80012dc:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 80012e0:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80012e4:	2bc7      	cmp	r3, #199	; 0xc7
 80012e6:	dddd      	ble.n	80012a4 <main+0x930>
    	  }
    	  ssd1306_SetCursor(3, 10);
 80012e8:	210a      	movs	r1, #10
 80012ea:	2003      	movs	r0, #3
 80012ec:	f000 fc04 	bl	8001af8 <ssd1306_SetCursor>
		  ssd1306_WriteString(a, Font_6x8, 1);
 80012f0:	4a19      	ldr	r2, [pc, #100]	; (8001358 <main+0x9e4>)
 80012f2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80012f6:	2301      	movs	r3, #1
 80012f8:	ca06      	ldmia	r2, {r1, r2}
 80012fa:	f000 fbd7 	bl	8001aac <ssd1306_WriteString>
		  ssd1306_UpdateScreen();
 80012fe:	f000 fad1 	bl	80018a4 <ssd1306_UpdateScreen>
    	  memset(a,'\0',200);
 8001302:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001306:	22c8      	movs	r2, #200	; 0xc8
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f003 f9ac 	bl	8004668 <memset>

    	  strcpy(transmit_buf,"AT+CIPSTART=\"TCP\",\"192.168.223.24\",8080\r\n");
 8001310:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001314:	4a13      	ldr	r2, [pc, #76]	; (8001364 <main+0x9f0>)
 8001316:	461c      	mov	r4, r3
 8001318:	4615      	mov	r5, r2
 800131a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800131c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800131e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001320:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001322:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001326:	c403      	stmia	r4!, {r0, r1}
 8001328:	8022      	strh	r2, [r4, #0]

    	  HAL_UART_Transmit(&huart4, transmit_buf, sizeof(transmit_buf), 10000);
 800132a:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 800132e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001332:	2264      	movs	r2, #100	; 0x64
 8001334:	480a      	ldr	r0, [pc, #40]	; (8001360 <main+0x9ec>)
 8001336:	f002 fd2e 	bl	8003d96 <HAL_UART_Transmit>


    	  HAL_UART_Receive(&huart4, a, sizeof(a), 10000);
 800133a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800133e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001342:	22c8      	movs	r2, #200	; 0xc8
 8001344:	4806      	ldr	r0, [pc, #24]	; (8001360 <main+0x9ec>)
 8001346:	f002 fdb8 	bl	8003eba <HAL_UART_Receive>
    	  for (int i= 0; i <200;i ++)
 800134a:	2300      	movs	r3, #0
 800134c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8001350:	e028      	b.n	80013a4 <main+0xa30>
 8001352:	bf00      	nop
 8001354:	080056a4 	.word	0x080056a4
 8001358:	20000000 	.word	0x20000000
 800135c:	08004fe4 	.word	0x08004fe4
 8001360:	20000140 	.word	0x20000140
 8001364:	08004ff0 	.word	0x08004ff0
    	  {
    		  if (!isprint(a[i]))
 8001368:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800136c:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 8001370:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001374:	4413      	add	r3, r2
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	3301      	adds	r3, #1
 800137a:	4a43      	ldr	r2, [pc, #268]	; (8001488 <main+0xb14>)
 800137c:	4413      	add	r3, r2
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	f003 0397 	and.w	r3, r3, #151	; 0x97
 8001384:	2b00      	cmp	r3, #0
 8001386:	d108      	bne.n	800139a <main+0xa26>
    			  a[i] = '_';
 8001388:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800138c:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 8001390:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001394:	4413      	add	r3, r2
 8001396:	225f      	movs	r2, #95	; 0x5f
 8001398:	701a      	strb	r2, [r3, #0]
    	  for (int i= 0; i <200;i ++)
 800139a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800139e:	3301      	adds	r3, #1
 80013a0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 80013a4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80013a8:	2bc7      	cmp	r3, #199	; 0xc7
 80013aa:	dddd      	ble.n	8001368 <main+0x9f4>
    	  }
    	  ssd1306_SetCursor(3, 10);
 80013ac:	210a      	movs	r1, #10
 80013ae:	2003      	movs	r0, #3
 80013b0:	f000 fba2 	bl	8001af8 <ssd1306_SetCursor>
		  ssd1306_WriteString(a, Font_6x8, 1);
 80013b4:	4a35      	ldr	r2, [pc, #212]	; (800148c <main+0xb18>)
 80013b6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80013ba:	2301      	movs	r3, #1
 80013bc:	ca06      	ldmia	r2, {r1, r2}
 80013be:	f000 fb75 	bl	8001aac <ssd1306_WriteString>
		  ssd1306_UpdateScreen();
 80013c2:	f000 fa6f 	bl	80018a4 <ssd1306_UpdateScreen>

  while (1)
  {

    /* USER CODE END WHILE */
		 findex++;
 80013c6:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 80013ca:	3301      	adds	r3, #1
 80013cc:	f887 31d7 	strb.w	r3, [r7, #471]	; 0x1d7
	 status = MFRC522_Request(PICC_REQIDL, str);
 80013d0:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80013d4:	4619      	mov	r1, r3
 80013d6:	2026      	movs	r0, #38	; 0x26
 80013d8:	f7ff f981 	bl	80006de <MFRC522_Request>
 80013dc:	4603      	mov	r3, r0
 80013de:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f


	  }


	  status = MFRC522_Anticoll(str);
 80013e2:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff fa87 	bl	80008fa <MFRC522_Anticoll>
 80013ec:	4603      	mov	r3, r0
 80013ee:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
	  if (status == MI_OK) {
 80013f2:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1e5      	bne.n	80013c6 <main+0xa52>


		  	ssd1306_SetCursor(3, 10);
 80013fa:	210a      	movs	r1, #10
 80013fc:	2003      	movs	r0, #3
 80013fe:	f000 fb7b 	bl	8001af8 <ssd1306_SetCursor>

			checksum1 = str[0] ^ str[1] ^ str[2] ^ str[3];
 8001402:	f897 2164 	ldrb.w	r2, [r7, #356]	; 0x164
 8001406:	f897 3165 	ldrb.w	r3, [r7, #357]	; 0x165
 800140a:	4053      	eors	r3, r2
 800140c:	b2da      	uxtb	r2, r3
 800140e:	f897 3166 	ldrb.w	r3, [r7, #358]	; 0x166
 8001412:	4053      	eors	r3, r2
 8001414:	b2da      	uxtb	r2, r3
 8001416:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 800141a:	4053      	eors	r3, r2
 800141c:	f887 318e 	strb.w	r3, [r7, #398]	; 0x18e
			//HAL_UART_Transmit(&huart1,(uchar *)"\n\rThe card's number is:\n\r", 25, 5000);
			sprintf((char *)mystr,"%d:%d:%d:%d",(uchar)str[0],(uchar)str[1],(uchar)str[2],(uchar)str[3]);
 8001420:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 8001424:	4619      	mov	r1, r3
 8001426:	f897 3165 	ldrb.w	r3, [r7, #357]	; 0x165
 800142a:	461c      	mov	r4, r3
 800142c:	f897 3166 	ldrb.w	r3, [r7, #358]	; 0x166
 8001430:	f897 2167 	ldrb.w	r2, [r7, #359]	; 0x167
 8001434:	f507 70aa 	add.w	r0, r7, #340	; 0x154
 8001438:	9201      	str	r2, [sp, #4]
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	4623      	mov	r3, r4
 800143e:	460a      	mov	r2, r1
 8001440:	4913      	ldr	r1, [pc, #76]	; (8001490 <main+0xb1c>)
 8001442:	f003 f919 	bl	8004678 <siprintf>
			// HAL_UART_Transmit(&huart1,mystr, 18, 5000);
			ssd1306_WriteString(mystr, Font_6x8, 1);
 8001446:	4a11      	ldr	r2, [pc, #68]	; (800148c <main+0xb18>)
 8001448:	f507 70aa 	add.w	r0, r7, #340	; 0x154
 800144c:	2301      	movs	r3, #1
 800144e:	ca06      	ldmia	r2, {r1, r2}
 8001450:	f000 fb2c 	bl	8001aac <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8001454:	f000 fa26 	bl	80018a4 <ssd1306_UpdateScreen>
			HAL_Delay(2000);
 8001458:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800145c:	f000 fda4 	bl	8001fa8 <HAL_Delay>
			if (strstr(a,mystr) != NULL)
 8001460:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8001464:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001468:	4611      	mov	r1, r2
 800146a:	4618      	mov	r0, r3
 800146c:	f003 f937 	bl	80046de <strstr>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0a7      	beq.n	80013c6 <main+0xa52>
			{
				ssd1306_WriteString("AAAAAAAAAAAAAAA", Font_6x8, 1);
 8001476:	4a05      	ldr	r2, [pc, #20]	; (800148c <main+0xb18>)
 8001478:	2301      	movs	r3, #1
 800147a:	ca06      	ldmia	r2, {r1, r2}
 800147c:	4805      	ldr	r0, [pc, #20]	; (8001494 <main+0xb20>)
 800147e:	f000 fb15 	bl	8001aac <ssd1306_WriteString>
							ssd1306_UpdateScreen();
 8001482:	f000 fa0f 	bl	80018a4 <ssd1306_UpdateScreen>
		 findex++;
 8001486:	e79e      	b.n	80013c6 <main+0xa52>
 8001488:	080056a4 	.word	0x080056a4
 800148c:	20000000 	.word	0x20000000
 8001490:	0800501c 	.word	0x0800501c
 8001494:	08005028 	.word	0x08005028

08001498 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b094      	sub	sp, #80	; 0x50
 800149c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800149e:	f107 0320 	add.w	r3, r7, #32
 80014a2:	2230      	movs	r2, #48	; 0x30
 80014a4:	2100      	movs	r1, #0
 80014a6:	4618      	mov	r0, r3
 80014a8:	f003 f8de 	bl	8004668 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014ac:	f107 030c 	add.w	r3, r7, #12
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014bc:	2300      	movs	r3, #0
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	4b28      	ldr	r3, [pc, #160]	; (8001564 <SystemClock_Config+0xcc>)
 80014c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c4:	4a27      	ldr	r2, [pc, #156]	; (8001564 <SystemClock_Config+0xcc>)
 80014c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ca:	6413      	str	r3, [r2, #64]	; 0x40
 80014cc:	4b25      	ldr	r3, [pc, #148]	; (8001564 <SystemClock_Config+0xcc>)
 80014ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014d8:	2300      	movs	r3, #0
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	4b22      	ldr	r3, [pc, #136]	; (8001568 <SystemClock_Config+0xd0>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a21      	ldr	r2, [pc, #132]	; (8001568 <SystemClock_Config+0xd0>)
 80014e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014e6:	6013      	str	r3, [r2, #0]
 80014e8:	4b1f      	ldr	r3, [pc, #124]	; (8001568 <SystemClock_Config+0xd0>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014f0:	607b      	str	r3, [r7, #4]
 80014f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014f4:	2302      	movs	r3, #2
 80014f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014f8:	2301      	movs	r3, #1
 80014fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014fc:	2310      	movs	r3, #16
 80014fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001500:	2302      	movs	r3, #2
 8001502:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001504:	2300      	movs	r3, #0
 8001506:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001508:	2308      	movs	r3, #8
 800150a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800150c:	2332      	movs	r3, #50	; 0x32
 800150e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001510:	2304      	movs	r3, #4
 8001512:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001514:	2307      	movs	r3, #7
 8001516:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001518:	f107 0320 	add.w	r3, r7, #32
 800151c:	4618      	mov	r0, r3
 800151e:	f001 fc5f 	bl	8002de0 <HAL_RCC_OscConfig>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001528:	f000 f8f0 	bl	800170c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800152c:	230f      	movs	r3, #15
 800152e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001530:	2302      	movs	r3, #2
 8001532:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001538:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800153c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800153e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001542:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001544:	f107 030c 	add.w	r3, r7, #12
 8001548:	2100      	movs	r1, #0
 800154a:	4618      	mov	r0, r3
 800154c:	f001 fec0 	bl	80032d0 <HAL_RCC_ClockConfig>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001556:	f000 f8d9 	bl	800170c <Error_Handler>
  }
}
 800155a:	bf00      	nop
 800155c:	3750      	adds	r7, #80	; 0x50
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40023800 	.word	0x40023800
 8001568:	40007000 	.word	0x40007000

0800156c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001570:	4b12      	ldr	r3, [pc, #72]	; (80015bc <MX_I2C1_Init+0x50>)
 8001572:	4a13      	ldr	r2, [pc, #76]	; (80015c0 <MX_I2C1_Init+0x54>)
 8001574:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001576:	4b11      	ldr	r3, [pc, #68]	; (80015bc <MX_I2C1_Init+0x50>)
 8001578:	4a12      	ldr	r2, [pc, #72]	; (80015c4 <MX_I2C1_Init+0x58>)
 800157a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800157c:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <MX_I2C1_Init+0x50>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001582:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <MX_I2C1_Init+0x50>)
 8001584:	2200      	movs	r2, #0
 8001586:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001588:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <MX_I2C1_Init+0x50>)
 800158a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800158e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001590:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <MX_I2C1_Init+0x50>)
 8001592:	2200      	movs	r2, #0
 8001594:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001596:	4b09      	ldr	r3, [pc, #36]	; (80015bc <MX_I2C1_Init+0x50>)
 8001598:	2200      	movs	r2, #0
 800159a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800159c:	4b07      	ldr	r3, [pc, #28]	; (80015bc <MX_I2C1_Init+0x50>)
 800159e:	2200      	movs	r2, #0
 80015a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <MX_I2C1_Init+0x50>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015a8:	4804      	ldr	r0, [pc, #16]	; (80015bc <MX_I2C1_Init+0x50>)
 80015aa:	f000 ffbd 	bl	8002528 <HAL_I2C_Init>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015b4:	f000 f8aa 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20000094 	.word	0x20000094
 80015c0:	40005400 	.word	0x40005400
 80015c4:	000186a0 	.word	0x000186a0

080015c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015cc:	4b17      	ldr	r3, [pc, #92]	; (800162c <MX_SPI1_Init+0x64>)
 80015ce:	4a18      	ldr	r2, [pc, #96]	; (8001630 <MX_SPI1_Init+0x68>)
 80015d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015d2:	4b16      	ldr	r3, [pc, #88]	; (800162c <MX_SPI1_Init+0x64>)
 80015d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015da:	4b14      	ldr	r3, [pc, #80]	; (800162c <MX_SPI1_Init+0x64>)
 80015dc:	2200      	movs	r2, #0
 80015de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015e0:	4b12      	ldr	r3, [pc, #72]	; (800162c <MX_SPI1_Init+0x64>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015e6:	4b11      	ldr	r3, [pc, #68]	; (800162c <MX_SPI1_Init+0x64>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015ec:	4b0f      	ldr	r3, [pc, #60]	; (800162c <MX_SPI1_Init+0x64>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015f2:	4b0e      	ldr	r3, [pc, #56]	; (800162c <MX_SPI1_Init+0x64>)
 80015f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015fa:	4b0c      	ldr	r3, [pc, #48]	; (800162c <MX_SPI1_Init+0x64>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001600:	4b0a      	ldr	r3, [pc, #40]	; (800162c <MX_SPI1_Init+0x64>)
 8001602:	2200      	movs	r2, #0
 8001604:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001606:	4b09      	ldr	r3, [pc, #36]	; (800162c <MX_SPI1_Init+0x64>)
 8001608:	2200      	movs	r2, #0
 800160a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800160c:	4b07      	ldr	r3, [pc, #28]	; (800162c <MX_SPI1_Init+0x64>)
 800160e:	2200      	movs	r2, #0
 8001610:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001612:	4b06      	ldr	r3, [pc, #24]	; (800162c <MX_SPI1_Init+0x64>)
 8001614:	220a      	movs	r2, #10
 8001616:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001618:	4804      	ldr	r0, [pc, #16]	; (800162c <MX_SPI1_Init+0x64>)
 800161a:	f002 f879 	bl	8003710 <HAL_SPI_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001624:	f000 f872 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}
 800162c:	200000e8 	.word	0x200000e8
 8001630:	40013000 	.word	0x40013000

08001634 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001638:	4b11      	ldr	r3, [pc, #68]	; (8001680 <MX_UART4_Init+0x4c>)
 800163a:	4a12      	ldr	r2, [pc, #72]	; (8001684 <MX_UART4_Init+0x50>)
 800163c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800163e:	4b10      	ldr	r3, [pc, #64]	; (8001680 <MX_UART4_Init+0x4c>)
 8001640:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001644:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001646:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <MX_UART4_Init+0x4c>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <MX_UART4_Init+0x4c>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001652:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <MX_UART4_Init+0x4c>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001658:	4b09      	ldr	r3, [pc, #36]	; (8001680 <MX_UART4_Init+0x4c>)
 800165a:	220c      	movs	r2, #12
 800165c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800165e:	4b08      	ldr	r3, [pc, #32]	; (8001680 <MX_UART4_Init+0x4c>)
 8001660:	2200      	movs	r2, #0
 8001662:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001664:	4b06      	ldr	r3, [pc, #24]	; (8001680 <MX_UART4_Init+0x4c>)
 8001666:	2200      	movs	r2, #0
 8001668:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800166a:	4805      	ldr	r0, [pc, #20]	; (8001680 <MX_UART4_Init+0x4c>)
 800166c:	f002 fb46 	bl	8003cfc <HAL_UART_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001676:	f000 f849 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000140 	.word	0x20000140
 8001684:	40004c00 	.word	0x40004c00

08001688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168e:	f107 030c 	add.w	r3, r7, #12
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	609a      	str	r2, [r3, #8]
 800169a:	60da      	str	r2, [r3, #12]
 800169c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	4b18      	ldr	r3, [pc, #96]	; (8001704 <MX_GPIO_Init+0x7c>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a17      	ldr	r2, [pc, #92]	; (8001704 <MX_GPIO_Init+0x7c>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b15      	ldr	r3, [pc, #84]	; (8001704 <MX_GPIO_Init+0x7c>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	4b11      	ldr	r3, [pc, #68]	; (8001704 <MX_GPIO_Init+0x7c>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a10      	ldr	r2, [pc, #64]	; (8001704 <MX_GPIO_Init+0x7c>)
 80016c4:	f043 0302 	orr.w	r3, r3, #2
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <MX_GPIO_Init+0x7c>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2108      	movs	r1, #8
 80016da:	480b      	ldr	r0, [pc, #44]	; (8001708 <MX_GPIO_Init+0x80>)
 80016dc:	f000 ff0a 	bl	80024f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016e0:	2308      	movs	r3, #8
 80016e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e4:	2301      	movs	r3, #1
 80016e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ec:	2300      	movs	r3, #0
 80016ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f0:	f107 030c 	add.w	r3, r7, #12
 80016f4:	4619      	mov	r1, r3
 80016f6:	4804      	ldr	r0, [pc, #16]	; (8001708 <MX_GPIO_Init+0x80>)
 80016f8:	f000 fd60 	bl	80021bc <HAL_GPIO_Init>

}
 80016fc:	bf00      	nop
 80016fe:	3720      	adds	r7, #32
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40023800 	.word	0x40023800
 8001708:	40020000 	.word	0x40020000

0800170c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001710:	b672      	cpsid	i
}
 8001712:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001714:	e7fe      	b.n	8001714 <Error_Handler+0x8>

08001716 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af04      	add	r7, sp, #16
 800172a:	4603      	mov	r3, r0
 800172c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800172e:	f04f 33ff 	mov.w	r3, #4294967295
 8001732:	9302      	str	r3, [sp, #8]
 8001734:	2301      	movs	r3, #1
 8001736:	9301      	str	r3, [sp, #4]
 8001738:	1dfb      	adds	r3, r7, #7
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	2301      	movs	r3, #1
 800173e:	2200      	movs	r2, #0
 8001740:	2178      	movs	r1, #120	; 0x78
 8001742:	4803      	ldr	r0, [pc, #12]	; (8001750 <ssd1306_WriteCommand+0x2c>)
 8001744:	f001 f834 	bl	80027b0 <HAL_I2C_Mem_Write>
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20000094 	.word	0x20000094

08001754 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af04      	add	r7, sp, #16
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	b29b      	uxth	r3, r3
 8001762:	f04f 32ff 	mov.w	r2, #4294967295
 8001766:	9202      	str	r2, [sp, #8]
 8001768:	9301      	str	r3, [sp, #4]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	2301      	movs	r3, #1
 8001770:	2240      	movs	r2, #64	; 0x40
 8001772:	2178      	movs	r1, #120	; 0x78
 8001774:	4803      	ldr	r0, [pc, #12]	; (8001784 <ssd1306_WriteData+0x30>)
 8001776:	f001 f81b 	bl	80027b0 <HAL_I2C_Mem_Write>
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000094 	.word	0x20000094

08001788 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800178c:	f7ff ffc3 	bl	8001716 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001790:	2064      	movs	r0, #100	; 0x64
 8001792:	f000 fc09 	bl	8001fa8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001796:	2000      	movs	r0, #0
 8001798:	f000 f9da 	bl	8001b50 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800179c:	2020      	movs	r0, #32
 800179e:	f7ff ffc1 	bl	8001724 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80017a2:	2000      	movs	r0, #0
 80017a4:	f7ff ffbe 	bl	8001724 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80017a8:	20b0      	movs	r0, #176	; 0xb0
 80017aa:	f7ff ffbb 	bl	8001724 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80017ae:	20c8      	movs	r0, #200	; 0xc8
 80017b0:	f7ff ffb8 	bl	8001724 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80017b4:	2000      	movs	r0, #0
 80017b6:	f7ff ffb5 	bl	8001724 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80017ba:	2010      	movs	r0, #16
 80017bc:	f7ff ffb2 	bl	8001724 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80017c0:	2040      	movs	r0, #64	; 0x40
 80017c2:	f7ff ffaf 	bl	8001724 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80017c6:	20ff      	movs	r0, #255	; 0xff
 80017c8:	f000 f9ae 	bl	8001b28 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80017cc:	20a1      	movs	r0, #161	; 0xa1
 80017ce:	f7ff ffa9 	bl	8001724 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80017d2:	20a6      	movs	r0, #166	; 0xa6
 80017d4:	f7ff ffa6 	bl	8001724 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80017d8:	20a8      	movs	r0, #168	; 0xa8
 80017da:	f7ff ffa3 	bl	8001724 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80017de:	203f      	movs	r0, #63	; 0x3f
 80017e0:	f7ff ffa0 	bl	8001724 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80017e4:	20a4      	movs	r0, #164	; 0xa4
 80017e6:	f7ff ff9d 	bl	8001724 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80017ea:	20d3      	movs	r0, #211	; 0xd3
 80017ec:	f7ff ff9a 	bl	8001724 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80017f0:	2000      	movs	r0, #0
 80017f2:	f7ff ff97 	bl	8001724 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80017f6:	20d5      	movs	r0, #213	; 0xd5
 80017f8:	f7ff ff94 	bl	8001724 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80017fc:	20f0      	movs	r0, #240	; 0xf0
 80017fe:	f7ff ff91 	bl	8001724 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001802:	20d9      	movs	r0, #217	; 0xd9
 8001804:	f7ff ff8e 	bl	8001724 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001808:	2022      	movs	r0, #34	; 0x22
 800180a:	f7ff ff8b 	bl	8001724 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800180e:	20da      	movs	r0, #218	; 0xda
 8001810:	f7ff ff88 	bl	8001724 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001814:	2012      	movs	r0, #18
 8001816:	f7ff ff85 	bl	8001724 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800181a:	20db      	movs	r0, #219	; 0xdb
 800181c:	f7ff ff82 	bl	8001724 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001820:	2020      	movs	r0, #32
 8001822:	f7ff ff7f 	bl	8001724 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001826:	208d      	movs	r0, #141	; 0x8d
 8001828:	f7ff ff7c 	bl	8001724 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800182c:	2014      	movs	r0, #20
 800182e:	f7ff ff79 	bl	8001724 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001832:	2001      	movs	r0, #1
 8001834:	f000 f98c 	bl	8001b50 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001838:	2000      	movs	r0, #0
 800183a:	f000 f80f 	bl	800185c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800183e:	f000 f831 	bl	80018a4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001842:	4b05      	ldr	r3, [pc, #20]	; (8001858 <ssd1306_Init+0xd0>)
 8001844:	2200      	movs	r2, #0
 8001846:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001848:	4b03      	ldr	r3, [pc, #12]	; (8001858 <ssd1306_Init+0xd0>)
 800184a:	2200      	movs	r2, #0
 800184c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800184e:	4b02      	ldr	r3, [pc, #8]	; (8001858 <ssd1306_Init+0xd0>)
 8001850:	2201      	movs	r2, #1
 8001852:	711a      	strb	r2, [r3, #4]
}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20000584 	.word	0x20000584

0800185c <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	e00d      	b.n	8001888 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <ssd1306_Fill+0x1a>
 8001872:	2100      	movs	r1, #0
 8001874:	e000      	b.n	8001878 <ssd1306_Fill+0x1c>
 8001876:	21ff      	movs	r1, #255	; 0xff
 8001878:	4a09      	ldr	r2, [pc, #36]	; (80018a0 <ssd1306_Fill+0x44>)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	4413      	add	r3, r2
 800187e:	460a      	mov	r2, r1
 8001880:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	3301      	adds	r3, #1
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800188e:	d3ed      	bcc.n	800186c <ssd1306_Fill+0x10>
    }
}
 8001890:	bf00      	nop
 8001892:	bf00      	nop
 8001894:	3714      	adds	r7, #20
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	20000184 	.word	0x20000184

080018a4 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80018aa:	2300      	movs	r3, #0
 80018ac:	71fb      	strb	r3, [r7, #7]
 80018ae:	e016      	b.n	80018de <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	3b50      	subs	r3, #80	; 0x50
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff ff34 	bl	8001724 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80018bc:	2000      	movs	r0, #0
 80018be:	f7ff ff31 	bl	8001724 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80018c2:	2010      	movs	r0, #16
 80018c4:	f7ff ff2e 	bl	8001724 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	01db      	lsls	r3, r3, #7
 80018cc:	4a08      	ldr	r2, [pc, #32]	; (80018f0 <ssd1306_UpdateScreen+0x4c>)
 80018ce:	4413      	add	r3, r2
 80018d0:	2180      	movs	r1, #128	; 0x80
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff ff3e 	bl	8001754 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	3301      	adds	r3, #1
 80018dc:	71fb      	strb	r3, [r7, #7]
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	2b07      	cmp	r3, #7
 80018e2:	d9e5      	bls.n	80018b0 <ssd1306_UpdateScreen+0xc>
    }
}
 80018e4:	bf00      	nop
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000184 	.word	0x20000184

080018f4 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	71fb      	strb	r3, [r7, #7]
 80018fe:	460b      	mov	r3, r1
 8001900:	71bb      	strb	r3, [r7, #6]
 8001902:	4613      	mov	r3, r2
 8001904:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190a:	2b00      	cmp	r3, #0
 800190c:	db3d      	blt.n	800198a <ssd1306_DrawPixel+0x96>
 800190e:	79bb      	ldrb	r3, [r7, #6]
 8001910:	2b3f      	cmp	r3, #63	; 0x3f
 8001912:	d83a      	bhi.n	800198a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001914:	797b      	ldrb	r3, [r7, #5]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d11a      	bne.n	8001950 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800191a:	79fa      	ldrb	r2, [r7, #7]
 800191c:	79bb      	ldrb	r3, [r7, #6]
 800191e:	08db      	lsrs	r3, r3, #3
 8001920:	b2d8      	uxtb	r0, r3
 8001922:	4603      	mov	r3, r0
 8001924:	01db      	lsls	r3, r3, #7
 8001926:	4413      	add	r3, r2
 8001928:	4a1b      	ldr	r2, [pc, #108]	; (8001998 <ssd1306_DrawPixel+0xa4>)
 800192a:	5cd3      	ldrb	r3, [r2, r3]
 800192c:	b25a      	sxtb	r2, r3
 800192e:	79bb      	ldrb	r3, [r7, #6]
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	2101      	movs	r1, #1
 8001936:	fa01 f303 	lsl.w	r3, r1, r3
 800193a:	b25b      	sxtb	r3, r3
 800193c:	4313      	orrs	r3, r2
 800193e:	b259      	sxtb	r1, r3
 8001940:	79fa      	ldrb	r2, [r7, #7]
 8001942:	4603      	mov	r3, r0
 8001944:	01db      	lsls	r3, r3, #7
 8001946:	4413      	add	r3, r2
 8001948:	b2c9      	uxtb	r1, r1
 800194a:	4a13      	ldr	r2, [pc, #76]	; (8001998 <ssd1306_DrawPixel+0xa4>)
 800194c:	54d1      	strb	r1, [r2, r3]
 800194e:	e01d      	b.n	800198c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001950:	79fa      	ldrb	r2, [r7, #7]
 8001952:	79bb      	ldrb	r3, [r7, #6]
 8001954:	08db      	lsrs	r3, r3, #3
 8001956:	b2d8      	uxtb	r0, r3
 8001958:	4603      	mov	r3, r0
 800195a:	01db      	lsls	r3, r3, #7
 800195c:	4413      	add	r3, r2
 800195e:	4a0e      	ldr	r2, [pc, #56]	; (8001998 <ssd1306_DrawPixel+0xa4>)
 8001960:	5cd3      	ldrb	r3, [r2, r3]
 8001962:	b25a      	sxtb	r2, r3
 8001964:	79bb      	ldrb	r3, [r7, #6]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	2101      	movs	r1, #1
 800196c:	fa01 f303 	lsl.w	r3, r1, r3
 8001970:	b25b      	sxtb	r3, r3
 8001972:	43db      	mvns	r3, r3
 8001974:	b25b      	sxtb	r3, r3
 8001976:	4013      	ands	r3, r2
 8001978:	b259      	sxtb	r1, r3
 800197a:	79fa      	ldrb	r2, [r7, #7]
 800197c:	4603      	mov	r3, r0
 800197e:	01db      	lsls	r3, r3, #7
 8001980:	4413      	add	r3, r2
 8001982:	b2c9      	uxtb	r1, r1
 8001984:	4a04      	ldr	r2, [pc, #16]	; (8001998 <ssd1306_DrawPixel+0xa4>)
 8001986:	54d1      	strb	r1, [r2, r3]
 8001988:	e000      	b.n	800198c <ssd1306_DrawPixel+0x98>
        return;
 800198a:	bf00      	nop
    }
}
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	20000184 	.word	0x20000184

0800199c <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800199c:	b590      	push	{r4, r7, lr}
 800199e:	b089      	sub	sp, #36	; 0x24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4604      	mov	r4, r0
 80019a4:	1d38      	adds	r0, r7, #4
 80019a6:	e880 0006 	stmia.w	r0, {r1, r2}
 80019aa:	461a      	mov	r2, r3
 80019ac:	4623      	mov	r3, r4
 80019ae:	73fb      	strb	r3, [r7, #15]
 80019b0:	4613      	mov	r3, r2
 80019b2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
 80019b6:	2b1f      	cmp	r3, #31
 80019b8:	d902      	bls.n	80019c0 <ssd1306_WriteChar+0x24>
 80019ba:	7bfb      	ldrb	r3, [r7, #15]
 80019bc:	2b7e      	cmp	r3, #126	; 0x7e
 80019be:	d901      	bls.n	80019c4 <ssd1306_WriteChar+0x28>
        return 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	e06d      	b.n	8001aa0 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80019c4:	4b38      	ldr	r3, [pc, #224]	; (8001aa8 <ssd1306_WriteChar+0x10c>)
 80019c6:	881b      	ldrh	r3, [r3, #0]
 80019c8:	461a      	mov	r2, r3
 80019ca:	793b      	ldrb	r3, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	2b80      	cmp	r3, #128	; 0x80
 80019d0:	dc06      	bgt.n	80019e0 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80019d2:	4b35      	ldr	r3, [pc, #212]	; (8001aa8 <ssd1306_WriteChar+0x10c>)
 80019d4:	885b      	ldrh	r3, [r3, #2]
 80019d6:	461a      	mov	r2, r3
 80019d8:	797b      	ldrb	r3, [r7, #5]
 80019da:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80019dc:	2b40      	cmp	r3, #64	; 0x40
 80019de:	dd01      	ble.n	80019e4 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	e05d      	b.n	8001aa0 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80019e4:	2300      	movs	r3, #0
 80019e6:	61fb      	str	r3, [r7, #28]
 80019e8:	e04c      	b.n	8001a84 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80019ea:	68ba      	ldr	r2, [r7, #8]
 80019ec:	7bfb      	ldrb	r3, [r7, #15]
 80019ee:	3b20      	subs	r3, #32
 80019f0:	7979      	ldrb	r1, [r7, #5]
 80019f2:	fb01 f303 	mul.w	r3, r1, r3
 80019f6:	4619      	mov	r1, r3
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	440b      	add	r3, r1
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	4413      	add	r3, r2
 8001a00:	881b      	ldrh	r3, [r3, #0]
 8001a02:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001a04:	2300      	movs	r3, #0
 8001a06:	61bb      	str	r3, [r7, #24]
 8001a08:	e034      	b.n	8001a74 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d012      	beq.n	8001a40 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001a1a:	4b23      	ldr	r3, [pc, #140]	; (8001aa8 <ssd1306_WriteChar+0x10c>)
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	4413      	add	r3, r2
 8001a26:	b2d8      	uxtb	r0, r3
 8001a28:	4b1f      	ldr	r3, [pc, #124]	; (8001aa8 <ssd1306_WriteChar+0x10c>)
 8001a2a:	885b      	ldrh	r3, [r3, #2]
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	4413      	add	r3, r2
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	7bba      	ldrb	r2, [r7, #14]
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f7ff ff5b 	bl	80018f4 <ssd1306_DrawPixel>
 8001a3e:	e016      	b.n	8001a6e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001a40:	4b19      	ldr	r3, [pc, #100]	; (8001aa8 <ssd1306_WriteChar+0x10c>)
 8001a42:	881b      	ldrh	r3, [r3, #0]
 8001a44:	b2da      	uxtb	r2, r3
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	4413      	add	r3, r2
 8001a4c:	b2d8      	uxtb	r0, r3
 8001a4e:	4b16      	ldr	r3, [pc, #88]	; (8001aa8 <ssd1306_WriteChar+0x10c>)
 8001a50:	885b      	ldrh	r3, [r3, #2]
 8001a52:	b2da      	uxtb	r2, r3
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	4413      	add	r3, r2
 8001a5a:	b2d9      	uxtb	r1, r3
 8001a5c:	7bbb      	ldrb	r3, [r7, #14]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	bf0c      	ite	eq
 8001a62:	2301      	moveq	r3, #1
 8001a64:	2300      	movne	r3, #0
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	461a      	mov	r2, r3
 8001a6a:	f7ff ff43 	bl	80018f4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	3301      	adds	r3, #1
 8001a72:	61bb      	str	r3, [r7, #24]
 8001a74:	793b      	ldrb	r3, [r7, #4]
 8001a76:	461a      	mov	r2, r3
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d3c5      	bcc.n	8001a0a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	3301      	adds	r3, #1
 8001a82:	61fb      	str	r3, [r7, #28]
 8001a84:	797b      	ldrb	r3, [r7, #5]
 8001a86:	461a      	mov	r2, r3
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d3ad      	bcc.n	80019ea <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001a8e:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <ssd1306_WriteChar+0x10c>)
 8001a90:	881a      	ldrh	r2, [r3, #0]
 8001a92:	793b      	ldrb	r3, [r7, #4]
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	4413      	add	r3, r2
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	4b03      	ldr	r3, [pc, #12]	; (8001aa8 <ssd1306_WriteChar+0x10c>)
 8001a9c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3724      	adds	r7, #36	; 0x24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd90      	pop	{r4, r7, pc}
 8001aa8:	20000584 	.word	0x20000584

08001aac <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	1d38      	adds	r0, r7, #4
 8001ab6:	e880 0006 	stmia.w	r0, {r1, r2}
 8001aba:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8001abc:	e012      	b.n	8001ae4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	7818      	ldrb	r0, [r3, #0]
 8001ac2:	78fb      	ldrb	r3, [r7, #3]
 8001ac4:	1d3a      	adds	r2, r7, #4
 8001ac6:	ca06      	ldmia	r2, {r1, r2}
 8001ac8:	f7ff ff68 	bl	800199c <ssd1306_WriteChar>
 8001acc:	4603      	mov	r3, r0
 8001ace:	461a      	mov	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d002      	beq.n	8001ade <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	e008      	b.n	8001af0 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1e8      	bne.n	8001abe <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	781b      	ldrb	r3, [r3, #0]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	460a      	mov	r2, r1
 8001b02:	71fb      	strb	r3, [r7, #7]
 8001b04:	4613      	mov	r3, r2
 8001b06:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <ssd1306_SetCursor+0x2c>)
 8001b0e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001b10:	79bb      	ldrb	r3, [r7, #6]
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	4b03      	ldr	r3, [pc, #12]	; (8001b24 <ssd1306_SetCursor+0x2c>)
 8001b16:	805a      	strh	r2, [r3, #2]
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	20000584 	.word	0x20000584

08001b28 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001b32:	2381      	movs	r3, #129	; 0x81
 8001b34:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001b36:	7bfb      	ldrb	r3, [r7, #15]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fdf3 	bl	8001724 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff fdef 	bl	8001724 <ssd1306_WriteCommand>
}
 8001b46:	bf00      	nop
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
	...

08001b50 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d005      	beq.n	8001b6c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001b60:	23af      	movs	r3, #175	; 0xaf
 8001b62:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001b64:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <ssd1306_SetDisplayOn+0x38>)
 8001b66:	2201      	movs	r2, #1
 8001b68:	715a      	strb	r2, [r3, #5]
 8001b6a:	e004      	b.n	8001b76 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001b6c:	23ae      	movs	r3, #174	; 0xae
 8001b6e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001b70:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <ssd1306_SetDisplayOn+0x38>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fdd3 	bl	8001724 <ssd1306_WriteCommand>
}
 8001b7e:	bf00      	nop
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20000584 	.word	0x20000584

08001b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	607b      	str	r3, [r7, #4]
 8001b96:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <HAL_MspInit+0x4c>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9a:	4a0f      	ldr	r2, [pc, #60]	; (8001bd8 <HAL_MspInit+0x4c>)
 8001b9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ba2:	4b0d      	ldr	r3, [pc, #52]	; (8001bd8 <HAL_MspInit+0x4c>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001baa:	607b      	str	r3, [r7, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	603b      	str	r3, [r7, #0]
 8001bb2:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <HAL_MspInit+0x4c>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	4a08      	ldr	r2, [pc, #32]	; (8001bd8 <HAL_MspInit+0x4c>)
 8001bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bbe:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_MspInit+0x4c>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc6:	603b      	str	r3, [r7, #0]
 8001bc8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001bca:	2007      	movs	r0, #7
 8001bcc:	f000 fac2 	bl	8002154 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bd0:	bf00      	nop
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40023800 	.word	0x40023800

08001bdc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b08a      	sub	sp, #40	; 0x28
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a19      	ldr	r2, [pc, #100]	; (8001c60 <HAL_I2C_MspInit+0x84>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d12b      	bne.n	8001c56 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	4b18      	ldr	r3, [pc, #96]	; (8001c64 <HAL_I2C_MspInit+0x88>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4a17      	ldr	r2, [pc, #92]	; (8001c64 <HAL_I2C_MspInit+0x88>)
 8001c08:	f043 0302 	orr.w	r3, r3, #2
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <HAL_I2C_MspInit+0x88>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	613b      	str	r3, [r7, #16]
 8001c18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c1a:	23c0      	movs	r3, #192	; 0xc0
 8001c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c1e:	2312      	movs	r3, #18
 8001c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c26:	2303      	movs	r3, #3
 8001c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c2a:	2304      	movs	r3, #4
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2e:	f107 0314 	add.w	r3, r7, #20
 8001c32:	4619      	mov	r1, r3
 8001c34:	480c      	ldr	r0, [pc, #48]	; (8001c68 <HAL_I2C_MspInit+0x8c>)
 8001c36:	f000 fac1 	bl	80021bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60fb      	str	r3, [r7, #12]
 8001c3e:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <HAL_I2C_MspInit+0x88>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	4a08      	ldr	r2, [pc, #32]	; (8001c64 <HAL_I2C_MspInit+0x88>)
 8001c44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c48:	6413      	str	r3, [r2, #64]	; 0x40
 8001c4a:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <HAL_I2C_MspInit+0x88>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c56:	bf00      	nop
 8001c58:	3728      	adds	r7, #40	; 0x28
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40005400 	.word	0x40005400
 8001c64:	40023800 	.word	0x40023800
 8001c68:	40020400 	.word	0x40020400

08001c6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08a      	sub	sp, #40	; 0x28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	f107 0314 	add.w	r3, r7, #20
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a19      	ldr	r2, [pc, #100]	; (8001cf0 <HAL_SPI_MspInit+0x84>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d12b      	bne.n	8001ce6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	613b      	str	r3, [r7, #16]
 8001c92:	4b18      	ldr	r3, [pc, #96]	; (8001cf4 <HAL_SPI_MspInit+0x88>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c96:	4a17      	ldr	r2, [pc, #92]	; (8001cf4 <HAL_SPI_MspInit+0x88>)
 8001c98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c9e:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <HAL_SPI_MspInit+0x88>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ca6:	613b      	str	r3, [r7, #16]
 8001ca8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <HAL_SPI_MspInit+0x88>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	4a10      	ldr	r2, [pc, #64]	; (8001cf4 <HAL_SPI_MspInit+0x88>)
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cba:	4b0e      	ldr	r3, [pc, #56]	; (8001cf4 <HAL_SPI_MspInit+0x88>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001cc6:	23e0      	movs	r3, #224	; 0xe0
 8001cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cd6:	2305      	movs	r3, #5
 8001cd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cda:	f107 0314 	add.w	r3, r7, #20
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4805      	ldr	r0, [pc, #20]	; (8001cf8 <HAL_SPI_MspInit+0x8c>)
 8001ce2:	f000 fa6b 	bl	80021bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ce6:	bf00      	nop
 8001ce8:	3728      	adds	r7, #40	; 0x28
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40013000 	.word	0x40013000
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40020000 	.word	0x40020000

08001cfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08a      	sub	sp, #40	; 0x28
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d04:	f107 0314 	add.w	r3, r7, #20
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a19      	ldr	r2, [pc, #100]	; (8001d80 <HAL_UART_MspInit+0x84>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d12b      	bne.n	8001d76 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	613b      	str	r3, [r7, #16]
 8001d22:	4b18      	ldr	r3, [pc, #96]	; (8001d84 <HAL_UART_MspInit+0x88>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	4a17      	ldr	r2, [pc, #92]	; (8001d84 <HAL_UART_MspInit+0x88>)
 8001d28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d2e:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <HAL_UART_MspInit+0x88>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d36:	613b      	str	r3, [r7, #16]
 8001d38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <HAL_UART_MspInit+0x88>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	4a10      	ldr	r2, [pc, #64]	; (8001d84 <HAL_UART_MspInit+0x88>)
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4a:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <HAL_UART_MspInit+0x88>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d56:	2303      	movs	r3, #3
 8001d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d62:	2303      	movs	r3, #3
 8001d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001d66:	2308      	movs	r3, #8
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6a:	f107 0314 	add.w	r3, r7, #20
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4805      	ldr	r0, [pc, #20]	; (8001d88 <HAL_UART_MspInit+0x8c>)
 8001d72:	f000 fa23 	bl	80021bc <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001d76:	bf00      	nop
 8001d78:	3728      	adds	r7, #40	; 0x28
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40004c00 	.word	0x40004c00
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40020000 	.word	0x40020000

08001d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d90:	e7fe      	b.n	8001d90 <NMI_Handler+0x4>

08001d92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d92:	b480      	push	{r7}
 8001d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d96:	e7fe      	b.n	8001d96 <HardFault_Handler+0x4>

08001d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d9c:	e7fe      	b.n	8001d9c <MemManage_Handler+0x4>

08001d9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001da2:	e7fe      	b.n	8001da2 <BusFault_Handler+0x4>

08001da4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001da8:	e7fe      	b.n	8001da8 <UsageFault_Handler+0x4>

08001daa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001daa:	b480      	push	{r7}
 8001dac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dd8:	f000 f8c6 	bl	8001f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ddc:	bf00      	nop
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001de8:	4a14      	ldr	r2, [pc, #80]	; (8001e3c <_sbrk+0x5c>)
 8001dea:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <_sbrk+0x60>)
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001df4:	4b13      	ldr	r3, [pc, #76]	; (8001e44 <_sbrk+0x64>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d102      	bne.n	8001e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dfc:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <_sbrk+0x64>)
 8001dfe:	4a12      	ldr	r2, [pc, #72]	; (8001e48 <_sbrk+0x68>)
 8001e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e02:	4b10      	ldr	r3, [pc, #64]	; (8001e44 <_sbrk+0x64>)
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4413      	add	r3, r2
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d207      	bcs.n	8001e20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e10:	f002 fbd8 	bl	80045c4 <__errno>
 8001e14:	4603      	mov	r3, r0
 8001e16:	220c      	movs	r2, #12
 8001e18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e1e:	e009      	b.n	8001e34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e20:	4b08      	ldr	r3, [pc, #32]	; (8001e44 <_sbrk+0x64>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e26:	4b07      	ldr	r3, [pc, #28]	; (8001e44 <_sbrk+0x64>)
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	4a05      	ldr	r2, [pc, #20]	; (8001e44 <_sbrk+0x64>)
 8001e30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e32:	68fb      	ldr	r3, [r7, #12]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	20020000 	.word	0x20020000
 8001e40:	00000400 	.word	0x00000400
 8001e44:	2000058c 	.word	0x2000058c
 8001e48:	200005a8 	.word	0x200005a8

08001e4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e50:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <SystemInit+0x20>)
 8001e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e56:	4a05      	ldr	r2, [pc, #20]	; (8001e6c <SystemInit+0x20>)
 8001e58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ea8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e74:	480d      	ldr	r0, [pc, #52]	; (8001eac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e76:	490e      	ldr	r1, [pc, #56]	; (8001eb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e78:	4a0e      	ldr	r2, [pc, #56]	; (8001eb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e7c:	e002      	b.n	8001e84 <LoopCopyDataInit>

08001e7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e82:	3304      	adds	r3, #4

08001e84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e88:	d3f9      	bcc.n	8001e7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e8a:	4a0b      	ldr	r2, [pc, #44]	; (8001eb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e8c:	4c0b      	ldr	r4, [pc, #44]	; (8001ebc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e90:	e001      	b.n	8001e96 <LoopFillZerobss>

08001e92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e94:	3204      	adds	r2, #4

08001e96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e98:	d3fb      	bcc.n	8001e92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e9a:	f7ff ffd7 	bl	8001e4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e9e:	f002 fb97 	bl	80045d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ea2:	f7fe fd67 	bl	8000974 <main>
  bx  lr    
 8001ea6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ea8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001eac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001eb0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001eb4:	080057e8 	.word	0x080057e8
  ldr r2, =_sbss
 8001eb8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001ebc:	200005a4 	.word	0x200005a4

08001ec0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ec0:	e7fe      	b.n	8001ec0 <ADC_IRQHandler>
	...

08001ec4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ec8:	4b0e      	ldr	r3, [pc, #56]	; (8001f04 <HAL_Init+0x40>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a0d      	ldr	r2, [pc, #52]	; (8001f04 <HAL_Init+0x40>)
 8001ece:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ed2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ed4:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <HAL_Init+0x40>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a0a      	ldr	r2, [pc, #40]	; (8001f04 <HAL_Init+0x40>)
 8001eda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ede:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ee0:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <HAL_Init+0x40>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a07      	ldr	r2, [pc, #28]	; (8001f04 <HAL_Init+0x40>)
 8001ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eec:	2003      	movs	r0, #3
 8001eee:	f000 f931 	bl	8002154 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	f000 f808 	bl	8001f08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ef8:	f7ff fe48 	bl	8001b8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40023c00 	.word	0x40023c00

08001f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f10:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <HAL_InitTick+0x54>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <HAL_InitTick+0x58>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	4619      	mov	r1, r3
 8001f1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f26:	4618      	mov	r0, r3
 8001f28:	f000 f93b 	bl	80021a2 <HAL_SYSTICK_Config>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e00e      	b.n	8001f54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b0f      	cmp	r3, #15
 8001f3a:	d80a      	bhi.n	8001f52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	f04f 30ff 	mov.w	r0, #4294967295
 8001f44:	f000 f911 	bl	800216a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f48:	4a06      	ldr	r2, [pc, #24]	; (8001f64 <HAL_InitTick+0x5c>)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	e000      	b.n	8001f54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	20000008 	.word	0x20000008
 8001f60:	20000010 	.word	0x20000010
 8001f64:	2000000c 	.word	0x2000000c

08001f68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f6c:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <HAL_IncTick+0x20>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	461a      	mov	r2, r3
 8001f72:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <HAL_IncTick+0x24>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4413      	add	r3, r2
 8001f78:	4a04      	ldr	r2, [pc, #16]	; (8001f8c <HAL_IncTick+0x24>)
 8001f7a:	6013      	str	r3, [r2, #0]
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	20000010 	.word	0x20000010
 8001f8c:	20000590 	.word	0x20000590

08001f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  return uwTick;
 8001f94:	4b03      	ldr	r3, [pc, #12]	; (8001fa4 <HAL_GetTick+0x14>)
 8001f96:	681b      	ldr	r3, [r3, #0]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	20000590 	.word	0x20000590

08001fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fb0:	f7ff ffee 	bl	8001f90 <HAL_GetTick>
 8001fb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc0:	d005      	beq.n	8001fce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fc2:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <HAL_Delay+0x44>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4413      	add	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fce:	bf00      	nop
 8001fd0:	f7ff ffde 	bl	8001f90 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d8f7      	bhi.n	8001fd0 <HAL_Delay+0x28>
  {
  }
}
 8001fe0:	bf00      	nop
 8001fe2:	bf00      	nop
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000010 	.word	0x20000010

08001ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <__NVIC_SetPriorityGrouping+0x44>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002006:	68ba      	ldr	r2, [r7, #8]
 8002008:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800200c:	4013      	ands	r3, r2
 800200e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002018:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800201c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002022:	4a04      	ldr	r2, [pc, #16]	; (8002034 <__NVIC_SetPriorityGrouping+0x44>)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	60d3      	str	r3, [r2, #12]
}
 8002028:	bf00      	nop
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800203c:	4b04      	ldr	r3, [pc, #16]	; (8002050 <__NVIC_GetPriorityGrouping+0x18>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	0a1b      	lsrs	r3, r3, #8
 8002042:	f003 0307 	and.w	r3, r3, #7
}
 8002046:	4618      	mov	r0, r3
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	6039      	str	r1, [r7, #0]
 800205e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002064:	2b00      	cmp	r3, #0
 8002066:	db0a      	blt.n	800207e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	b2da      	uxtb	r2, r3
 800206c:	490c      	ldr	r1, [pc, #48]	; (80020a0 <__NVIC_SetPriority+0x4c>)
 800206e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002072:	0112      	lsls	r2, r2, #4
 8002074:	b2d2      	uxtb	r2, r2
 8002076:	440b      	add	r3, r1
 8002078:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800207c:	e00a      	b.n	8002094 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	b2da      	uxtb	r2, r3
 8002082:	4908      	ldr	r1, [pc, #32]	; (80020a4 <__NVIC_SetPriority+0x50>)
 8002084:	79fb      	ldrb	r3, [r7, #7]
 8002086:	f003 030f 	and.w	r3, r3, #15
 800208a:	3b04      	subs	r3, #4
 800208c:	0112      	lsls	r2, r2, #4
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	440b      	add	r3, r1
 8002092:	761a      	strb	r2, [r3, #24]
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	e000e100 	.word	0xe000e100
 80020a4:	e000ed00 	.word	0xe000ed00

080020a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b089      	sub	sp, #36	; 0x24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	f1c3 0307 	rsb	r3, r3, #7
 80020c2:	2b04      	cmp	r3, #4
 80020c4:	bf28      	it	cs
 80020c6:	2304      	movcs	r3, #4
 80020c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	3304      	adds	r3, #4
 80020ce:	2b06      	cmp	r3, #6
 80020d0:	d902      	bls.n	80020d8 <NVIC_EncodePriority+0x30>
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	3b03      	subs	r3, #3
 80020d6:	e000      	b.n	80020da <NVIC_EncodePriority+0x32>
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020dc:	f04f 32ff 	mov.w	r2, #4294967295
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	43da      	mvns	r2, r3
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	401a      	ands	r2, r3
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020f0:	f04f 31ff 	mov.w	r1, #4294967295
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	fa01 f303 	lsl.w	r3, r1, r3
 80020fa:	43d9      	mvns	r1, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002100:	4313      	orrs	r3, r2
         );
}
 8002102:	4618      	mov	r0, r3
 8002104:	3724      	adds	r7, #36	; 0x24
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
	...

08002110 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3b01      	subs	r3, #1
 800211c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002120:	d301      	bcc.n	8002126 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002122:	2301      	movs	r3, #1
 8002124:	e00f      	b.n	8002146 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002126:	4a0a      	ldr	r2, [pc, #40]	; (8002150 <SysTick_Config+0x40>)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3b01      	subs	r3, #1
 800212c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800212e:	210f      	movs	r1, #15
 8002130:	f04f 30ff 	mov.w	r0, #4294967295
 8002134:	f7ff ff8e 	bl	8002054 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002138:	4b05      	ldr	r3, [pc, #20]	; (8002150 <SysTick_Config+0x40>)
 800213a:	2200      	movs	r2, #0
 800213c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800213e:	4b04      	ldr	r3, [pc, #16]	; (8002150 <SysTick_Config+0x40>)
 8002140:	2207      	movs	r2, #7
 8002142:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	e000e010 	.word	0xe000e010

08002154 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f7ff ff47 	bl	8001ff0 <__NVIC_SetPriorityGrouping>
}
 8002162:	bf00      	nop
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800216a:	b580      	push	{r7, lr}
 800216c:	b086      	sub	sp, #24
 800216e:	af00      	add	r7, sp, #0
 8002170:	4603      	mov	r3, r0
 8002172:	60b9      	str	r1, [r7, #8]
 8002174:	607a      	str	r2, [r7, #4]
 8002176:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002178:	2300      	movs	r3, #0
 800217a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800217c:	f7ff ff5c 	bl	8002038 <__NVIC_GetPriorityGrouping>
 8002180:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	68b9      	ldr	r1, [r7, #8]
 8002186:	6978      	ldr	r0, [r7, #20]
 8002188:	f7ff ff8e 	bl	80020a8 <NVIC_EncodePriority>
 800218c:	4602      	mov	r2, r0
 800218e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002192:	4611      	mov	r1, r2
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff ff5d 	bl	8002054 <__NVIC_SetPriority>
}
 800219a:	bf00      	nop
 800219c:	3718      	adds	r7, #24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b082      	sub	sp, #8
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff ffb0 	bl	8002110 <SysTick_Config>
 80021b0:	4603      	mov	r3, r0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
	...

080021bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021bc:	b480      	push	{r7}
 80021be:	b089      	sub	sp, #36	; 0x24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021d2:	2300      	movs	r3, #0
 80021d4:	61fb      	str	r3, [r7, #28]
 80021d6:	e16b      	b.n	80024b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021d8:	2201      	movs	r2, #1
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	4013      	ands	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	f040 815a 	bne.w	80024aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f003 0303 	and.w	r3, r3, #3
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d005      	beq.n	800220e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800220a:	2b02      	cmp	r3, #2
 800220c:	d130      	bne.n	8002270 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	2203      	movs	r2, #3
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	43db      	mvns	r3, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4013      	ands	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	68da      	ldr	r2, [r3, #12]
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4313      	orrs	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002244:	2201      	movs	r2, #1
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	43db      	mvns	r3, r3
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4013      	ands	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	091b      	lsrs	r3, r3, #4
 800225a:	f003 0201 	and.w	r2, r3, #1
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	4313      	orrs	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 0303 	and.w	r3, r3, #3
 8002278:	2b03      	cmp	r3, #3
 800227a:	d017      	beq.n	80022ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	2203      	movs	r2, #3
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	43db      	mvns	r3, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4013      	ands	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f003 0303 	and.w	r3, r3, #3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d123      	bne.n	8002300 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	08da      	lsrs	r2, r3, #3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3208      	adds	r2, #8
 80022c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	220f      	movs	r2, #15
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	43db      	mvns	r3, r3
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4013      	ands	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	691a      	ldr	r2, [r3, #16]
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	08da      	lsrs	r2, r3, #3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	3208      	adds	r2, #8
 80022fa:	69b9      	ldr	r1, [r7, #24]
 80022fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	2203      	movs	r2, #3
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	43db      	mvns	r3, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f003 0203 	and.w	r2, r3, #3
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4313      	orrs	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 80b4 	beq.w	80024aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	4b60      	ldr	r3, [pc, #384]	; (80024c8 <HAL_GPIO_Init+0x30c>)
 8002348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234a:	4a5f      	ldr	r2, [pc, #380]	; (80024c8 <HAL_GPIO_Init+0x30c>)
 800234c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002350:	6453      	str	r3, [r2, #68]	; 0x44
 8002352:	4b5d      	ldr	r3, [pc, #372]	; (80024c8 <HAL_GPIO_Init+0x30c>)
 8002354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002356:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800235e:	4a5b      	ldr	r2, [pc, #364]	; (80024cc <HAL_GPIO_Init+0x310>)
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	089b      	lsrs	r3, r3, #2
 8002364:	3302      	adds	r3, #2
 8002366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800236a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	f003 0303 	and.w	r3, r3, #3
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	220f      	movs	r2, #15
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43db      	mvns	r3, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4013      	ands	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a52      	ldr	r2, [pc, #328]	; (80024d0 <HAL_GPIO_Init+0x314>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d02b      	beq.n	80023e2 <HAL_GPIO_Init+0x226>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a51      	ldr	r2, [pc, #324]	; (80024d4 <HAL_GPIO_Init+0x318>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d025      	beq.n	80023de <HAL_GPIO_Init+0x222>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a50      	ldr	r2, [pc, #320]	; (80024d8 <HAL_GPIO_Init+0x31c>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d01f      	beq.n	80023da <HAL_GPIO_Init+0x21e>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a4f      	ldr	r2, [pc, #316]	; (80024dc <HAL_GPIO_Init+0x320>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d019      	beq.n	80023d6 <HAL_GPIO_Init+0x21a>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a4e      	ldr	r2, [pc, #312]	; (80024e0 <HAL_GPIO_Init+0x324>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d013      	beq.n	80023d2 <HAL_GPIO_Init+0x216>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a4d      	ldr	r2, [pc, #308]	; (80024e4 <HAL_GPIO_Init+0x328>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d00d      	beq.n	80023ce <HAL_GPIO_Init+0x212>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a4c      	ldr	r2, [pc, #304]	; (80024e8 <HAL_GPIO_Init+0x32c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d007      	beq.n	80023ca <HAL_GPIO_Init+0x20e>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a4b      	ldr	r2, [pc, #300]	; (80024ec <HAL_GPIO_Init+0x330>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d101      	bne.n	80023c6 <HAL_GPIO_Init+0x20a>
 80023c2:	2307      	movs	r3, #7
 80023c4:	e00e      	b.n	80023e4 <HAL_GPIO_Init+0x228>
 80023c6:	2308      	movs	r3, #8
 80023c8:	e00c      	b.n	80023e4 <HAL_GPIO_Init+0x228>
 80023ca:	2306      	movs	r3, #6
 80023cc:	e00a      	b.n	80023e4 <HAL_GPIO_Init+0x228>
 80023ce:	2305      	movs	r3, #5
 80023d0:	e008      	b.n	80023e4 <HAL_GPIO_Init+0x228>
 80023d2:	2304      	movs	r3, #4
 80023d4:	e006      	b.n	80023e4 <HAL_GPIO_Init+0x228>
 80023d6:	2303      	movs	r3, #3
 80023d8:	e004      	b.n	80023e4 <HAL_GPIO_Init+0x228>
 80023da:	2302      	movs	r3, #2
 80023dc:	e002      	b.n	80023e4 <HAL_GPIO_Init+0x228>
 80023de:	2301      	movs	r3, #1
 80023e0:	e000      	b.n	80023e4 <HAL_GPIO_Init+0x228>
 80023e2:	2300      	movs	r3, #0
 80023e4:	69fa      	ldr	r2, [r7, #28]
 80023e6:	f002 0203 	and.w	r2, r2, #3
 80023ea:	0092      	lsls	r2, r2, #2
 80023ec:	4093      	lsls	r3, r2
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023f4:	4935      	ldr	r1, [pc, #212]	; (80024cc <HAL_GPIO_Init+0x310>)
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	089b      	lsrs	r3, r3, #2
 80023fa:	3302      	adds	r3, #2
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002402:	4b3b      	ldr	r3, [pc, #236]	; (80024f0 <HAL_GPIO_Init+0x334>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	43db      	mvns	r3, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4013      	ands	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	4313      	orrs	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002426:	4a32      	ldr	r2, [pc, #200]	; (80024f0 <HAL_GPIO_Init+0x334>)
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800242c:	4b30      	ldr	r3, [pc, #192]	; (80024f0 <HAL_GPIO_Init+0x334>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	43db      	mvns	r3, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4013      	ands	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	4313      	orrs	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002450:	4a27      	ldr	r2, [pc, #156]	; (80024f0 <HAL_GPIO_Init+0x334>)
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002456:	4b26      	ldr	r3, [pc, #152]	; (80024f0 <HAL_GPIO_Init+0x334>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	43db      	mvns	r3, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4013      	ands	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	4313      	orrs	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800247a:	4a1d      	ldr	r2, [pc, #116]	; (80024f0 <HAL_GPIO_Init+0x334>)
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002480:	4b1b      	ldr	r3, [pc, #108]	; (80024f0 <HAL_GPIO_Init+0x334>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	43db      	mvns	r3, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4013      	ands	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d003      	beq.n	80024a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024a4:	4a12      	ldr	r2, [pc, #72]	; (80024f0 <HAL_GPIO_Init+0x334>)
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	3301      	adds	r3, #1
 80024ae:	61fb      	str	r3, [r7, #28]
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	2b0f      	cmp	r3, #15
 80024b4:	f67f ae90 	bls.w	80021d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024b8:	bf00      	nop
 80024ba:	bf00      	nop
 80024bc:	3724      	adds	r7, #36	; 0x24
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	40023800 	.word	0x40023800
 80024cc:	40013800 	.word	0x40013800
 80024d0:	40020000 	.word	0x40020000
 80024d4:	40020400 	.word	0x40020400
 80024d8:	40020800 	.word	0x40020800
 80024dc:	40020c00 	.word	0x40020c00
 80024e0:	40021000 	.word	0x40021000
 80024e4:	40021400 	.word	0x40021400
 80024e8:	40021800 	.word	0x40021800
 80024ec:	40021c00 	.word	0x40021c00
 80024f0:	40013c00 	.word	0x40013c00

080024f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	460b      	mov	r3, r1
 80024fe:	807b      	strh	r3, [r7, #2]
 8002500:	4613      	mov	r3, r2
 8002502:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002504:	787b      	ldrb	r3, [r7, #1]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800250a:	887a      	ldrh	r2, [r7, #2]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002510:	e003      	b.n	800251a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002512:	887b      	ldrh	r3, [r7, #2]
 8002514:	041a      	lsls	r2, r3, #16
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	619a      	str	r2, [r3, #24]
}
 800251a:	bf00      	nop
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
	...

08002528 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e12b      	b.n	8002792 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d106      	bne.n	8002554 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f7ff fb44 	bl	8001bdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2224      	movs	r2, #36	; 0x24
 8002558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 0201 	bic.w	r2, r2, #1
 800256a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800257a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800258a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800258c:	f001 f898 	bl	80036c0 <HAL_RCC_GetPCLK1Freq>
 8002590:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	4a81      	ldr	r2, [pc, #516]	; (800279c <HAL_I2C_Init+0x274>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d807      	bhi.n	80025ac <HAL_I2C_Init+0x84>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4a80      	ldr	r2, [pc, #512]	; (80027a0 <HAL_I2C_Init+0x278>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	bf94      	ite	ls
 80025a4:	2301      	movls	r3, #1
 80025a6:	2300      	movhi	r3, #0
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	e006      	b.n	80025ba <HAL_I2C_Init+0x92>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	4a7d      	ldr	r2, [pc, #500]	; (80027a4 <HAL_I2C_Init+0x27c>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	bf94      	ite	ls
 80025b4:	2301      	movls	r3, #1
 80025b6:	2300      	movhi	r3, #0
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e0e7      	b.n	8002792 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	4a78      	ldr	r2, [pc, #480]	; (80027a8 <HAL_I2C_Init+0x280>)
 80025c6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ca:	0c9b      	lsrs	r3, r3, #18
 80025cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68ba      	ldr	r2, [r7, #8]
 80025de:	430a      	orrs	r2, r1
 80025e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	4a6a      	ldr	r2, [pc, #424]	; (800279c <HAL_I2C_Init+0x274>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d802      	bhi.n	80025fc <HAL_I2C_Init+0xd4>
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	3301      	adds	r3, #1
 80025fa:	e009      	b.n	8002610 <HAL_I2C_Init+0xe8>
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002602:	fb02 f303 	mul.w	r3, r2, r3
 8002606:	4a69      	ldr	r2, [pc, #420]	; (80027ac <HAL_I2C_Init+0x284>)
 8002608:	fba2 2303 	umull	r2, r3, r2, r3
 800260c:	099b      	lsrs	r3, r3, #6
 800260e:	3301      	adds	r3, #1
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	6812      	ldr	r2, [r2, #0]
 8002614:	430b      	orrs	r3, r1
 8002616:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002622:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	495c      	ldr	r1, [pc, #368]	; (800279c <HAL_I2C_Init+0x274>)
 800262c:	428b      	cmp	r3, r1
 800262e:	d819      	bhi.n	8002664 <HAL_I2C_Init+0x13c>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	1e59      	subs	r1, r3, #1
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	fbb1 f3f3 	udiv	r3, r1, r3
 800263e:	1c59      	adds	r1, r3, #1
 8002640:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002644:	400b      	ands	r3, r1
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00a      	beq.n	8002660 <HAL_I2C_Init+0x138>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	1e59      	subs	r1, r3, #1
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	fbb1 f3f3 	udiv	r3, r1, r3
 8002658:	3301      	adds	r3, #1
 800265a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800265e:	e051      	b.n	8002704 <HAL_I2C_Init+0x1dc>
 8002660:	2304      	movs	r3, #4
 8002662:	e04f      	b.n	8002704 <HAL_I2C_Init+0x1dc>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d111      	bne.n	8002690 <HAL_I2C_Init+0x168>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	1e58      	subs	r0, r3, #1
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6859      	ldr	r1, [r3, #4]
 8002674:	460b      	mov	r3, r1
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	440b      	add	r3, r1
 800267a:	fbb0 f3f3 	udiv	r3, r0, r3
 800267e:	3301      	adds	r3, #1
 8002680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002684:	2b00      	cmp	r3, #0
 8002686:	bf0c      	ite	eq
 8002688:	2301      	moveq	r3, #1
 800268a:	2300      	movne	r3, #0
 800268c:	b2db      	uxtb	r3, r3
 800268e:	e012      	b.n	80026b6 <HAL_I2C_Init+0x18e>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	1e58      	subs	r0, r3, #1
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6859      	ldr	r1, [r3, #4]
 8002698:	460b      	mov	r3, r1
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	440b      	add	r3, r1
 800269e:	0099      	lsls	r1, r3, #2
 80026a0:	440b      	add	r3, r1
 80026a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026a6:	3301      	adds	r3, #1
 80026a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	bf0c      	ite	eq
 80026b0:	2301      	moveq	r3, #1
 80026b2:	2300      	movne	r3, #0
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <HAL_I2C_Init+0x196>
 80026ba:	2301      	movs	r3, #1
 80026bc:	e022      	b.n	8002704 <HAL_I2C_Init+0x1dc>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10e      	bne.n	80026e4 <HAL_I2C_Init+0x1bc>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	1e58      	subs	r0, r3, #1
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6859      	ldr	r1, [r3, #4]
 80026ce:	460b      	mov	r3, r1
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	440b      	add	r3, r1
 80026d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80026d8:	3301      	adds	r3, #1
 80026da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026e2:	e00f      	b.n	8002704 <HAL_I2C_Init+0x1dc>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	1e58      	subs	r0, r3, #1
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6859      	ldr	r1, [r3, #4]
 80026ec:	460b      	mov	r3, r1
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	0099      	lsls	r1, r3, #2
 80026f4:	440b      	add	r3, r1
 80026f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026fa:	3301      	adds	r3, #1
 80026fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002700:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	6809      	ldr	r1, [r1, #0]
 8002708:	4313      	orrs	r3, r2
 800270a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	69da      	ldr	r2, [r3, #28]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	431a      	orrs	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	430a      	orrs	r2, r1
 8002726:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002732:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	6911      	ldr	r1, [r2, #16]
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	68d2      	ldr	r2, [r2, #12]
 800273e:	4311      	orrs	r1, r2
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	6812      	ldr	r2, [r2, #0]
 8002744:	430b      	orrs	r3, r1
 8002746:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	695a      	ldr	r2, [r3, #20]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	431a      	orrs	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	430a      	orrs	r2, r1
 8002762:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f042 0201 	orr.w	r2, r2, #1
 8002772:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2220      	movs	r2, #32
 800277e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	000186a0 	.word	0x000186a0
 80027a0:	001e847f 	.word	0x001e847f
 80027a4:	003d08ff 	.word	0x003d08ff
 80027a8:	431bde83 	.word	0x431bde83
 80027ac:	10624dd3 	.word	0x10624dd3

080027b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b088      	sub	sp, #32
 80027b4:	af02      	add	r7, sp, #8
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	4608      	mov	r0, r1
 80027ba:	4611      	mov	r1, r2
 80027bc:	461a      	mov	r2, r3
 80027be:	4603      	mov	r3, r0
 80027c0:	817b      	strh	r3, [r7, #10]
 80027c2:	460b      	mov	r3, r1
 80027c4:	813b      	strh	r3, [r7, #8]
 80027c6:	4613      	mov	r3, r2
 80027c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027ca:	f7ff fbe1 	bl	8001f90 <HAL_GetTick>
 80027ce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	2b20      	cmp	r3, #32
 80027da:	f040 80d9 	bne.w	8002990 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	2319      	movs	r3, #25
 80027e4:	2201      	movs	r2, #1
 80027e6:	496d      	ldr	r1, [pc, #436]	; (800299c <HAL_I2C_Mem_Write+0x1ec>)
 80027e8:	68f8      	ldr	r0, [r7, #12]
 80027ea:	f000 f971 	bl	8002ad0 <I2C_WaitOnFlagUntilTimeout>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80027f4:	2302      	movs	r3, #2
 80027f6:	e0cc      	b.n	8002992 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d101      	bne.n	8002806 <HAL_I2C_Mem_Write+0x56>
 8002802:	2302      	movs	r3, #2
 8002804:	e0c5      	b.n	8002992 <HAL_I2C_Mem_Write+0x1e2>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	2b01      	cmp	r3, #1
 800281a:	d007      	beq.n	800282c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f042 0201 	orr.w	r2, r2, #1
 800282a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800283a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2221      	movs	r2, #33	; 0x21
 8002840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2240      	movs	r2, #64	; 0x40
 8002848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6a3a      	ldr	r2, [r7, #32]
 8002856:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800285c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002862:	b29a      	uxth	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	4a4d      	ldr	r2, [pc, #308]	; (80029a0 <HAL_I2C_Mem_Write+0x1f0>)
 800286c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800286e:	88f8      	ldrh	r0, [r7, #6]
 8002870:	893a      	ldrh	r2, [r7, #8]
 8002872:	8979      	ldrh	r1, [r7, #10]
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	9301      	str	r3, [sp, #4]
 8002878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	4603      	mov	r3, r0
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f000 f890 	bl	80029a4 <I2C_RequestMemoryWrite>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d052      	beq.n	8002930 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e081      	b.n	8002992 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f000 f9f2 	bl	8002c7c <I2C_WaitOnTXEFlagUntilTimeout>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00d      	beq.n	80028ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	d107      	bne.n	80028b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e06b      	b.n	8002992 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	781a      	ldrb	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ca:	1c5a      	adds	r2, r3, #1
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d4:	3b01      	subs	r3, #1
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	3b01      	subs	r3, #1
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	695b      	ldr	r3, [r3, #20]
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	2b04      	cmp	r3, #4
 80028f6:	d11b      	bne.n	8002930 <HAL_I2C_Mem_Write+0x180>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d017      	beq.n	8002930 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002904:	781a      	ldrb	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002910:	1c5a      	adds	r2, r3, #1
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800291a:	3b01      	subs	r3, #1
 800291c:	b29a      	uxth	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002926:	b29b      	uxth	r3, r3
 8002928:	3b01      	subs	r3, #1
 800292a:	b29a      	uxth	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1aa      	bne.n	800288e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f000 f9de 	bl	8002cfe <I2C_WaitOnBTFFlagUntilTimeout>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00d      	beq.n	8002964 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294c:	2b04      	cmp	r3, #4
 800294e:	d107      	bne.n	8002960 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800295e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e016      	b.n	8002992 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002972:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2220      	movs	r2, #32
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800298c:	2300      	movs	r3, #0
 800298e:	e000      	b.n	8002992 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002990:	2302      	movs	r3, #2
  }
}
 8002992:	4618      	mov	r0, r3
 8002994:	3718      	adds	r7, #24
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	00100002 	.word	0x00100002
 80029a0:	ffff0000 	.word	0xffff0000

080029a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b088      	sub	sp, #32
 80029a8:	af02      	add	r7, sp, #8
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	4608      	mov	r0, r1
 80029ae:	4611      	mov	r1, r2
 80029b0:	461a      	mov	r2, r3
 80029b2:	4603      	mov	r3, r0
 80029b4:	817b      	strh	r3, [r7, #10]
 80029b6:	460b      	mov	r3, r1
 80029b8:	813b      	strh	r3, [r7, #8]
 80029ba:	4613      	mov	r3, r2
 80029bc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	6a3b      	ldr	r3, [r7, #32]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 f878 	bl	8002ad0 <I2C_WaitOnFlagUntilTimeout>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00d      	beq.n	8002a02 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029f4:	d103      	bne.n	80029fe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e05f      	b.n	8002ac2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a02:	897b      	ldrh	r3, [r7, #10]
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	461a      	mov	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a10:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	6a3a      	ldr	r2, [r7, #32]
 8002a16:	492d      	ldr	r1, [pc, #180]	; (8002acc <I2C_RequestMemoryWrite+0x128>)
 8002a18:	68f8      	ldr	r0, [r7, #12]
 8002a1a:	f000 f8b0 	bl	8002b7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e04c      	b.n	8002ac2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a28:	2300      	movs	r3, #0
 8002a2a:	617b      	str	r3, [r7, #20]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	617b      	str	r3, [r7, #20]
 8002a3c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a40:	6a39      	ldr	r1, [r7, #32]
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f000 f91a 	bl	8002c7c <I2C_WaitOnTXEFlagUntilTimeout>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00d      	beq.n	8002a6a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	d107      	bne.n	8002a66 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a64:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e02b      	b.n	8002ac2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a6a:	88fb      	ldrh	r3, [r7, #6]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d105      	bne.n	8002a7c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a70:	893b      	ldrh	r3, [r7, #8]
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	611a      	str	r2, [r3, #16]
 8002a7a:	e021      	b.n	8002ac0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a7c:	893b      	ldrh	r3, [r7, #8]
 8002a7e:	0a1b      	lsrs	r3, r3, #8
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	b2da      	uxtb	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a8c:	6a39      	ldr	r1, [r7, #32]
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f000 f8f4 	bl	8002c7c <I2C_WaitOnTXEFlagUntilTimeout>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00d      	beq.n	8002ab6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	d107      	bne.n	8002ab2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ab0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e005      	b.n	8002ac2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ab6:	893b      	ldrh	r3, [r7, #8]
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3718      	adds	r7, #24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	00010002 	.word	0x00010002

08002ad0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	603b      	str	r3, [r7, #0]
 8002adc:	4613      	mov	r3, r2
 8002ade:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ae0:	e025      	b.n	8002b2e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae8:	d021      	beq.n	8002b2e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aea:	f7ff fa51 	bl	8001f90 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d302      	bcc.n	8002b00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d116      	bne.n	8002b2e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2220      	movs	r2, #32
 8002b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	f043 0220 	orr.w	r2, r3, #32
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e023      	b.n	8002b76 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	0c1b      	lsrs	r3, r3, #16
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d10d      	bne.n	8002b54 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	43da      	mvns	r2, r3
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	4013      	ands	r3, r2
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	bf0c      	ite	eq
 8002b4a:	2301      	moveq	r3, #1
 8002b4c:	2300      	movne	r3, #0
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	461a      	mov	r2, r3
 8002b52:	e00c      	b.n	8002b6e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	43da      	mvns	r2, r3
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	bf0c      	ite	eq
 8002b66:	2301      	moveq	r3, #1
 8002b68:	2300      	movne	r3, #0
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	79fb      	ldrb	r3, [r7, #7]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d0b6      	beq.n	8002ae2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b084      	sub	sp, #16
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	60f8      	str	r0, [r7, #12]
 8002b86:	60b9      	str	r1, [r7, #8]
 8002b88:	607a      	str	r2, [r7, #4]
 8002b8a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b8c:	e051      	b.n	8002c32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b9c:	d123      	bne.n	8002be6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002bb6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2220      	movs	r2, #32
 8002bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	f043 0204 	orr.w	r2, r3, #4
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e046      	b.n	8002c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bec:	d021      	beq.n	8002c32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bee:	f7ff f9cf 	bl	8001f90 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d302      	bcc.n	8002c04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d116      	bne.n	8002c32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	f043 0220 	orr.w	r2, r3, #32
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e020      	b.n	8002c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	0c1b      	lsrs	r3, r3, #16
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d10c      	bne.n	8002c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	43da      	mvns	r2, r3
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	4013      	ands	r3, r2
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	bf14      	ite	ne
 8002c4e:	2301      	movne	r3, #1
 8002c50:	2300      	moveq	r3, #0
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	e00b      	b.n	8002c6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	43da      	mvns	r2, r3
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	4013      	ands	r3, r2
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	bf14      	ite	ne
 8002c68:	2301      	movne	r3, #1
 8002c6a:	2300      	moveq	r3, #0
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d18d      	bne.n	8002b8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c88:	e02d      	b.n	8002ce6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f000 f878 	bl	8002d80 <I2C_IsAcknowledgeFailed>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e02d      	b.n	8002cf6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca0:	d021      	beq.n	8002ce6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ca2:	f7ff f975 	bl	8001f90 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d302      	bcc.n	8002cb8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d116      	bne.n	8002ce6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	f043 0220 	orr.w	r2, r3, #32
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e007      	b.n	8002cf6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf0:	2b80      	cmp	r3, #128	; 0x80
 8002cf2:	d1ca      	bne.n	8002c8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b084      	sub	sp, #16
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	60f8      	str	r0, [r7, #12]
 8002d06:	60b9      	str	r1, [r7, #8]
 8002d08:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d0a:	e02d      	b.n	8002d68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 f837 	bl	8002d80 <I2C_IsAcknowledgeFailed>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e02d      	b.n	8002d78 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d22:	d021      	beq.n	8002d68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d24:	f7ff f934 	bl	8001f90 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d302      	bcc.n	8002d3a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d116      	bne.n	8002d68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2220      	movs	r2, #32
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	f043 0220 	orr.w	r2, r3, #32
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e007      	b.n	8002d78 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	f003 0304 	and.w	r3, r3, #4
 8002d72:	2b04      	cmp	r3, #4
 8002d74:	d1ca      	bne.n	8002d0c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d96:	d11b      	bne.n	8002dd0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002da0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2220      	movs	r2, #32
 8002dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbc:	f043 0204 	orr.w	r2, r3, #4
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e000      	b.n	8002dd2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
	...

08002de0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e267      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d075      	beq.n	8002eea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dfe:	4b88      	ldr	r3, [pc, #544]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 030c 	and.w	r3, r3, #12
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	d00c      	beq.n	8002e24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e0a:	4b85      	ldr	r3, [pc, #532]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e12:	2b08      	cmp	r3, #8
 8002e14:	d112      	bne.n	8002e3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e16:	4b82      	ldr	r3, [pc, #520]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e22:	d10b      	bne.n	8002e3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e24:	4b7e      	ldr	r3, [pc, #504]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d05b      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x108>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d157      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e242      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e44:	d106      	bne.n	8002e54 <HAL_RCC_OscConfig+0x74>
 8002e46:	4b76      	ldr	r3, [pc, #472]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a75      	ldr	r2, [pc, #468]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e50:	6013      	str	r3, [r2, #0]
 8002e52:	e01d      	b.n	8002e90 <HAL_RCC_OscConfig+0xb0>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e5c:	d10c      	bne.n	8002e78 <HAL_RCC_OscConfig+0x98>
 8002e5e:	4b70      	ldr	r3, [pc, #448]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a6f      	ldr	r2, [pc, #444]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002e64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e68:	6013      	str	r3, [r2, #0]
 8002e6a:	4b6d      	ldr	r3, [pc, #436]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a6c      	ldr	r2, [pc, #432]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e74:	6013      	str	r3, [r2, #0]
 8002e76:	e00b      	b.n	8002e90 <HAL_RCC_OscConfig+0xb0>
 8002e78:	4b69      	ldr	r3, [pc, #420]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a68      	ldr	r2, [pc, #416]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e82:	6013      	str	r3, [r2, #0]
 8002e84:	4b66      	ldr	r3, [pc, #408]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a65      	ldr	r2, [pc, #404]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002e8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d013      	beq.n	8002ec0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e98:	f7ff f87a 	bl	8001f90 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ea0:	f7ff f876 	bl	8001f90 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b64      	cmp	r3, #100	; 0x64
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e207      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eb2:	4b5b      	ldr	r3, [pc, #364]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0f0      	beq.n	8002ea0 <HAL_RCC_OscConfig+0xc0>
 8002ebe:	e014      	b.n	8002eea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec0:	f7ff f866 	bl	8001f90 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ec8:	f7ff f862 	bl	8001f90 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b64      	cmp	r3, #100	; 0x64
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e1f3      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eda:	4b51      	ldr	r3, [pc, #324]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1f0      	bne.n	8002ec8 <HAL_RCC_OscConfig+0xe8>
 8002ee6:	e000      	b.n	8002eea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d063      	beq.n	8002fbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ef6:	4b4a      	ldr	r3, [pc, #296]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 030c 	and.w	r3, r3, #12
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00b      	beq.n	8002f1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f02:	4b47      	ldr	r3, [pc, #284]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f0a:	2b08      	cmp	r3, #8
 8002f0c:	d11c      	bne.n	8002f48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f0e:	4b44      	ldr	r3, [pc, #272]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d116      	bne.n	8002f48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f1a:	4b41      	ldr	r3, [pc, #260]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d005      	beq.n	8002f32 <HAL_RCC_OscConfig+0x152>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d001      	beq.n	8002f32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e1c7      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f32:	4b3b      	ldr	r3, [pc, #236]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	4937      	ldr	r1, [pc, #220]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f46:	e03a      	b.n	8002fbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d020      	beq.n	8002f92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f50:	4b34      	ldr	r3, [pc, #208]	; (8003024 <HAL_RCC_OscConfig+0x244>)
 8002f52:	2201      	movs	r2, #1
 8002f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f56:	f7ff f81b 	bl	8001f90 <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f5c:	e008      	b.n	8002f70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f5e:	f7ff f817 	bl	8001f90 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e1a8      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f70:	4b2b      	ldr	r3, [pc, #172]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0f0      	beq.n	8002f5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f7c:	4b28      	ldr	r3, [pc, #160]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	4925      	ldr	r1, [pc, #148]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	600b      	str	r3, [r1, #0]
 8002f90:	e015      	b.n	8002fbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f92:	4b24      	ldr	r3, [pc, #144]	; (8003024 <HAL_RCC_OscConfig+0x244>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f98:	f7fe fffa 	bl	8001f90 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fa0:	f7fe fff6 	bl	8001f90 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e187      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fb2:	4b1b      	ldr	r3, [pc, #108]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f0      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d036      	beq.n	8003038 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d016      	beq.n	8003000 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fd2:	4b15      	ldr	r3, [pc, #84]	; (8003028 <HAL_RCC_OscConfig+0x248>)
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd8:	f7fe ffda 	bl	8001f90 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fe0:	f7fe ffd6 	bl	8001f90 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e167      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ff2:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <HAL_RCC_OscConfig+0x240>)
 8002ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0f0      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x200>
 8002ffe:	e01b      	b.n	8003038 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003000:	4b09      	ldr	r3, [pc, #36]	; (8003028 <HAL_RCC_OscConfig+0x248>)
 8003002:	2200      	movs	r2, #0
 8003004:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003006:	f7fe ffc3 	bl	8001f90 <HAL_GetTick>
 800300a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800300c:	e00e      	b.n	800302c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800300e:	f7fe ffbf 	bl	8001f90 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d907      	bls.n	800302c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e150      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
 8003020:	40023800 	.word	0x40023800
 8003024:	42470000 	.word	0x42470000
 8003028:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800302c:	4b88      	ldr	r3, [pc, #544]	; (8003250 <HAL_RCC_OscConfig+0x470>)
 800302e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1ea      	bne.n	800300e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0304 	and.w	r3, r3, #4
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 8097 	beq.w	8003174 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003046:	2300      	movs	r3, #0
 8003048:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800304a:	4b81      	ldr	r3, [pc, #516]	; (8003250 <HAL_RCC_OscConfig+0x470>)
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10f      	bne.n	8003076 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003056:	2300      	movs	r3, #0
 8003058:	60bb      	str	r3, [r7, #8]
 800305a:	4b7d      	ldr	r3, [pc, #500]	; (8003250 <HAL_RCC_OscConfig+0x470>)
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	4a7c      	ldr	r2, [pc, #496]	; (8003250 <HAL_RCC_OscConfig+0x470>)
 8003060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003064:	6413      	str	r3, [r2, #64]	; 0x40
 8003066:	4b7a      	ldr	r3, [pc, #488]	; (8003250 <HAL_RCC_OscConfig+0x470>)
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800306e:	60bb      	str	r3, [r7, #8]
 8003070:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003072:	2301      	movs	r3, #1
 8003074:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003076:	4b77      	ldr	r3, [pc, #476]	; (8003254 <HAL_RCC_OscConfig+0x474>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307e:	2b00      	cmp	r3, #0
 8003080:	d118      	bne.n	80030b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003082:	4b74      	ldr	r3, [pc, #464]	; (8003254 <HAL_RCC_OscConfig+0x474>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a73      	ldr	r2, [pc, #460]	; (8003254 <HAL_RCC_OscConfig+0x474>)
 8003088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800308c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800308e:	f7fe ff7f 	bl	8001f90 <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003094:	e008      	b.n	80030a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003096:	f7fe ff7b 	bl	8001f90 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e10c      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a8:	4b6a      	ldr	r3, [pc, #424]	; (8003254 <HAL_RCC_OscConfig+0x474>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0f0      	beq.n	8003096 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d106      	bne.n	80030ca <HAL_RCC_OscConfig+0x2ea>
 80030bc:	4b64      	ldr	r3, [pc, #400]	; (8003250 <HAL_RCC_OscConfig+0x470>)
 80030be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c0:	4a63      	ldr	r2, [pc, #396]	; (8003250 <HAL_RCC_OscConfig+0x470>)
 80030c2:	f043 0301 	orr.w	r3, r3, #1
 80030c6:	6713      	str	r3, [r2, #112]	; 0x70
 80030c8:	e01c      	b.n	8003104 <HAL_RCC_OscConfig+0x324>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	2b05      	cmp	r3, #5
 80030d0:	d10c      	bne.n	80030ec <HAL_RCC_OscConfig+0x30c>
 80030d2:	4b5f      	ldr	r3, [pc, #380]	; (8003250 <HAL_RCC_OscConfig+0x470>)
 80030d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d6:	4a5e      	ldr	r2, [pc, #376]	; (8003250 <HAL_RCC_OscConfig+0x470>)
 80030d8:	f043 0304 	orr.w	r3, r3, #4
 80030dc:	6713      	str	r3, [r2, #112]	; 0x70
 80030de:	4b5c      	ldr	r3, [pc, #368]	; (8003250 <HAL_RCC_OscConfig+0x470>)
 80030e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e2:	4a5b      	ldr	r2, [pc, #364]	; (8003250 <HAL_RCC_OscConfig+0x470>)
 80030e4:	f043 0301 	orr.w	r3, r3, #1
 80030e8:	6713      	str	r3, [r2, #112]	; 0x70
 80030ea:	e00b      	b.n	8003104 <HAL_RCC_OscConfig+0x324>
 80030ec:	4b58      	ldr	r3, [pc, #352]	; (8003250 <HAL_RCC_OscConfig+0x470>)
 80030ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f0:	4a57      	ldr	r2, [pc, #348]	; (8003250 <HAL_RCC_OscConfig+0x470>)
 80030f2:	f023 0301 	bic.w	r3, r3, #1
 80030f6:	6713      	str	r3, [r2, #112]	; 0x70
 80030f8:	4b55      	ldr	r3, [pc, #340]	; (8003250 <HAL_RCC_OscConfig+0x470>)
 80030fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fc:	4a54      	ldr	r2, [pc, #336]	; (8003250 <HAL_RCC_OscConfig+0x470>)
 80030fe:	f023 0304 	bic.w	r3, r3, #4
 8003102:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d015      	beq.n	8003138 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800310c:	f7fe ff40 	bl	8001f90 <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003112:	e00a      	b.n	800312a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003114:	f7fe ff3c 	bl	8001f90 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003122:	4293      	cmp	r3, r2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e0cb      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800312a:	4b49      	ldr	r3, [pc, #292]	; (8003250 <HAL_RCC_OscConfig+0x470>)
 800312c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0ee      	beq.n	8003114 <HAL_RCC_OscConfig+0x334>
 8003136:	e014      	b.n	8003162 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003138:	f7fe ff2a 	bl	8001f90 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800313e:	e00a      	b.n	8003156 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003140:	f7fe ff26 	bl	8001f90 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	f241 3288 	movw	r2, #5000	; 0x1388
 800314e:	4293      	cmp	r3, r2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e0b5      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003156:	4b3e      	ldr	r3, [pc, #248]	; (8003250 <HAL_RCC_OscConfig+0x470>)
 8003158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1ee      	bne.n	8003140 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003162:	7dfb      	ldrb	r3, [r7, #23]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d105      	bne.n	8003174 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003168:	4b39      	ldr	r3, [pc, #228]	; (8003250 <HAL_RCC_OscConfig+0x470>)
 800316a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316c:	4a38      	ldr	r2, [pc, #224]	; (8003250 <HAL_RCC_OscConfig+0x470>)
 800316e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003172:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 80a1 	beq.w	80032c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800317e:	4b34      	ldr	r3, [pc, #208]	; (8003250 <HAL_RCC_OscConfig+0x470>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 030c 	and.w	r3, r3, #12
 8003186:	2b08      	cmp	r3, #8
 8003188:	d05c      	beq.n	8003244 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	2b02      	cmp	r3, #2
 8003190:	d141      	bne.n	8003216 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003192:	4b31      	ldr	r3, [pc, #196]	; (8003258 <HAL_RCC_OscConfig+0x478>)
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003198:	f7fe fefa 	bl	8001f90 <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031a0:	f7fe fef6 	bl	8001f90 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e087      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031b2:	4b27      	ldr	r3, [pc, #156]	; (8003250 <HAL_RCC_OscConfig+0x470>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1f0      	bne.n	80031a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	69da      	ldr	r2, [r3, #28]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	431a      	orrs	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	019b      	lsls	r3, r3, #6
 80031ce:	431a      	orrs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d4:	085b      	lsrs	r3, r3, #1
 80031d6:	3b01      	subs	r3, #1
 80031d8:	041b      	lsls	r3, r3, #16
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e0:	061b      	lsls	r3, r3, #24
 80031e2:	491b      	ldr	r1, [pc, #108]	; (8003250 <HAL_RCC_OscConfig+0x470>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031e8:	4b1b      	ldr	r3, [pc, #108]	; (8003258 <HAL_RCC_OscConfig+0x478>)
 80031ea:	2201      	movs	r2, #1
 80031ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ee:	f7fe fecf 	bl	8001f90 <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031f4:	e008      	b.n	8003208 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031f6:	f7fe fecb 	bl	8001f90 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d901      	bls.n	8003208 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e05c      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003208:	4b11      	ldr	r3, [pc, #68]	; (8003250 <HAL_RCC_OscConfig+0x470>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d0f0      	beq.n	80031f6 <HAL_RCC_OscConfig+0x416>
 8003214:	e054      	b.n	80032c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003216:	4b10      	ldr	r3, [pc, #64]	; (8003258 <HAL_RCC_OscConfig+0x478>)
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321c:	f7fe feb8 	bl	8001f90 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003224:	f7fe feb4 	bl	8001f90 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e045      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003236:	4b06      	ldr	r3, [pc, #24]	; (8003250 <HAL_RCC_OscConfig+0x470>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f0      	bne.n	8003224 <HAL_RCC_OscConfig+0x444>
 8003242:	e03d      	b.n	80032c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d107      	bne.n	800325c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e038      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
 8003250:	40023800 	.word	0x40023800
 8003254:	40007000 	.word	0x40007000
 8003258:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800325c:	4b1b      	ldr	r3, [pc, #108]	; (80032cc <HAL_RCC_OscConfig+0x4ec>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d028      	beq.n	80032bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003274:	429a      	cmp	r2, r3
 8003276:	d121      	bne.n	80032bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003282:	429a      	cmp	r2, r3
 8003284:	d11a      	bne.n	80032bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800328c:	4013      	ands	r3, r2
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003292:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003294:	4293      	cmp	r3, r2
 8003296:	d111      	bne.n	80032bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a2:	085b      	lsrs	r3, r3, #1
 80032a4:	3b01      	subs	r3, #1
 80032a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d107      	bne.n	80032bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d001      	beq.n	80032c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e000      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3718      	adds	r7, #24
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40023800 	.word	0x40023800

080032d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e0cc      	b.n	800347e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032e4:	4b68      	ldr	r3, [pc, #416]	; (8003488 <HAL_RCC_ClockConfig+0x1b8>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d90c      	bls.n	800330c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f2:	4b65      	ldr	r3, [pc, #404]	; (8003488 <HAL_RCC_ClockConfig+0x1b8>)
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	b2d2      	uxtb	r2, r2
 80032f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032fa:	4b63      	ldr	r3, [pc, #396]	; (8003488 <HAL_RCC_ClockConfig+0x1b8>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	683a      	ldr	r2, [r7, #0]
 8003304:	429a      	cmp	r2, r3
 8003306:	d001      	beq.n	800330c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e0b8      	b.n	800347e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d020      	beq.n	800335a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	2b00      	cmp	r3, #0
 8003322:	d005      	beq.n	8003330 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003324:	4b59      	ldr	r3, [pc, #356]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	4a58      	ldr	r2, [pc, #352]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 800332a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800332e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0308 	and.w	r3, r3, #8
 8003338:	2b00      	cmp	r3, #0
 800333a:	d005      	beq.n	8003348 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800333c:	4b53      	ldr	r3, [pc, #332]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	4a52      	ldr	r2, [pc, #328]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003346:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003348:	4b50      	ldr	r3, [pc, #320]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	494d      	ldr	r1, [pc, #308]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 8003356:	4313      	orrs	r3, r2
 8003358:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d044      	beq.n	80033f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d107      	bne.n	800337e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800336e:	4b47      	ldr	r3, [pc, #284]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d119      	bne.n	80033ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e07f      	b.n	800347e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b02      	cmp	r3, #2
 8003384:	d003      	beq.n	800338e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800338a:	2b03      	cmp	r3, #3
 800338c:	d107      	bne.n	800339e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800338e:	4b3f      	ldr	r3, [pc, #252]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d109      	bne.n	80033ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e06f      	b.n	800347e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800339e:	4b3b      	ldr	r3, [pc, #236]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e067      	b.n	800347e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ae:	4b37      	ldr	r3, [pc, #220]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f023 0203 	bic.w	r2, r3, #3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	4934      	ldr	r1, [pc, #208]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033c0:	f7fe fde6 	bl	8001f90 <HAL_GetTick>
 80033c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033c6:	e00a      	b.n	80033de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c8:	f7fe fde2 	bl	8001f90 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e04f      	b.n	800347e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033de:	4b2b      	ldr	r3, [pc, #172]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 020c 	and.w	r2, r3, #12
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d1eb      	bne.n	80033c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033f0:	4b25      	ldr	r3, [pc, #148]	; (8003488 <HAL_RCC_ClockConfig+0x1b8>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0307 	and.w	r3, r3, #7
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d20c      	bcs.n	8003418 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033fe:	4b22      	ldr	r3, [pc, #136]	; (8003488 <HAL_RCC_ClockConfig+0x1b8>)
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	b2d2      	uxtb	r2, r2
 8003404:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003406:	4b20      	ldr	r3, [pc, #128]	; (8003488 <HAL_RCC_ClockConfig+0x1b8>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0307 	and.w	r3, r3, #7
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	429a      	cmp	r2, r3
 8003412:	d001      	beq.n	8003418 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e032      	b.n	800347e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b00      	cmp	r3, #0
 8003422:	d008      	beq.n	8003436 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003424:	4b19      	ldr	r3, [pc, #100]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	4916      	ldr	r1, [pc, #88]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 8003432:	4313      	orrs	r3, r2
 8003434:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0308 	and.w	r3, r3, #8
 800343e:	2b00      	cmp	r3, #0
 8003440:	d009      	beq.n	8003456 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003442:	4b12      	ldr	r3, [pc, #72]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	490e      	ldr	r1, [pc, #56]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 8003452:	4313      	orrs	r3, r2
 8003454:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003456:	f000 f821 	bl	800349c <HAL_RCC_GetSysClockFreq>
 800345a:	4602      	mov	r2, r0
 800345c:	4b0b      	ldr	r3, [pc, #44]	; (800348c <HAL_RCC_ClockConfig+0x1bc>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	091b      	lsrs	r3, r3, #4
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	490a      	ldr	r1, [pc, #40]	; (8003490 <HAL_RCC_ClockConfig+0x1c0>)
 8003468:	5ccb      	ldrb	r3, [r1, r3]
 800346a:	fa22 f303 	lsr.w	r3, r2, r3
 800346e:	4a09      	ldr	r2, [pc, #36]	; (8003494 <HAL_RCC_ClockConfig+0x1c4>)
 8003470:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003472:	4b09      	ldr	r3, [pc, #36]	; (8003498 <HAL_RCC_ClockConfig+0x1c8>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f7fe fd46 	bl	8001f08 <HAL_InitTick>

  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	40023c00 	.word	0x40023c00
 800348c:	40023800 	.word	0x40023800
 8003490:	0800568c 	.word	0x0800568c
 8003494:	20000008 	.word	0x20000008
 8003498:	2000000c 	.word	0x2000000c

0800349c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800349c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034a0:	b094      	sub	sp, #80	; 0x50
 80034a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034a4:	2300      	movs	r3, #0
 80034a6:	647b      	str	r3, [r7, #68]	; 0x44
 80034a8:	2300      	movs	r3, #0
 80034aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034ac:	2300      	movs	r3, #0
 80034ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80034b0:	2300      	movs	r3, #0
 80034b2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034b4:	4b79      	ldr	r3, [pc, #484]	; (800369c <HAL_RCC_GetSysClockFreq+0x200>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f003 030c 	and.w	r3, r3, #12
 80034bc:	2b08      	cmp	r3, #8
 80034be:	d00d      	beq.n	80034dc <HAL_RCC_GetSysClockFreq+0x40>
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	f200 80e1 	bhi.w	8003688 <HAL_RCC_GetSysClockFreq+0x1ec>
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d002      	beq.n	80034d0 <HAL_RCC_GetSysClockFreq+0x34>
 80034ca:	2b04      	cmp	r3, #4
 80034cc:	d003      	beq.n	80034d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80034ce:	e0db      	b.n	8003688 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034d0:	4b73      	ldr	r3, [pc, #460]	; (80036a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80034d2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80034d4:	e0db      	b.n	800368e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034d6:	4b73      	ldr	r3, [pc, #460]	; (80036a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80034d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034da:	e0d8      	b.n	800368e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034dc:	4b6f      	ldr	r3, [pc, #444]	; (800369c <HAL_RCC_GetSysClockFreq+0x200>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034e4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034e6:	4b6d      	ldr	r3, [pc, #436]	; (800369c <HAL_RCC_GetSysClockFreq+0x200>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d063      	beq.n	80035ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034f2:	4b6a      	ldr	r3, [pc, #424]	; (800369c <HAL_RCC_GetSysClockFreq+0x200>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	099b      	lsrs	r3, r3, #6
 80034f8:	2200      	movs	r2, #0
 80034fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80034fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80034fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003504:	633b      	str	r3, [r7, #48]	; 0x30
 8003506:	2300      	movs	r3, #0
 8003508:	637b      	str	r3, [r7, #52]	; 0x34
 800350a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800350e:	4622      	mov	r2, r4
 8003510:	462b      	mov	r3, r5
 8003512:	f04f 0000 	mov.w	r0, #0
 8003516:	f04f 0100 	mov.w	r1, #0
 800351a:	0159      	lsls	r1, r3, #5
 800351c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003520:	0150      	lsls	r0, r2, #5
 8003522:	4602      	mov	r2, r0
 8003524:	460b      	mov	r3, r1
 8003526:	4621      	mov	r1, r4
 8003528:	1a51      	subs	r1, r2, r1
 800352a:	6139      	str	r1, [r7, #16]
 800352c:	4629      	mov	r1, r5
 800352e:	eb63 0301 	sbc.w	r3, r3, r1
 8003532:	617b      	str	r3, [r7, #20]
 8003534:	f04f 0200 	mov.w	r2, #0
 8003538:	f04f 0300 	mov.w	r3, #0
 800353c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003540:	4659      	mov	r1, fp
 8003542:	018b      	lsls	r3, r1, #6
 8003544:	4651      	mov	r1, sl
 8003546:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800354a:	4651      	mov	r1, sl
 800354c:	018a      	lsls	r2, r1, #6
 800354e:	4651      	mov	r1, sl
 8003550:	ebb2 0801 	subs.w	r8, r2, r1
 8003554:	4659      	mov	r1, fp
 8003556:	eb63 0901 	sbc.w	r9, r3, r1
 800355a:	f04f 0200 	mov.w	r2, #0
 800355e:	f04f 0300 	mov.w	r3, #0
 8003562:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003566:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800356a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800356e:	4690      	mov	r8, r2
 8003570:	4699      	mov	r9, r3
 8003572:	4623      	mov	r3, r4
 8003574:	eb18 0303 	adds.w	r3, r8, r3
 8003578:	60bb      	str	r3, [r7, #8]
 800357a:	462b      	mov	r3, r5
 800357c:	eb49 0303 	adc.w	r3, r9, r3
 8003580:	60fb      	str	r3, [r7, #12]
 8003582:	f04f 0200 	mov.w	r2, #0
 8003586:	f04f 0300 	mov.w	r3, #0
 800358a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800358e:	4629      	mov	r1, r5
 8003590:	024b      	lsls	r3, r1, #9
 8003592:	4621      	mov	r1, r4
 8003594:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003598:	4621      	mov	r1, r4
 800359a:	024a      	lsls	r2, r1, #9
 800359c:	4610      	mov	r0, r2
 800359e:	4619      	mov	r1, r3
 80035a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035a2:	2200      	movs	r2, #0
 80035a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80035a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035ac:	f7fc fe60 	bl	8000270 <__aeabi_uldivmod>
 80035b0:	4602      	mov	r2, r0
 80035b2:	460b      	mov	r3, r1
 80035b4:	4613      	mov	r3, r2
 80035b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035b8:	e058      	b.n	800366c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ba:	4b38      	ldr	r3, [pc, #224]	; (800369c <HAL_RCC_GetSysClockFreq+0x200>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	099b      	lsrs	r3, r3, #6
 80035c0:	2200      	movs	r2, #0
 80035c2:	4618      	mov	r0, r3
 80035c4:	4611      	mov	r1, r2
 80035c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80035ca:	623b      	str	r3, [r7, #32]
 80035cc:	2300      	movs	r3, #0
 80035ce:	627b      	str	r3, [r7, #36]	; 0x24
 80035d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035d4:	4642      	mov	r2, r8
 80035d6:	464b      	mov	r3, r9
 80035d8:	f04f 0000 	mov.w	r0, #0
 80035dc:	f04f 0100 	mov.w	r1, #0
 80035e0:	0159      	lsls	r1, r3, #5
 80035e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035e6:	0150      	lsls	r0, r2, #5
 80035e8:	4602      	mov	r2, r0
 80035ea:	460b      	mov	r3, r1
 80035ec:	4641      	mov	r1, r8
 80035ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80035f2:	4649      	mov	r1, r9
 80035f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80035f8:	f04f 0200 	mov.w	r2, #0
 80035fc:	f04f 0300 	mov.w	r3, #0
 8003600:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003604:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003608:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800360c:	ebb2 040a 	subs.w	r4, r2, sl
 8003610:	eb63 050b 	sbc.w	r5, r3, fp
 8003614:	f04f 0200 	mov.w	r2, #0
 8003618:	f04f 0300 	mov.w	r3, #0
 800361c:	00eb      	lsls	r3, r5, #3
 800361e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003622:	00e2      	lsls	r2, r4, #3
 8003624:	4614      	mov	r4, r2
 8003626:	461d      	mov	r5, r3
 8003628:	4643      	mov	r3, r8
 800362a:	18e3      	adds	r3, r4, r3
 800362c:	603b      	str	r3, [r7, #0]
 800362e:	464b      	mov	r3, r9
 8003630:	eb45 0303 	adc.w	r3, r5, r3
 8003634:	607b      	str	r3, [r7, #4]
 8003636:	f04f 0200 	mov.w	r2, #0
 800363a:	f04f 0300 	mov.w	r3, #0
 800363e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003642:	4629      	mov	r1, r5
 8003644:	028b      	lsls	r3, r1, #10
 8003646:	4621      	mov	r1, r4
 8003648:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800364c:	4621      	mov	r1, r4
 800364e:	028a      	lsls	r2, r1, #10
 8003650:	4610      	mov	r0, r2
 8003652:	4619      	mov	r1, r3
 8003654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003656:	2200      	movs	r2, #0
 8003658:	61bb      	str	r3, [r7, #24]
 800365a:	61fa      	str	r2, [r7, #28]
 800365c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003660:	f7fc fe06 	bl	8000270 <__aeabi_uldivmod>
 8003664:	4602      	mov	r2, r0
 8003666:	460b      	mov	r3, r1
 8003668:	4613      	mov	r3, r2
 800366a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800366c:	4b0b      	ldr	r3, [pc, #44]	; (800369c <HAL_RCC_GetSysClockFreq+0x200>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	0c1b      	lsrs	r3, r3, #16
 8003672:	f003 0303 	and.w	r3, r3, #3
 8003676:	3301      	adds	r3, #1
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800367c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800367e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003680:	fbb2 f3f3 	udiv	r3, r2, r3
 8003684:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003686:	e002      	b.n	800368e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003688:	4b05      	ldr	r3, [pc, #20]	; (80036a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800368a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800368c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800368e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003690:	4618      	mov	r0, r3
 8003692:	3750      	adds	r7, #80	; 0x50
 8003694:	46bd      	mov	sp, r7
 8003696:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800369a:	bf00      	nop
 800369c:	40023800 	.word	0x40023800
 80036a0:	00f42400 	.word	0x00f42400
 80036a4:	007a1200 	.word	0x007a1200

080036a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036ac:	4b03      	ldr	r3, [pc, #12]	; (80036bc <HAL_RCC_GetHCLKFreq+0x14>)
 80036ae:	681b      	ldr	r3, [r3, #0]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	20000008 	.word	0x20000008

080036c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036c4:	f7ff fff0 	bl	80036a8 <HAL_RCC_GetHCLKFreq>
 80036c8:	4602      	mov	r2, r0
 80036ca:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	0a9b      	lsrs	r3, r3, #10
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	4903      	ldr	r1, [pc, #12]	; (80036e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036d6:	5ccb      	ldrb	r3, [r1, r3]
 80036d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036dc:	4618      	mov	r0, r3
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40023800 	.word	0x40023800
 80036e4:	0800569c 	.word	0x0800569c

080036e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036ec:	f7ff ffdc 	bl	80036a8 <HAL_RCC_GetHCLKFreq>
 80036f0:	4602      	mov	r2, r0
 80036f2:	4b05      	ldr	r3, [pc, #20]	; (8003708 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	0b5b      	lsrs	r3, r3, #13
 80036f8:	f003 0307 	and.w	r3, r3, #7
 80036fc:	4903      	ldr	r1, [pc, #12]	; (800370c <HAL_RCC_GetPCLK2Freq+0x24>)
 80036fe:	5ccb      	ldrb	r3, [r1, r3]
 8003700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003704:	4618      	mov	r0, r3
 8003706:	bd80      	pop	{r7, pc}
 8003708:	40023800 	.word	0x40023800
 800370c:	0800569c 	.word	0x0800569c

08003710 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e07b      	b.n	800381a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003726:	2b00      	cmp	r3, #0
 8003728:	d108      	bne.n	800373c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003732:	d009      	beq.n	8003748 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	61da      	str	r2, [r3, #28]
 800373a:	e005      	b.n	8003748 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d106      	bne.n	8003768 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7fe fa82 	bl	8001c6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800377e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003790:	431a      	orrs	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	431a      	orrs	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	431a      	orrs	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037b8:	431a      	orrs	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	69db      	ldr	r3, [r3, #28]
 80037be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037c2:	431a      	orrs	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a1b      	ldr	r3, [r3, #32]
 80037c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037cc:	ea42 0103 	orr.w	r1, r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	430a      	orrs	r2, r1
 80037de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	0c1b      	lsrs	r3, r3, #16
 80037e6:	f003 0104 	and.w	r1, r3, #4
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	f003 0210 	and.w	r2, r3, #16
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	69da      	ldr	r2, [r3, #28]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003808:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b08c      	sub	sp, #48	; 0x30
 8003826:	af00      	add	r7, sp, #0
 8003828:	60f8      	str	r0, [r7, #12]
 800382a:	60b9      	str	r1, [r7, #8]
 800382c:	607a      	str	r2, [r7, #4]
 800382e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003830:	2301      	movs	r3, #1
 8003832:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003834:	2300      	movs	r3, #0
 8003836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003840:	2b01      	cmp	r3, #1
 8003842:	d101      	bne.n	8003848 <HAL_SPI_TransmitReceive+0x26>
 8003844:	2302      	movs	r3, #2
 8003846:	e18a      	b.n	8003b5e <HAL_SPI_TransmitReceive+0x33c>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003850:	f7fe fb9e 	bl	8001f90 <HAL_GetTick>
 8003854:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800385c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003866:	887b      	ldrh	r3, [r7, #2]
 8003868:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800386a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800386e:	2b01      	cmp	r3, #1
 8003870:	d00f      	beq.n	8003892 <HAL_SPI_TransmitReceive+0x70>
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003878:	d107      	bne.n	800388a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d103      	bne.n	800388a <HAL_SPI_TransmitReceive+0x68>
 8003882:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003886:	2b04      	cmp	r3, #4
 8003888:	d003      	beq.n	8003892 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800388a:	2302      	movs	r3, #2
 800388c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003890:	e15b      	b.n	8003b4a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d005      	beq.n	80038a4 <HAL_SPI_TransmitReceive+0x82>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d002      	beq.n	80038a4 <HAL_SPI_TransmitReceive+0x82>
 800389e:	887b      	ldrh	r3, [r7, #2]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d103      	bne.n	80038ac <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80038aa:	e14e      	b.n	8003b4a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b04      	cmp	r3, #4
 80038b6:	d003      	beq.n	80038c0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2205      	movs	r2, #5
 80038bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	887a      	ldrh	r2, [r7, #2]
 80038d0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	887a      	ldrh	r2, [r7, #2]
 80038d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	68ba      	ldr	r2, [r7, #8]
 80038dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	887a      	ldrh	r2, [r7, #2]
 80038e2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	887a      	ldrh	r2, [r7, #2]
 80038e8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003900:	2b40      	cmp	r3, #64	; 0x40
 8003902:	d007      	beq.n	8003914 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003912:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800391c:	d178      	bne.n	8003a10 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d002      	beq.n	800392c <HAL_SPI_TransmitReceive+0x10a>
 8003926:	8b7b      	ldrh	r3, [r7, #26]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d166      	bne.n	80039fa <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003930:	881a      	ldrh	r2, [r3, #0]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393c:	1c9a      	adds	r2, r3, #2
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003946:	b29b      	uxth	r3, r3
 8003948:	3b01      	subs	r3, #1
 800394a:	b29a      	uxth	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003950:	e053      	b.n	80039fa <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b02      	cmp	r3, #2
 800395e:	d11b      	bne.n	8003998 <HAL_SPI_TransmitReceive+0x176>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003964:	b29b      	uxth	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d016      	beq.n	8003998 <HAL_SPI_TransmitReceive+0x176>
 800396a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396c:	2b01      	cmp	r3, #1
 800396e:	d113      	bne.n	8003998 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003974:	881a      	ldrh	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003980:	1c9a      	adds	r2, r3, #2
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800398a:	b29b      	uxth	r3, r3
 800398c:	3b01      	subs	r3, #1
 800398e:	b29a      	uxth	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003994:	2300      	movs	r3, #0
 8003996:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d119      	bne.n	80039da <HAL_SPI_TransmitReceive+0x1b8>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d014      	beq.n	80039da <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68da      	ldr	r2, [r3, #12]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ba:	b292      	uxth	r2, r2
 80039bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c2:	1c9a      	adds	r2, r3, #2
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	3b01      	subs	r3, #1
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039d6:	2301      	movs	r3, #1
 80039d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80039da:	f7fe fad9 	bl	8001f90 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d807      	bhi.n	80039fa <HAL_SPI_TransmitReceive+0x1d8>
 80039ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f0:	d003      	beq.n	80039fa <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80039f8:	e0a7      	b.n	8003b4a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1a6      	bne.n	8003952 <HAL_SPI_TransmitReceive+0x130>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1a1      	bne.n	8003952 <HAL_SPI_TransmitReceive+0x130>
 8003a0e:	e07c      	b.n	8003b0a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d002      	beq.n	8003a1e <HAL_SPI_TransmitReceive+0x1fc>
 8003a18:	8b7b      	ldrh	r3, [r7, #26]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d16b      	bne.n	8003af6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	330c      	adds	r3, #12
 8003a28:	7812      	ldrb	r2, [r2, #0]
 8003a2a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a30:	1c5a      	adds	r2, r3, #1
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a44:	e057      	b.n	8003af6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d11c      	bne.n	8003a8e <HAL_SPI_TransmitReceive+0x26c>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d017      	beq.n	8003a8e <HAL_SPI_TransmitReceive+0x26c>
 8003a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d114      	bne.n	8003a8e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	330c      	adds	r3, #12
 8003a6e:	7812      	ldrb	r2, [r2, #0]
 8003a70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a76:	1c5a      	adds	r2, r3, #1
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	3b01      	subs	r3, #1
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d119      	bne.n	8003ad0 <HAL_SPI_TransmitReceive+0x2ae>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d014      	beq.n	8003ad0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68da      	ldr	r2, [r3, #12]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab0:	b2d2      	uxtb	r2, r2
 8003ab2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab8:	1c5a      	adds	r2, r3, #1
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003acc:	2301      	movs	r3, #1
 8003ace:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ad0:	f7fe fa5e 	bl	8001f90 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d803      	bhi.n	8003ae8 <HAL_SPI_TransmitReceive+0x2c6>
 8003ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae6:	d102      	bne.n	8003aee <HAL_SPI_TransmitReceive+0x2cc>
 8003ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d103      	bne.n	8003af6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003af4:	e029      	b.n	8003b4a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1a2      	bne.n	8003a46 <HAL_SPI_TransmitReceive+0x224>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d19d      	bne.n	8003a46 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f000 f8b2 	bl	8003c78 <SPI_EndRxTxTransaction>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d006      	beq.n	8003b28 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2220      	movs	r2, #32
 8003b24:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003b26:	e010      	b.n	8003b4a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10b      	bne.n	8003b48 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b30:	2300      	movs	r3, #0
 8003b32:	617b      	str	r3, [r7, #20]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	617b      	str	r3, [r7, #20]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	617b      	str	r3, [r7, #20]
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	e000      	b.n	8003b4a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003b48:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003b5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3730      	adds	r7, #48	; 0x30
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
	...

08003b68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b088      	sub	sp, #32
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	603b      	str	r3, [r7, #0]
 8003b74:	4613      	mov	r3, r2
 8003b76:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b78:	f7fe fa0a 	bl	8001f90 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b80:	1a9b      	subs	r3, r3, r2
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	4413      	add	r3, r2
 8003b86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b88:	f7fe fa02 	bl	8001f90 <HAL_GetTick>
 8003b8c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b8e:	4b39      	ldr	r3, [pc, #228]	; (8003c74 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	015b      	lsls	r3, r3, #5
 8003b94:	0d1b      	lsrs	r3, r3, #20
 8003b96:	69fa      	ldr	r2, [r7, #28]
 8003b98:	fb02 f303 	mul.w	r3, r2, r3
 8003b9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b9e:	e054      	b.n	8003c4a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba6:	d050      	beq.n	8003c4a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ba8:	f7fe f9f2 	bl	8001f90 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	69fa      	ldr	r2, [r7, #28]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d902      	bls.n	8003bbe <SPI_WaitFlagStateUntilTimeout+0x56>
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d13d      	bne.n	8003c3a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003bcc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bd6:	d111      	bne.n	8003bfc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003be0:	d004      	beq.n	8003bec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bea:	d107      	bne.n	8003bfc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bfa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c04:	d10f      	bne.n	8003c26 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c14:	601a      	str	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e017      	b.n	8003c6a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	3b01      	subs	r3, #1
 8003c48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	4013      	ands	r3, r2
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	bf0c      	ite	eq
 8003c5a:	2301      	moveq	r3, #1
 8003c5c:	2300      	movne	r3, #0
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	461a      	mov	r2, r3
 8003c62:	79fb      	ldrb	r3, [r7, #7]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d19b      	bne.n	8003ba0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3720      	adds	r7, #32
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	20000008 	.word	0x20000008

08003c78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b088      	sub	sp, #32
 8003c7c:	af02      	add	r7, sp, #8
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003c84:	4b1b      	ldr	r3, [pc, #108]	; (8003cf4 <SPI_EndRxTxTransaction+0x7c>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a1b      	ldr	r2, [pc, #108]	; (8003cf8 <SPI_EndRxTxTransaction+0x80>)
 8003c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8e:	0d5b      	lsrs	r3, r3, #21
 8003c90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c94:	fb02 f303 	mul.w	r3, r2, r3
 8003c98:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ca2:	d112      	bne.n	8003cca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	2200      	movs	r2, #0
 8003cac:	2180      	movs	r1, #128	; 0x80
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f7ff ff5a 	bl	8003b68 <SPI_WaitFlagStateUntilTimeout>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d016      	beq.n	8003ce8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cbe:	f043 0220 	orr.w	r2, r3, #32
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e00f      	b.n	8003cea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00a      	beq.n	8003ce6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce0:	2b80      	cmp	r3, #128	; 0x80
 8003ce2:	d0f2      	beq.n	8003cca <SPI_EndRxTxTransaction+0x52>
 8003ce4:	e000      	b.n	8003ce8 <SPI_EndRxTxTransaction+0x70>
        break;
 8003ce6:	bf00      	nop
  }

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3718      	adds	r7, #24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	20000008 	.word	0x20000008
 8003cf8:	165e9f81 	.word	0x165e9f81

08003cfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e03f      	b.n	8003d8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d106      	bne.n	8003d28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7fd ffea 	bl	8001cfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2224      	movs	r2, #36	; 0x24
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68da      	ldr	r2, [r3, #12]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 f9cb 	bl	80040dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	691a      	ldr	r2, [r3, #16]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	695a      	ldr	r2, [r3, #20]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68da      	ldr	r2, [r3, #12]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2220      	movs	r2, #32
 8003d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b08a      	sub	sp, #40	; 0x28
 8003d9a:	af02      	add	r7, sp, #8
 8003d9c:	60f8      	str	r0, [r7, #12]
 8003d9e:	60b9      	str	r1, [r7, #8]
 8003da0:	603b      	str	r3, [r7, #0]
 8003da2:	4613      	mov	r3, r2
 8003da4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003da6:	2300      	movs	r3, #0
 8003da8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b20      	cmp	r3, #32
 8003db4:	d17c      	bne.n	8003eb0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d002      	beq.n	8003dc2 <HAL_UART_Transmit+0x2c>
 8003dbc:	88fb      	ldrh	r3, [r7, #6]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e075      	b.n	8003eb2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d101      	bne.n	8003dd4 <HAL_UART_Transmit+0x3e>
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	e06e      	b.n	8003eb2 <HAL_UART_Transmit+0x11c>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2221      	movs	r2, #33	; 0x21
 8003de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dea:	f7fe f8d1 	bl	8001f90 <HAL_GetTick>
 8003dee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	88fa      	ldrh	r2, [r7, #6]
 8003df4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	88fa      	ldrh	r2, [r7, #6]
 8003dfa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e04:	d108      	bne.n	8003e18 <HAL_UART_Transmit+0x82>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d104      	bne.n	8003e18 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	61bb      	str	r3, [r7, #24]
 8003e16:	e003      	b.n	8003e20 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003e28:	e02a      	b.n	8003e80 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	2200      	movs	r2, #0
 8003e32:	2180      	movs	r1, #128	; 0x80
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f000 f8e2 	bl	8003ffe <UART_WaitOnFlagUntilTimeout>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e036      	b.n	8003eb2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10b      	bne.n	8003e62 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	881b      	ldrh	r3, [r3, #0]
 8003e4e:	461a      	mov	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	3302      	adds	r3, #2
 8003e5e:	61bb      	str	r3, [r7, #24]
 8003e60:	e007      	b.n	8003e72 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	781a      	ldrb	r2, [r3, #0]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	3301      	adds	r3, #1
 8003e70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1cf      	bne.n	8003e2a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	9300      	str	r3, [sp, #0]
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	2200      	movs	r2, #0
 8003e92:	2140      	movs	r1, #64	; 0x40
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f000 f8b2 	bl	8003ffe <UART_WaitOnFlagUntilTimeout>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d001      	beq.n	8003ea4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e006      	b.n	8003eb2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003eac:	2300      	movs	r3, #0
 8003eae:	e000      	b.n	8003eb2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003eb0:	2302      	movs	r3, #2
  }
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3720      	adds	r7, #32
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b08a      	sub	sp, #40	; 0x28
 8003ebe:	af02      	add	r7, sp, #8
 8003ec0:	60f8      	str	r0, [r7, #12]
 8003ec2:	60b9      	str	r1, [r7, #8]
 8003ec4:	603b      	str	r3, [r7, #0]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b20      	cmp	r3, #32
 8003ed8:	f040 808c 	bne.w	8003ff4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d002      	beq.n	8003ee8 <HAL_UART_Receive+0x2e>
 8003ee2:	88fb      	ldrh	r3, [r7, #6]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d101      	bne.n	8003eec <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e084      	b.n	8003ff6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d101      	bne.n	8003efa <HAL_UART_Receive+0x40>
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	e07d      	b.n	8003ff6 <HAL_UART_Receive+0x13c>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2222      	movs	r2, #34	; 0x22
 8003f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f16:	f7fe f83b 	bl	8001f90 <HAL_GetTick>
 8003f1a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	88fa      	ldrh	r2, [r7, #6]
 8003f20:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	88fa      	ldrh	r2, [r7, #6]
 8003f26:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f30:	d108      	bne.n	8003f44 <HAL_UART_Receive+0x8a>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d104      	bne.n	8003f44 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	61bb      	str	r3, [r7, #24]
 8003f42:	e003      	b.n	8003f4c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003f54:	e043      	b.n	8003fde <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	2120      	movs	r1, #32
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f000 f84c 	bl	8003ffe <UART_WaitOnFlagUntilTimeout>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e042      	b.n	8003ff6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10c      	bne.n	8003f90 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	3302      	adds	r3, #2
 8003f8c:	61bb      	str	r3, [r7, #24]
 8003f8e:	e01f      	b.n	8003fd0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f98:	d007      	beq.n	8003faa <HAL_UART_Receive+0xf0>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10a      	bne.n	8003fb8 <HAL_UART_Receive+0xfe>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d106      	bne.n	8003fb8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	701a      	strb	r2, [r3, #0]
 8003fb6:	e008      	b.n	8003fca <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fc4:	b2da      	uxtb	r2, r3
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	3301      	adds	r3, #1
 8003fce:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1b6      	bne.n	8003f56 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2220      	movs	r2, #32
 8003fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	e000      	b.n	8003ff6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003ff4:	2302      	movs	r3, #2
  }
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3720      	adds	r7, #32
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b090      	sub	sp, #64	; 0x40
 8004002:	af00      	add	r7, sp, #0
 8004004:	60f8      	str	r0, [r7, #12]
 8004006:	60b9      	str	r1, [r7, #8]
 8004008:	603b      	str	r3, [r7, #0]
 800400a:	4613      	mov	r3, r2
 800400c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800400e:	e050      	b.n	80040b2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004010:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004016:	d04c      	beq.n	80040b2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004018:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800401a:	2b00      	cmp	r3, #0
 800401c:	d007      	beq.n	800402e <UART_WaitOnFlagUntilTimeout+0x30>
 800401e:	f7fd ffb7 	bl	8001f90 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800402a:	429a      	cmp	r2, r3
 800402c:	d241      	bcs.n	80040b2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	330c      	adds	r3, #12
 8004034:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004038:	e853 3f00 	ldrex	r3, [r3]
 800403c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004044:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	330c      	adds	r3, #12
 800404c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800404e:	637a      	str	r2, [r7, #52]	; 0x34
 8004050:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004052:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004054:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004056:	e841 2300 	strex	r3, r2, [r1]
 800405a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800405c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1e5      	bne.n	800402e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	3314      	adds	r3, #20
 8004068:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	e853 3f00 	ldrex	r3, [r3]
 8004070:	613b      	str	r3, [r7, #16]
   return(result);
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	f023 0301 	bic.w	r3, r3, #1
 8004078:	63bb      	str	r3, [r7, #56]	; 0x38
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	3314      	adds	r3, #20
 8004080:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004082:	623a      	str	r2, [r7, #32]
 8004084:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004086:	69f9      	ldr	r1, [r7, #28]
 8004088:	6a3a      	ldr	r2, [r7, #32]
 800408a:	e841 2300 	strex	r3, r2, [r1]
 800408e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1e5      	bne.n	8004062 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2220      	movs	r2, #32
 800409a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2220      	movs	r2, #32
 80040a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e00f      	b.n	80040d2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	4013      	ands	r3, r2
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	429a      	cmp	r2, r3
 80040c0:	bf0c      	ite	eq
 80040c2:	2301      	moveq	r3, #1
 80040c4:	2300      	movne	r3, #0
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	461a      	mov	r2, r3
 80040ca:	79fb      	ldrb	r3, [r7, #7]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d09f      	beq.n	8004010 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3740      	adds	r7, #64	; 0x40
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
	...

080040dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040e0:	b0c0      	sub	sp, #256	; 0x100
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80040f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040f8:	68d9      	ldr	r1, [r3, #12]
 80040fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	ea40 0301 	orr.w	r3, r0, r1
 8004104:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800410a:	689a      	ldr	r2, [r3, #8]
 800410c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	431a      	orrs	r2, r3
 8004114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	431a      	orrs	r2, r3
 800411c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	4313      	orrs	r3, r2
 8004124:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004134:	f021 010c 	bic.w	r1, r1, #12
 8004138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004142:	430b      	orrs	r3, r1
 8004144:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004156:	6999      	ldr	r1, [r3, #24]
 8004158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	ea40 0301 	orr.w	r3, r0, r1
 8004162:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	4b8f      	ldr	r3, [pc, #572]	; (80043a8 <UART_SetConfig+0x2cc>)
 800416c:	429a      	cmp	r2, r3
 800416e:	d005      	beq.n	800417c <UART_SetConfig+0xa0>
 8004170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	4b8d      	ldr	r3, [pc, #564]	; (80043ac <UART_SetConfig+0x2d0>)
 8004178:	429a      	cmp	r2, r3
 800417a:	d104      	bne.n	8004186 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800417c:	f7ff fab4 	bl	80036e8 <HAL_RCC_GetPCLK2Freq>
 8004180:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004184:	e003      	b.n	800418e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004186:	f7ff fa9b 	bl	80036c0 <HAL_RCC_GetPCLK1Freq>
 800418a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800418e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004192:	69db      	ldr	r3, [r3, #28]
 8004194:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004198:	f040 810c 	bne.w	80043b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800419c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041a0:	2200      	movs	r2, #0
 80041a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80041a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80041aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80041ae:	4622      	mov	r2, r4
 80041b0:	462b      	mov	r3, r5
 80041b2:	1891      	adds	r1, r2, r2
 80041b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80041b6:	415b      	adcs	r3, r3
 80041b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80041be:	4621      	mov	r1, r4
 80041c0:	eb12 0801 	adds.w	r8, r2, r1
 80041c4:	4629      	mov	r1, r5
 80041c6:	eb43 0901 	adc.w	r9, r3, r1
 80041ca:	f04f 0200 	mov.w	r2, #0
 80041ce:	f04f 0300 	mov.w	r3, #0
 80041d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041de:	4690      	mov	r8, r2
 80041e0:	4699      	mov	r9, r3
 80041e2:	4623      	mov	r3, r4
 80041e4:	eb18 0303 	adds.w	r3, r8, r3
 80041e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80041ec:	462b      	mov	r3, r5
 80041ee:	eb49 0303 	adc.w	r3, r9, r3
 80041f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80041f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004202:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004206:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800420a:	460b      	mov	r3, r1
 800420c:	18db      	adds	r3, r3, r3
 800420e:	653b      	str	r3, [r7, #80]	; 0x50
 8004210:	4613      	mov	r3, r2
 8004212:	eb42 0303 	adc.w	r3, r2, r3
 8004216:	657b      	str	r3, [r7, #84]	; 0x54
 8004218:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800421c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004220:	f7fc f826 	bl	8000270 <__aeabi_uldivmod>
 8004224:	4602      	mov	r2, r0
 8004226:	460b      	mov	r3, r1
 8004228:	4b61      	ldr	r3, [pc, #388]	; (80043b0 <UART_SetConfig+0x2d4>)
 800422a:	fba3 2302 	umull	r2, r3, r3, r2
 800422e:	095b      	lsrs	r3, r3, #5
 8004230:	011c      	lsls	r4, r3, #4
 8004232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004236:	2200      	movs	r2, #0
 8004238:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800423c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004240:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004244:	4642      	mov	r2, r8
 8004246:	464b      	mov	r3, r9
 8004248:	1891      	adds	r1, r2, r2
 800424a:	64b9      	str	r1, [r7, #72]	; 0x48
 800424c:	415b      	adcs	r3, r3
 800424e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004250:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004254:	4641      	mov	r1, r8
 8004256:	eb12 0a01 	adds.w	sl, r2, r1
 800425a:	4649      	mov	r1, r9
 800425c:	eb43 0b01 	adc.w	fp, r3, r1
 8004260:	f04f 0200 	mov.w	r2, #0
 8004264:	f04f 0300 	mov.w	r3, #0
 8004268:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800426c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004270:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004274:	4692      	mov	sl, r2
 8004276:	469b      	mov	fp, r3
 8004278:	4643      	mov	r3, r8
 800427a:	eb1a 0303 	adds.w	r3, sl, r3
 800427e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004282:	464b      	mov	r3, r9
 8004284:	eb4b 0303 	adc.w	r3, fp, r3
 8004288:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800428c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004298:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800429c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80042a0:	460b      	mov	r3, r1
 80042a2:	18db      	adds	r3, r3, r3
 80042a4:	643b      	str	r3, [r7, #64]	; 0x40
 80042a6:	4613      	mov	r3, r2
 80042a8:	eb42 0303 	adc.w	r3, r2, r3
 80042ac:	647b      	str	r3, [r7, #68]	; 0x44
 80042ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80042b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80042b6:	f7fb ffdb 	bl	8000270 <__aeabi_uldivmod>
 80042ba:	4602      	mov	r2, r0
 80042bc:	460b      	mov	r3, r1
 80042be:	4611      	mov	r1, r2
 80042c0:	4b3b      	ldr	r3, [pc, #236]	; (80043b0 <UART_SetConfig+0x2d4>)
 80042c2:	fba3 2301 	umull	r2, r3, r3, r1
 80042c6:	095b      	lsrs	r3, r3, #5
 80042c8:	2264      	movs	r2, #100	; 0x64
 80042ca:	fb02 f303 	mul.w	r3, r2, r3
 80042ce:	1acb      	subs	r3, r1, r3
 80042d0:	00db      	lsls	r3, r3, #3
 80042d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80042d6:	4b36      	ldr	r3, [pc, #216]	; (80043b0 <UART_SetConfig+0x2d4>)
 80042d8:	fba3 2302 	umull	r2, r3, r3, r2
 80042dc:	095b      	lsrs	r3, r3, #5
 80042de:	005b      	lsls	r3, r3, #1
 80042e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042e4:	441c      	add	r4, r3
 80042e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042ea:	2200      	movs	r2, #0
 80042ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80042f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80042f8:	4642      	mov	r2, r8
 80042fa:	464b      	mov	r3, r9
 80042fc:	1891      	adds	r1, r2, r2
 80042fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8004300:	415b      	adcs	r3, r3
 8004302:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004304:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004308:	4641      	mov	r1, r8
 800430a:	1851      	adds	r1, r2, r1
 800430c:	6339      	str	r1, [r7, #48]	; 0x30
 800430e:	4649      	mov	r1, r9
 8004310:	414b      	adcs	r3, r1
 8004312:	637b      	str	r3, [r7, #52]	; 0x34
 8004314:	f04f 0200 	mov.w	r2, #0
 8004318:	f04f 0300 	mov.w	r3, #0
 800431c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004320:	4659      	mov	r1, fp
 8004322:	00cb      	lsls	r3, r1, #3
 8004324:	4651      	mov	r1, sl
 8004326:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800432a:	4651      	mov	r1, sl
 800432c:	00ca      	lsls	r2, r1, #3
 800432e:	4610      	mov	r0, r2
 8004330:	4619      	mov	r1, r3
 8004332:	4603      	mov	r3, r0
 8004334:	4642      	mov	r2, r8
 8004336:	189b      	adds	r3, r3, r2
 8004338:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800433c:	464b      	mov	r3, r9
 800433e:	460a      	mov	r2, r1
 8004340:	eb42 0303 	adc.w	r3, r2, r3
 8004344:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004354:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004358:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800435c:	460b      	mov	r3, r1
 800435e:	18db      	adds	r3, r3, r3
 8004360:	62bb      	str	r3, [r7, #40]	; 0x28
 8004362:	4613      	mov	r3, r2
 8004364:	eb42 0303 	adc.w	r3, r2, r3
 8004368:	62fb      	str	r3, [r7, #44]	; 0x2c
 800436a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800436e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004372:	f7fb ff7d 	bl	8000270 <__aeabi_uldivmod>
 8004376:	4602      	mov	r2, r0
 8004378:	460b      	mov	r3, r1
 800437a:	4b0d      	ldr	r3, [pc, #52]	; (80043b0 <UART_SetConfig+0x2d4>)
 800437c:	fba3 1302 	umull	r1, r3, r3, r2
 8004380:	095b      	lsrs	r3, r3, #5
 8004382:	2164      	movs	r1, #100	; 0x64
 8004384:	fb01 f303 	mul.w	r3, r1, r3
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	00db      	lsls	r3, r3, #3
 800438c:	3332      	adds	r3, #50	; 0x32
 800438e:	4a08      	ldr	r2, [pc, #32]	; (80043b0 <UART_SetConfig+0x2d4>)
 8004390:	fba2 2303 	umull	r2, r3, r2, r3
 8004394:	095b      	lsrs	r3, r3, #5
 8004396:	f003 0207 	and.w	r2, r3, #7
 800439a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4422      	add	r2, r4
 80043a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80043a4:	e105      	b.n	80045b2 <UART_SetConfig+0x4d6>
 80043a6:	bf00      	nop
 80043a8:	40011000 	.word	0x40011000
 80043ac:	40011400 	.word	0x40011400
 80043b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043b8:	2200      	movs	r2, #0
 80043ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80043be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80043c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80043c6:	4642      	mov	r2, r8
 80043c8:	464b      	mov	r3, r9
 80043ca:	1891      	adds	r1, r2, r2
 80043cc:	6239      	str	r1, [r7, #32]
 80043ce:	415b      	adcs	r3, r3
 80043d0:	627b      	str	r3, [r7, #36]	; 0x24
 80043d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043d6:	4641      	mov	r1, r8
 80043d8:	1854      	adds	r4, r2, r1
 80043da:	4649      	mov	r1, r9
 80043dc:	eb43 0501 	adc.w	r5, r3, r1
 80043e0:	f04f 0200 	mov.w	r2, #0
 80043e4:	f04f 0300 	mov.w	r3, #0
 80043e8:	00eb      	lsls	r3, r5, #3
 80043ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043ee:	00e2      	lsls	r2, r4, #3
 80043f0:	4614      	mov	r4, r2
 80043f2:	461d      	mov	r5, r3
 80043f4:	4643      	mov	r3, r8
 80043f6:	18e3      	adds	r3, r4, r3
 80043f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80043fc:	464b      	mov	r3, r9
 80043fe:	eb45 0303 	adc.w	r3, r5, r3
 8004402:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004412:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004416:	f04f 0200 	mov.w	r2, #0
 800441a:	f04f 0300 	mov.w	r3, #0
 800441e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004422:	4629      	mov	r1, r5
 8004424:	008b      	lsls	r3, r1, #2
 8004426:	4621      	mov	r1, r4
 8004428:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800442c:	4621      	mov	r1, r4
 800442e:	008a      	lsls	r2, r1, #2
 8004430:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004434:	f7fb ff1c 	bl	8000270 <__aeabi_uldivmod>
 8004438:	4602      	mov	r2, r0
 800443a:	460b      	mov	r3, r1
 800443c:	4b60      	ldr	r3, [pc, #384]	; (80045c0 <UART_SetConfig+0x4e4>)
 800443e:	fba3 2302 	umull	r2, r3, r3, r2
 8004442:	095b      	lsrs	r3, r3, #5
 8004444:	011c      	lsls	r4, r3, #4
 8004446:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800444a:	2200      	movs	r2, #0
 800444c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004450:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004454:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004458:	4642      	mov	r2, r8
 800445a:	464b      	mov	r3, r9
 800445c:	1891      	adds	r1, r2, r2
 800445e:	61b9      	str	r1, [r7, #24]
 8004460:	415b      	adcs	r3, r3
 8004462:	61fb      	str	r3, [r7, #28]
 8004464:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004468:	4641      	mov	r1, r8
 800446a:	1851      	adds	r1, r2, r1
 800446c:	6139      	str	r1, [r7, #16]
 800446e:	4649      	mov	r1, r9
 8004470:	414b      	adcs	r3, r1
 8004472:	617b      	str	r3, [r7, #20]
 8004474:	f04f 0200 	mov.w	r2, #0
 8004478:	f04f 0300 	mov.w	r3, #0
 800447c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004480:	4659      	mov	r1, fp
 8004482:	00cb      	lsls	r3, r1, #3
 8004484:	4651      	mov	r1, sl
 8004486:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800448a:	4651      	mov	r1, sl
 800448c:	00ca      	lsls	r2, r1, #3
 800448e:	4610      	mov	r0, r2
 8004490:	4619      	mov	r1, r3
 8004492:	4603      	mov	r3, r0
 8004494:	4642      	mov	r2, r8
 8004496:	189b      	adds	r3, r3, r2
 8004498:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800449c:	464b      	mov	r3, r9
 800449e:	460a      	mov	r2, r1
 80044a0:	eb42 0303 	adc.w	r3, r2, r3
 80044a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80044a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80044b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80044b4:	f04f 0200 	mov.w	r2, #0
 80044b8:	f04f 0300 	mov.w	r3, #0
 80044bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80044c0:	4649      	mov	r1, r9
 80044c2:	008b      	lsls	r3, r1, #2
 80044c4:	4641      	mov	r1, r8
 80044c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044ca:	4641      	mov	r1, r8
 80044cc:	008a      	lsls	r2, r1, #2
 80044ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80044d2:	f7fb fecd 	bl	8000270 <__aeabi_uldivmod>
 80044d6:	4602      	mov	r2, r0
 80044d8:	460b      	mov	r3, r1
 80044da:	4b39      	ldr	r3, [pc, #228]	; (80045c0 <UART_SetConfig+0x4e4>)
 80044dc:	fba3 1302 	umull	r1, r3, r3, r2
 80044e0:	095b      	lsrs	r3, r3, #5
 80044e2:	2164      	movs	r1, #100	; 0x64
 80044e4:	fb01 f303 	mul.w	r3, r1, r3
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	011b      	lsls	r3, r3, #4
 80044ec:	3332      	adds	r3, #50	; 0x32
 80044ee:	4a34      	ldr	r2, [pc, #208]	; (80045c0 <UART_SetConfig+0x4e4>)
 80044f0:	fba2 2303 	umull	r2, r3, r2, r3
 80044f4:	095b      	lsrs	r3, r3, #5
 80044f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044fa:	441c      	add	r4, r3
 80044fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004500:	2200      	movs	r2, #0
 8004502:	673b      	str	r3, [r7, #112]	; 0x70
 8004504:	677a      	str	r2, [r7, #116]	; 0x74
 8004506:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800450a:	4642      	mov	r2, r8
 800450c:	464b      	mov	r3, r9
 800450e:	1891      	adds	r1, r2, r2
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	415b      	adcs	r3, r3
 8004514:	60fb      	str	r3, [r7, #12]
 8004516:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800451a:	4641      	mov	r1, r8
 800451c:	1851      	adds	r1, r2, r1
 800451e:	6039      	str	r1, [r7, #0]
 8004520:	4649      	mov	r1, r9
 8004522:	414b      	adcs	r3, r1
 8004524:	607b      	str	r3, [r7, #4]
 8004526:	f04f 0200 	mov.w	r2, #0
 800452a:	f04f 0300 	mov.w	r3, #0
 800452e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004532:	4659      	mov	r1, fp
 8004534:	00cb      	lsls	r3, r1, #3
 8004536:	4651      	mov	r1, sl
 8004538:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800453c:	4651      	mov	r1, sl
 800453e:	00ca      	lsls	r2, r1, #3
 8004540:	4610      	mov	r0, r2
 8004542:	4619      	mov	r1, r3
 8004544:	4603      	mov	r3, r0
 8004546:	4642      	mov	r2, r8
 8004548:	189b      	adds	r3, r3, r2
 800454a:	66bb      	str	r3, [r7, #104]	; 0x68
 800454c:	464b      	mov	r3, r9
 800454e:	460a      	mov	r2, r1
 8004550:	eb42 0303 	adc.w	r3, r2, r3
 8004554:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	663b      	str	r3, [r7, #96]	; 0x60
 8004560:	667a      	str	r2, [r7, #100]	; 0x64
 8004562:	f04f 0200 	mov.w	r2, #0
 8004566:	f04f 0300 	mov.w	r3, #0
 800456a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800456e:	4649      	mov	r1, r9
 8004570:	008b      	lsls	r3, r1, #2
 8004572:	4641      	mov	r1, r8
 8004574:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004578:	4641      	mov	r1, r8
 800457a:	008a      	lsls	r2, r1, #2
 800457c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004580:	f7fb fe76 	bl	8000270 <__aeabi_uldivmod>
 8004584:	4602      	mov	r2, r0
 8004586:	460b      	mov	r3, r1
 8004588:	4b0d      	ldr	r3, [pc, #52]	; (80045c0 <UART_SetConfig+0x4e4>)
 800458a:	fba3 1302 	umull	r1, r3, r3, r2
 800458e:	095b      	lsrs	r3, r3, #5
 8004590:	2164      	movs	r1, #100	; 0x64
 8004592:	fb01 f303 	mul.w	r3, r1, r3
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	011b      	lsls	r3, r3, #4
 800459a:	3332      	adds	r3, #50	; 0x32
 800459c:	4a08      	ldr	r2, [pc, #32]	; (80045c0 <UART_SetConfig+0x4e4>)
 800459e:	fba2 2303 	umull	r2, r3, r2, r3
 80045a2:	095b      	lsrs	r3, r3, #5
 80045a4:	f003 020f 	and.w	r2, r3, #15
 80045a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4422      	add	r2, r4
 80045b0:	609a      	str	r2, [r3, #8]
}
 80045b2:	bf00      	nop
 80045b4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80045b8:	46bd      	mov	sp, r7
 80045ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045be:	bf00      	nop
 80045c0:	51eb851f 	.word	0x51eb851f

080045c4 <__errno>:
 80045c4:	4b01      	ldr	r3, [pc, #4]	; (80045cc <__errno+0x8>)
 80045c6:	6818      	ldr	r0, [r3, #0]
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	20000014 	.word	0x20000014

080045d0 <__libc_init_array>:
 80045d0:	b570      	push	{r4, r5, r6, lr}
 80045d2:	4d0d      	ldr	r5, [pc, #52]	; (8004608 <__libc_init_array+0x38>)
 80045d4:	4c0d      	ldr	r4, [pc, #52]	; (800460c <__libc_init_array+0x3c>)
 80045d6:	1b64      	subs	r4, r4, r5
 80045d8:	10a4      	asrs	r4, r4, #2
 80045da:	2600      	movs	r6, #0
 80045dc:	42a6      	cmp	r6, r4
 80045de:	d109      	bne.n	80045f4 <__libc_init_array+0x24>
 80045e0:	4d0b      	ldr	r5, [pc, #44]	; (8004610 <__libc_init_array+0x40>)
 80045e2:	4c0c      	ldr	r4, [pc, #48]	; (8004614 <__libc_init_array+0x44>)
 80045e4:	f000 fcb6 	bl	8004f54 <_init>
 80045e8:	1b64      	subs	r4, r4, r5
 80045ea:	10a4      	asrs	r4, r4, #2
 80045ec:	2600      	movs	r6, #0
 80045ee:	42a6      	cmp	r6, r4
 80045f0:	d105      	bne.n	80045fe <__libc_init_array+0x2e>
 80045f2:	bd70      	pop	{r4, r5, r6, pc}
 80045f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80045f8:	4798      	blx	r3
 80045fa:	3601      	adds	r6, #1
 80045fc:	e7ee      	b.n	80045dc <__libc_init_array+0xc>
 80045fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004602:	4798      	blx	r3
 8004604:	3601      	adds	r6, #1
 8004606:	e7f2      	b.n	80045ee <__libc_init_array+0x1e>
 8004608:	080057e0 	.word	0x080057e0
 800460c:	080057e0 	.word	0x080057e0
 8004610:	080057e0 	.word	0x080057e0
 8004614:	080057e4 	.word	0x080057e4

08004618 <memcpy>:
 8004618:	440a      	add	r2, r1
 800461a:	4291      	cmp	r1, r2
 800461c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004620:	d100      	bne.n	8004624 <memcpy+0xc>
 8004622:	4770      	bx	lr
 8004624:	b510      	push	{r4, lr}
 8004626:	f811 4b01 	ldrb.w	r4, [r1], #1
 800462a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800462e:	4291      	cmp	r1, r2
 8004630:	d1f9      	bne.n	8004626 <memcpy+0xe>
 8004632:	bd10      	pop	{r4, pc}

08004634 <memmove>:
 8004634:	4288      	cmp	r0, r1
 8004636:	b510      	push	{r4, lr}
 8004638:	eb01 0402 	add.w	r4, r1, r2
 800463c:	d902      	bls.n	8004644 <memmove+0x10>
 800463e:	4284      	cmp	r4, r0
 8004640:	4623      	mov	r3, r4
 8004642:	d807      	bhi.n	8004654 <memmove+0x20>
 8004644:	1e43      	subs	r3, r0, #1
 8004646:	42a1      	cmp	r1, r4
 8004648:	d008      	beq.n	800465c <memmove+0x28>
 800464a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800464e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004652:	e7f8      	b.n	8004646 <memmove+0x12>
 8004654:	4402      	add	r2, r0
 8004656:	4601      	mov	r1, r0
 8004658:	428a      	cmp	r2, r1
 800465a:	d100      	bne.n	800465e <memmove+0x2a>
 800465c:	bd10      	pop	{r4, pc}
 800465e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004662:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004666:	e7f7      	b.n	8004658 <memmove+0x24>

08004668 <memset>:
 8004668:	4402      	add	r2, r0
 800466a:	4603      	mov	r3, r0
 800466c:	4293      	cmp	r3, r2
 800466e:	d100      	bne.n	8004672 <memset+0xa>
 8004670:	4770      	bx	lr
 8004672:	f803 1b01 	strb.w	r1, [r3], #1
 8004676:	e7f9      	b.n	800466c <memset+0x4>

08004678 <siprintf>:
 8004678:	b40e      	push	{r1, r2, r3}
 800467a:	b500      	push	{lr}
 800467c:	b09c      	sub	sp, #112	; 0x70
 800467e:	ab1d      	add	r3, sp, #116	; 0x74
 8004680:	9002      	str	r0, [sp, #8]
 8004682:	9006      	str	r0, [sp, #24]
 8004684:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004688:	4809      	ldr	r0, [pc, #36]	; (80046b0 <siprintf+0x38>)
 800468a:	9107      	str	r1, [sp, #28]
 800468c:	9104      	str	r1, [sp, #16]
 800468e:	4909      	ldr	r1, [pc, #36]	; (80046b4 <siprintf+0x3c>)
 8004690:	f853 2b04 	ldr.w	r2, [r3], #4
 8004694:	9105      	str	r1, [sp, #20]
 8004696:	6800      	ldr	r0, [r0, #0]
 8004698:	9301      	str	r3, [sp, #4]
 800469a:	a902      	add	r1, sp, #8
 800469c:	f000 f890 	bl	80047c0 <_svfiprintf_r>
 80046a0:	9b02      	ldr	r3, [sp, #8]
 80046a2:	2200      	movs	r2, #0
 80046a4:	701a      	strb	r2, [r3, #0]
 80046a6:	b01c      	add	sp, #112	; 0x70
 80046a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80046ac:	b003      	add	sp, #12
 80046ae:	4770      	bx	lr
 80046b0:	20000014 	.word	0x20000014
 80046b4:	ffff0208 	.word	0xffff0208

080046b8 <strncpy>:
 80046b8:	b510      	push	{r4, lr}
 80046ba:	3901      	subs	r1, #1
 80046bc:	4603      	mov	r3, r0
 80046be:	b132      	cbz	r2, 80046ce <strncpy+0x16>
 80046c0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80046c4:	f803 4b01 	strb.w	r4, [r3], #1
 80046c8:	3a01      	subs	r2, #1
 80046ca:	2c00      	cmp	r4, #0
 80046cc:	d1f7      	bne.n	80046be <strncpy+0x6>
 80046ce:	441a      	add	r2, r3
 80046d0:	2100      	movs	r1, #0
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d100      	bne.n	80046d8 <strncpy+0x20>
 80046d6:	bd10      	pop	{r4, pc}
 80046d8:	f803 1b01 	strb.w	r1, [r3], #1
 80046dc:	e7f9      	b.n	80046d2 <strncpy+0x1a>

080046de <strstr>:
 80046de:	780a      	ldrb	r2, [r1, #0]
 80046e0:	b570      	push	{r4, r5, r6, lr}
 80046e2:	b96a      	cbnz	r2, 8004700 <strstr+0x22>
 80046e4:	bd70      	pop	{r4, r5, r6, pc}
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d109      	bne.n	80046fe <strstr+0x20>
 80046ea:	460c      	mov	r4, r1
 80046ec:	4605      	mov	r5, r0
 80046ee:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d0f6      	beq.n	80046e4 <strstr+0x6>
 80046f6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80046fa:	429e      	cmp	r6, r3
 80046fc:	d0f7      	beq.n	80046ee <strstr+0x10>
 80046fe:	3001      	adds	r0, #1
 8004700:	7803      	ldrb	r3, [r0, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1ef      	bne.n	80046e6 <strstr+0x8>
 8004706:	4618      	mov	r0, r3
 8004708:	e7ec      	b.n	80046e4 <strstr+0x6>

0800470a <__ssputs_r>:
 800470a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800470e:	688e      	ldr	r6, [r1, #8]
 8004710:	429e      	cmp	r6, r3
 8004712:	4682      	mov	sl, r0
 8004714:	460c      	mov	r4, r1
 8004716:	4690      	mov	r8, r2
 8004718:	461f      	mov	r7, r3
 800471a:	d838      	bhi.n	800478e <__ssputs_r+0x84>
 800471c:	898a      	ldrh	r2, [r1, #12]
 800471e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004722:	d032      	beq.n	800478a <__ssputs_r+0x80>
 8004724:	6825      	ldr	r5, [r4, #0]
 8004726:	6909      	ldr	r1, [r1, #16]
 8004728:	eba5 0901 	sub.w	r9, r5, r1
 800472c:	6965      	ldr	r5, [r4, #20]
 800472e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004732:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004736:	3301      	adds	r3, #1
 8004738:	444b      	add	r3, r9
 800473a:	106d      	asrs	r5, r5, #1
 800473c:	429d      	cmp	r5, r3
 800473e:	bf38      	it	cc
 8004740:	461d      	movcc	r5, r3
 8004742:	0553      	lsls	r3, r2, #21
 8004744:	d531      	bpl.n	80047aa <__ssputs_r+0xa0>
 8004746:	4629      	mov	r1, r5
 8004748:	f000 fb3a 	bl	8004dc0 <_malloc_r>
 800474c:	4606      	mov	r6, r0
 800474e:	b950      	cbnz	r0, 8004766 <__ssputs_r+0x5c>
 8004750:	230c      	movs	r3, #12
 8004752:	f8ca 3000 	str.w	r3, [sl]
 8004756:	89a3      	ldrh	r3, [r4, #12]
 8004758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800475c:	81a3      	strh	r3, [r4, #12]
 800475e:	f04f 30ff 	mov.w	r0, #4294967295
 8004762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004766:	6921      	ldr	r1, [r4, #16]
 8004768:	464a      	mov	r2, r9
 800476a:	f7ff ff55 	bl	8004618 <memcpy>
 800476e:	89a3      	ldrh	r3, [r4, #12]
 8004770:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004778:	81a3      	strh	r3, [r4, #12]
 800477a:	6126      	str	r6, [r4, #16]
 800477c:	6165      	str	r5, [r4, #20]
 800477e:	444e      	add	r6, r9
 8004780:	eba5 0509 	sub.w	r5, r5, r9
 8004784:	6026      	str	r6, [r4, #0]
 8004786:	60a5      	str	r5, [r4, #8]
 8004788:	463e      	mov	r6, r7
 800478a:	42be      	cmp	r6, r7
 800478c:	d900      	bls.n	8004790 <__ssputs_r+0x86>
 800478e:	463e      	mov	r6, r7
 8004790:	6820      	ldr	r0, [r4, #0]
 8004792:	4632      	mov	r2, r6
 8004794:	4641      	mov	r1, r8
 8004796:	f7ff ff4d 	bl	8004634 <memmove>
 800479a:	68a3      	ldr	r3, [r4, #8]
 800479c:	1b9b      	subs	r3, r3, r6
 800479e:	60a3      	str	r3, [r4, #8]
 80047a0:	6823      	ldr	r3, [r4, #0]
 80047a2:	4433      	add	r3, r6
 80047a4:	6023      	str	r3, [r4, #0]
 80047a6:	2000      	movs	r0, #0
 80047a8:	e7db      	b.n	8004762 <__ssputs_r+0x58>
 80047aa:	462a      	mov	r2, r5
 80047ac:	f000 fb7c 	bl	8004ea8 <_realloc_r>
 80047b0:	4606      	mov	r6, r0
 80047b2:	2800      	cmp	r0, #0
 80047b4:	d1e1      	bne.n	800477a <__ssputs_r+0x70>
 80047b6:	6921      	ldr	r1, [r4, #16]
 80047b8:	4650      	mov	r0, sl
 80047ba:	f000 fa95 	bl	8004ce8 <_free_r>
 80047be:	e7c7      	b.n	8004750 <__ssputs_r+0x46>

080047c0 <_svfiprintf_r>:
 80047c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047c4:	4698      	mov	r8, r3
 80047c6:	898b      	ldrh	r3, [r1, #12]
 80047c8:	061b      	lsls	r3, r3, #24
 80047ca:	b09d      	sub	sp, #116	; 0x74
 80047cc:	4607      	mov	r7, r0
 80047ce:	460d      	mov	r5, r1
 80047d0:	4614      	mov	r4, r2
 80047d2:	d50e      	bpl.n	80047f2 <_svfiprintf_r+0x32>
 80047d4:	690b      	ldr	r3, [r1, #16]
 80047d6:	b963      	cbnz	r3, 80047f2 <_svfiprintf_r+0x32>
 80047d8:	2140      	movs	r1, #64	; 0x40
 80047da:	f000 faf1 	bl	8004dc0 <_malloc_r>
 80047de:	6028      	str	r0, [r5, #0]
 80047e0:	6128      	str	r0, [r5, #16]
 80047e2:	b920      	cbnz	r0, 80047ee <_svfiprintf_r+0x2e>
 80047e4:	230c      	movs	r3, #12
 80047e6:	603b      	str	r3, [r7, #0]
 80047e8:	f04f 30ff 	mov.w	r0, #4294967295
 80047ec:	e0d1      	b.n	8004992 <_svfiprintf_r+0x1d2>
 80047ee:	2340      	movs	r3, #64	; 0x40
 80047f0:	616b      	str	r3, [r5, #20]
 80047f2:	2300      	movs	r3, #0
 80047f4:	9309      	str	r3, [sp, #36]	; 0x24
 80047f6:	2320      	movs	r3, #32
 80047f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8004800:	2330      	movs	r3, #48	; 0x30
 8004802:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80049ac <_svfiprintf_r+0x1ec>
 8004806:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800480a:	f04f 0901 	mov.w	r9, #1
 800480e:	4623      	mov	r3, r4
 8004810:	469a      	mov	sl, r3
 8004812:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004816:	b10a      	cbz	r2, 800481c <_svfiprintf_r+0x5c>
 8004818:	2a25      	cmp	r2, #37	; 0x25
 800481a:	d1f9      	bne.n	8004810 <_svfiprintf_r+0x50>
 800481c:	ebba 0b04 	subs.w	fp, sl, r4
 8004820:	d00b      	beq.n	800483a <_svfiprintf_r+0x7a>
 8004822:	465b      	mov	r3, fp
 8004824:	4622      	mov	r2, r4
 8004826:	4629      	mov	r1, r5
 8004828:	4638      	mov	r0, r7
 800482a:	f7ff ff6e 	bl	800470a <__ssputs_r>
 800482e:	3001      	adds	r0, #1
 8004830:	f000 80aa 	beq.w	8004988 <_svfiprintf_r+0x1c8>
 8004834:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004836:	445a      	add	r2, fp
 8004838:	9209      	str	r2, [sp, #36]	; 0x24
 800483a:	f89a 3000 	ldrb.w	r3, [sl]
 800483e:	2b00      	cmp	r3, #0
 8004840:	f000 80a2 	beq.w	8004988 <_svfiprintf_r+0x1c8>
 8004844:	2300      	movs	r3, #0
 8004846:	f04f 32ff 	mov.w	r2, #4294967295
 800484a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800484e:	f10a 0a01 	add.w	sl, sl, #1
 8004852:	9304      	str	r3, [sp, #16]
 8004854:	9307      	str	r3, [sp, #28]
 8004856:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800485a:	931a      	str	r3, [sp, #104]	; 0x68
 800485c:	4654      	mov	r4, sl
 800485e:	2205      	movs	r2, #5
 8004860:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004864:	4851      	ldr	r0, [pc, #324]	; (80049ac <_svfiprintf_r+0x1ec>)
 8004866:	f7fb fcb3 	bl	80001d0 <memchr>
 800486a:	9a04      	ldr	r2, [sp, #16]
 800486c:	b9d8      	cbnz	r0, 80048a6 <_svfiprintf_r+0xe6>
 800486e:	06d0      	lsls	r0, r2, #27
 8004870:	bf44      	itt	mi
 8004872:	2320      	movmi	r3, #32
 8004874:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004878:	0711      	lsls	r1, r2, #28
 800487a:	bf44      	itt	mi
 800487c:	232b      	movmi	r3, #43	; 0x2b
 800487e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004882:	f89a 3000 	ldrb.w	r3, [sl]
 8004886:	2b2a      	cmp	r3, #42	; 0x2a
 8004888:	d015      	beq.n	80048b6 <_svfiprintf_r+0xf6>
 800488a:	9a07      	ldr	r2, [sp, #28]
 800488c:	4654      	mov	r4, sl
 800488e:	2000      	movs	r0, #0
 8004890:	f04f 0c0a 	mov.w	ip, #10
 8004894:	4621      	mov	r1, r4
 8004896:	f811 3b01 	ldrb.w	r3, [r1], #1
 800489a:	3b30      	subs	r3, #48	; 0x30
 800489c:	2b09      	cmp	r3, #9
 800489e:	d94e      	bls.n	800493e <_svfiprintf_r+0x17e>
 80048a0:	b1b0      	cbz	r0, 80048d0 <_svfiprintf_r+0x110>
 80048a2:	9207      	str	r2, [sp, #28]
 80048a4:	e014      	b.n	80048d0 <_svfiprintf_r+0x110>
 80048a6:	eba0 0308 	sub.w	r3, r0, r8
 80048aa:	fa09 f303 	lsl.w	r3, r9, r3
 80048ae:	4313      	orrs	r3, r2
 80048b0:	9304      	str	r3, [sp, #16]
 80048b2:	46a2      	mov	sl, r4
 80048b4:	e7d2      	b.n	800485c <_svfiprintf_r+0x9c>
 80048b6:	9b03      	ldr	r3, [sp, #12]
 80048b8:	1d19      	adds	r1, r3, #4
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	9103      	str	r1, [sp, #12]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	bfbb      	ittet	lt
 80048c2:	425b      	neglt	r3, r3
 80048c4:	f042 0202 	orrlt.w	r2, r2, #2
 80048c8:	9307      	strge	r3, [sp, #28]
 80048ca:	9307      	strlt	r3, [sp, #28]
 80048cc:	bfb8      	it	lt
 80048ce:	9204      	strlt	r2, [sp, #16]
 80048d0:	7823      	ldrb	r3, [r4, #0]
 80048d2:	2b2e      	cmp	r3, #46	; 0x2e
 80048d4:	d10c      	bne.n	80048f0 <_svfiprintf_r+0x130>
 80048d6:	7863      	ldrb	r3, [r4, #1]
 80048d8:	2b2a      	cmp	r3, #42	; 0x2a
 80048da:	d135      	bne.n	8004948 <_svfiprintf_r+0x188>
 80048dc:	9b03      	ldr	r3, [sp, #12]
 80048de:	1d1a      	adds	r2, r3, #4
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	9203      	str	r2, [sp, #12]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	bfb8      	it	lt
 80048e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80048ec:	3402      	adds	r4, #2
 80048ee:	9305      	str	r3, [sp, #20]
 80048f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80049bc <_svfiprintf_r+0x1fc>
 80048f4:	7821      	ldrb	r1, [r4, #0]
 80048f6:	2203      	movs	r2, #3
 80048f8:	4650      	mov	r0, sl
 80048fa:	f7fb fc69 	bl	80001d0 <memchr>
 80048fe:	b140      	cbz	r0, 8004912 <_svfiprintf_r+0x152>
 8004900:	2340      	movs	r3, #64	; 0x40
 8004902:	eba0 000a 	sub.w	r0, r0, sl
 8004906:	fa03 f000 	lsl.w	r0, r3, r0
 800490a:	9b04      	ldr	r3, [sp, #16]
 800490c:	4303      	orrs	r3, r0
 800490e:	3401      	adds	r4, #1
 8004910:	9304      	str	r3, [sp, #16]
 8004912:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004916:	4826      	ldr	r0, [pc, #152]	; (80049b0 <_svfiprintf_r+0x1f0>)
 8004918:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800491c:	2206      	movs	r2, #6
 800491e:	f7fb fc57 	bl	80001d0 <memchr>
 8004922:	2800      	cmp	r0, #0
 8004924:	d038      	beq.n	8004998 <_svfiprintf_r+0x1d8>
 8004926:	4b23      	ldr	r3, [pc, #140]	; (80049b4 <_svfiprintf_r+0x1f4>)
 8004928:	bb1b      	cbnz	r3, 8004972 <_svfiprintf_r+0x1b2>
 800492a:	9b03      	ldr	r3, [sp, #12]
 800492c:	3307      	adds	r3, #7
 800492e:	f023 0307 	bic.w	r3, r3, #7
 8004932:	3308      	adds	r3, #8
 8004934:	9303      	str	r3, [sp, #12]
 8004936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004938:	4433      	add	r3, r6
 800493a:	9309      	str	r3, [sp, #36]	; 0x24
 800493c:	e767      	b.n	800480e <_svfiprintf_r+0x4e>
 800493e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004942:	460c      	mov	r4, r1
 8004944:	2001      	movs	r0, #1
 8004946:	e7a5      	b.n	8004894 <_svfiprintf_r+0xd4>
 8004948:	2300      	movs	r3, #0
 800494a:	3401      	adds	r4, #1
 800494c:	9305      	str	r3, [sp, #20]
 800494e:	4619      	mov	r1, r3
 8004950:	f04f 0c0a 	mov.w	ip, #10
 8004954:	4620      	mov	r0, r4
 8004956:	f810 2b01 	ldrb.w	r2, [r0], #1
 800495a:	3a30      	subs	r2, #48	; 0x30
 800495c:	2a09      	cmp	r2, #9
 800495e:	d903      	bls.n	8004968 <_svfiprintf_r+0x1a8>
 8004960:	2b00      	cmp	r3, #0
 8004962:	d0c5      	beq.n	80048f0 <_svfiprintf_r+0x130>
 8004964:	9105      	str	r1, [sp, #20]
 8004966:	e7c3      	b.n	80048f0 <_svfiprintf_r+0x130>
 8004968:	fb0c 2101 	mla	r1, ip, r1, r2
 800496c:	4604      	mov	r4, r0
 800496e:	2301      	movs	r3, #1
 8004970:	e7f0      	b.n	8004954 <_svfiprintf_r+0x194>
 8004972:	ab03      	add	r3, sp, #12
 8004974:	9300      	str	r3, [sp, #0]
 8004976:	462a      	mov	r2, r5
 8004978:	4b0f      	ldr	r3, [pc, #60]	; (80049b8 <_svfiprintf_r+0x1f8>)
 800497a:	a904      	add	r1, sp, #16
 800497c:	4638      	mov	r0, r7
 800497e:	f3af 8000 	nop.w
 8004982:	1c42      	adds	r2, r0, #1
 8004984:	4606      	mov	r6, r0
 8004986:	d1d6      	bne.n	8004936 <_svfiprintf_r+0x176>
 8004988:	89ab      	ldrh	r3, [r5, #12]
 800498a:	065b      	lsls	r3, r3, #25
 800498c:	f53f af2c 	bmi.w	80047e8 <_svfiprintf_r+0x28>
 8004990:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004992:	b01d      	add	sp, #116	; 0x74
 8004994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004998:	ab03      	add	r3, sp, #12
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	462a      	mov	r2, r5
 800499e:	4b06      	ldr	r3, [pc, #24]	; (80049b8 <_svfiprintf_r+0x1f8>)
 80049a0:	a904      	add	r1, sp, #16
 80049a2:	4638      	mov	r0, r7
 80049a4:	f000 f87a 	bl	8004a9c <_printf_i>
 80049a8:	e7eb      	b.n	8004982 <_svfiprintf_r+0x1c2>
 80049aa:	bf00      	nop
 80049ac:	080057a5 	.word	0x080057a5
 80049b0:	080057af 	.word	0x080057af
 80049b4:	00000000 	.word	0x00000000
 80049b8:	0800470b 	.word	0x0800470b
 80049bc:	080057ab 	.word	0x080057ab

080049c0 <_printf_common>:
 80049c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049c4:	4616      	mov	r6, r2
 80049c6:	4699      	mov	r9, r3
 80049c8:	688a      	ldr	r2, [r1, #8]
 80049ca:	690b      	ldr	r3, [r1, #16]
 80049cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049d0:	4293      	cmp	r3, r2
 80049d2:	bfb8      	it	lt
 80049d4:	4613      	movlt	r3, r2
 80049d6:	6033      	str	r3, [r6, #0]
 80049d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049dc:	4607      	mov	r7, r0
 80049de:	460c      	mov	r4, r1
 80049e0:	b10a      	cbz	r2, 80049e6 <_printf_common+0x26>
 80049e2:	3301      	adds	r3, #1
 80049e4:	6033      	str	r3, [r6, #0]
 80049e6:	6823      	ldr	r3, [r4, #0]
 80049e8:	0699      	lsls	r1, r3, #26
 80049ea:	bf42      	ittt	mi
 80049ec:	6833      	ldrmi	r3, [r6, #0]
 80049ee:	3302      	addmi	r3, #2
 80049f0:	6033      	strmi	r3, [r6, #0]
 80049f2:	6825      	ldr	r5, [r4, #0]
 80049f4:	f015 0506 	ands.w	r5, r5, #6
 80049f8:	d106      	bne.n	8004a08 <_printf_common+0x48>
 80049fa:	f104 0a19 	add.w	sl, r4, #25
 80049fe:	68e3      	ldr	r3, [r4, #12]
 8004a00:	6832      	ldr	r2, [r6, #0]
 8004a02:	1a9b      	subs	r3, r3, r2
 8004a04:	42ab      	cmp	r3, r5
 8004a06:	dc26      	bgt.n	8004a56 <_printf_common+0x96>
 8004a08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a0c:	1e13      	subs	r3, r2, #0
 8004a0e:	6822      	ldr	r2, [r4, #0]
 8004a10:	bf18      	it	ne
 8004a12:	2301      	movne	r3, #1
 8004a14:	0692      	lsls	r2, r2, #26
 8004a16:	d42b      	bmi.n	8004a70 <_printf_common+0xb0>
 8004a18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a1c:	4649      	mov	r1, r9
 8004a1e:	4638      	mov	r0, r7
 8004a20:	47c0      	blx	r8
 8004a22:	3001      	adds	r0, #1
 8004a24:	d01e      	beq.n	8004a64 <_printf_common+0xa4>
 8004a26:	6823      	ldr	r3, [r4, #0]
 8004a28:	68e5      	ldr	r5, [r4, #12]
 8004a2a:	6832      	ldr	r2, [r6, #0]
 8004a2c:	f003 0306 	and.w	r3, r3, #6
 8004a30:	2b04      	cmp	r3, #4
 8004a32:	bf08      	it	eq
 8004a34:	1aad      	subeq	r5, r5, r2
 8004a36:	68a3      	ldr	r3, [r4, #8]
 8004a38:	6922      	ldr	r2, [r4, #16]
 8004a3a:	bf0c      	ite	eq
 8004a3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a40:	2500      	movne	r5, #0
 8004a42:	4293      	cmp	r3, r2
 8004a44:	bfc4      	itt	gt
 8004a46:	1a9b      	subgt	r3, r3, r2
 8004a48:	18ed      	addgt	r5, r5, r3
 8004a4a:	2600      	movs	r6, #0
 8004a4c:	341a      	adds	r4, #26
 8004a4e:	42b5      	cmp	r5, r6
 8004a50:	d11a      	bne.n	8004a88 <_printf_common+0xc8>
 8004a52:	2000      	movs	r0, #0
 8004a54:	e008      	b.n	8004a68 <_printf_common+0xa8>
 8004a56:	2301      	movs	r3, #1
 8004a58:	4652      	mov	r2, sl
 8004a5a:	4649      	mov	r1, r9
 8004a5c:	4638      	mov	r0, r7
 8004a5e:	47c0      	blx	r8
 8004a60:	3001      	adds	r0, #1
 8004a62:	d103      	bne.n	8004a6c <_printf_common+0xac>
 8004a64:	f04f 30ff 	mov.w	r0, #4294967295
 8004a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a6c:	3501      	adds	r5, #1
 8004a6e:	e7c6      	b.n	80049fe <_printf_common+0x3e>
 8004a70:	18e1      	adds	r1, r4, r3
 8004a72:	1c5a      	adds	r2, r3, #1
 8004a74:	2030      	movs	r0, #48	; 0x30
 8004a76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a7a:	4422      	add	r2, r4
 8004a7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a84:	3302      	adds	r3, #2
 8004a86:	e7c7      	b.n	8004a18 <_printf_common+0x58>
 8004a88:	2301      	movs	r3, #1
 8004a8a:	4622      	mov	r2, r4
 8004a8c:	4649      	mov	r1, r9
 8004a8e:	4638      	mov	r0, r7
 8004a90:	47c0      	blx	r8
 8004a92:	3001      	adds	r0, #1
 8004a94:	d0e6      	beq.n	8004a64 <_printf_common+0xa4>
 8004a96:	3601      	adds	r6, #1
 8004a98:	e7d9      	b.n	8004a4e <_printf_common+0x8e>
	...

08004a9c <_printf_i>:
 8004a9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004aa0:	7e0f      	ldrb	r7, [r1, #24]
 8004aa2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004aa4:	2f78      	cmp	r7, #120	; 0x78
 8004aa6:	4691      	mov	r9, r2
 8004aa8:	4680      	mov	r8, r0
 8004aaa:	460c      	mov	r4, r1
 8004aac:	469a      	mov	sl, r3
 8004aae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004ab2:	d807      	bhi.n	8004ac4 <_printf_i+0x28>
 8004ab4:	2f62      	cmp	r7, #98	; 0x62
 8004ab6:	d80a      	bhi.n	8004ace <_printf_i+0x32>
 8004ab8:	2f00      	cmp	r7, #0
 8004aba:	f000 80d8 	beq.w	8004c6e <_printf_i+0x1d2>
 8004abe:	2f58      	cmp	r7, #88	; 0x58
 8004ac0:	f000 80a3 	beq.w	8004c0a <_printf_i+0x16e>
 8004ac4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ac8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004acc:	e03a      	b.n	8004b44 <_printf_i+0xa8>
 8004ace:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ad2:	2b15      	cmp	r3, #21
 8004ad4:	d8f6      	bhi.n	8004ac4 <_printf_i+0x28>
 8004ad6:	a101      	add	r1, pc, #4	; (adr r1, 8004adc <_printf_i+0x40>)
 8004ad8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004adc:	08004b35 	.word	0x08004b35
 8004ae0:	08004b49 	.word	0x08004b49
 8004ae4:	08004ac5 	.word	0x08004ac5
 8004ae8:	08004ac5 	.word	0x08004ac5
 8004aec:	08004ac5 	.word	0x08004ac5
 8004af0:	08004ac5 	.word	0x08004ac5
 8004af4:	08004b49 	.word	0x08004b49
 8004af8:	08004ac5 	.word	0x08004ac5
 8004afc:	08004ac5 	.word	0x08004ac5
 8004b00:	08004ac5 	.word	0x08004ac5
 8004b04:	08004ac5 	.word	0x08004ac5
 8004b08:	08004c55 	.word	0x08004c55
 8004b0c:	08004b79 	.word	0x08004b79
 8004b10:	08004c37 	.word	0x08004c37
 8004b14:	08004ac5 	.word	0x08004ac5
 8004b18:	08004ac5 	.word	0x08004ac5
 8004b1c:	08004c77 	.word	0x08004c77
 8004b20:	08004ac5 	.word	0x08004ac5
 8004b24:	08004b79 	.word	0x08004b79
 8004b28:	08004ac5 	.word	0x08004ac5
 8004b2c:	08004ac5 	.word	0x08004ac5
 8004b30:	08004c3f 	.word	0x08004c3f
 8004b34:	682b      	ldr	r3, [r5, #0]
 8004b36:	1d1a      	adds	r2, r3, #4
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	602a      	str	r2, [r5, #0]
 8004b3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b44:	2301      	movs	r3, #1
 8004b46:	e0a3      	b.n	8004c90 <_printf_i+0x1f4>
 8004b48:	6820      	ldr	r0, [r4, #0]
 8004b4a:	6829      	ldr	r1, [r5, #0]
 8004b4c:	0606      	lsls	r6, r0, #24
 8004b4e:	f101 0304 	add.w	r3, r1, #4
 8004b52:	d50a      	bpl.n	8004b6a <_printf_i+0xce>
 8004b54:	680e      	ldr	r6, [r1, #0]
 8004b56:	602b      	str	r3, [r5, #0]
 8004b58:	2e00      	cmp	r6, #0
 8004b5a:	da03      	bge.n	8004b64 <_printf_i+0xc8>
 8004b5c:	232d      	movs	r3, #45	; 0x2d
 8004b5e:	4276      	negs	r6, r6
 8004b60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b64:	485e      	ldr	r0, [pc, #376]	; (8004ce0 <_printf_i+0x244>)
 8004b66:	230a      	movs	r3, #10
 8004b68:	e019      	b.n	8004b9e <_printf_i+0x102>
 8004b6a:	680e      	ldr	r6, [r1, #0]
 8004b6c:	602b      	str	r3, [r5, #0]
 8004b6e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b72:	bf18      	it	ne
 8004b74:	b236      	sxthne	r6, r6
 8004b76:	e7ef      	b.n	8004b58 <_printf_i+0xbc>
 8004b78:	682b      	ldr	r3, [r5, #0]
 8004b7a:	6820      	ldr	r0, [r4, #0]
 8004b7c:	1d19      	adds	r1, r3, #4
 8004b7e:	6029      	str	r1, [r5, #0]
 8004b80:	0601      	lsls	r1, r0, #24
 8004b82:	d501      	bpl.n	8004b88 <_printf_i+0xec>
 8004b84:	681e      	ldr	r6, [r3, #0]
 8004b86:	e002      	b.n	8004b8e <_printf_i+0xf2>
 8004b88:	0646      	lsls	r6, r0, #25
 8004b8a:	d5fb      	bpl.n	8004b84 <_printf_i+0xe8>
 8004b8c:	881e      	ldrh	r6, [r3, #0]
 8004b8e:	4854      	ldr	r0, [pc, #336]	; (8004ce0 <_printf_i+0x244>)
 8004b90:	2f6f      	cmp	r7, #111	; 0x6f
 8004b92:	bf0c      	ite	eq
 8004b94:	2308      	moveq	r3, #8
 8004b96:	230a      	movne	r3, #10
 8004b98:	2100      	movs	r1, #0
 8004b9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b9e:	6865      	ldr	r5, [r4, #4]
 8004ba0:	60a5      	str	r5, [r4, #8]
 8004ba2:	2d00      	cmp	r5, #0
 8004ba4:	bfa2      	ittt	ge
 8004ba6:	6821      	ldrge	r1, [r4, #0]
 8004ba8:	f021 0104 	bicge.w	r1, r1, #4
 8004bac:	6021      	strge	r1, [r4, #0]
 8004bae:	b90e      	cbnz	r6, 8004bb4 <_printf_i+0x118>
 8004bb0:	2d00      	cmp	r5, #0
 8004bb2:	d04d      	beq.n	8004c50 <_printf_i+0x1b4>
 8004bb4:	4615      	mov	r5, r2
 8004bb6:	fbb6 f1f3 	udiv	r1, r6, r3
 8004bba:	fb03 6711 	mls	r7, r3, r1, r6
 8004bbe:	5dc7      	ldrb	r7, [r0, r7]
 8004bc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004bc4:	4637      	mov	r7, r6
 8004bc6:	42bb      	cmp	r3, r7
 8004bc8:	460e      	mov	r6, r1
 8004bca:	d9f4      	bls.n	8004bb6 <_printf_i+0x11a>
 8004bcc:	2b08      	cmp	r3, #8
 8004bce:	d10b      	bne.n	8004be8 <_printf_i+0x14c>
 8004bd0:	6823      	ldr	r3, [r4, #0]
 8004bd2:	07de      	lsls	r6, r3, #31
 8004bd4:	d508      	bpl.n	8004be8 <_printf_i+0x14c>
 8004bd6:	6923      	ldr	r3, [r4, #16]
 8004bd8:	6861      	ldr	r1, [r4, #4]
 8004bda:	4299      	cmp	r1, r3
 8004bdc:	bfde      	ittt	le
 8004bde:	2330      	movle	r3, #48	; 0x30
 8004be0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004be4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004be8:	1b52      	subs	r2, r2, r5
 8004bea:	6122      	str	r2, [r4, #16]
 8004bec:	f8cd a000 	str.w	sl, [sp]
 8004bf0:	464b      	mov	r3, r9
 8004bf2:	aa03      	add	r2, sp, #12
 8004bf4:	4621      	mov	r1, r4
 8004bf6:	4640      	mov	r0, r8
 8004bf8:	f7ff fee2 	bl	80049c0 <_printf_common>
 8004bfc:	3001      	adds	r0, #1
 8004bfe:	d14c      	bne.n	8004c9a <_printf_i+0x1fe>
 8004c00:	f04f 30ff 	mov.w	r0, #4294967295
 8004c04:	b004      	add	sp, #16
 8004c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c0a:	4835      	ldr	r0, [pc, #212]	; (8004ce0 <_printf_i+0x244>)
 8004c0c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004c10:	6829      	ldr	r1, [r5, #0]
 8004c12:	6823      	ldr	r3, [r4, #0]
 8004c14:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c18:	6029      	str	r1, [r5, #0]
 8004c1a:	061d      	lsls	r5, r3, #24
 8004c1c:	d514      	bpl.n	8004c48 <_printf_i+0x1ac>
 8004c1e:	07df      	lsls	r7, r3, #31
 8004c20:	bf44      	itt	mi
 8004c22:	f043 0320 	orrmi.w	r3, r3, #32
 8004c26:	6023      	strmi	r3, [r4, #0]
 8004c28:	b91e      	cbnz	r6, 8004c32 <_printf_i+0x196>
 8004c2a:	6823      	ldr	r3, [r4, #0]
 8004c2c:	f023 0320 	bic.w	r3, r3, #32
 8004c30:	6023      	str	r3, [r4, #0]
 8004c32:	2310      	movs	r3, #16
 8004c34:	e7b0      	b.n	8004b98 <_printf_i+0xfc>
 8004c36:	6823      	ldr	r3, [r4, #0]
 8004c38:	f043 0320 	orr.w	r3, r3, #32
 8004c3c:	6023      	str	r3, [r4, #0]
 8004c3e:	2378      	movs	r3, #120	; 0x78
 8004c40:	4828      	ldr	r0, [pc, #160]	; (8004ce4 <_printf_i+0x248>)
 8004c42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c46:	e7e3      	b.n	8004c10 <_printf_i+0x174>
 8004c48:	0659      	lsls	r1, r3, #25
 8004c4a:	bf48      	it	mi
 8004c4c:	b2b6      	uxthmi	r6, r6
 8004c4e:	e7e6      	b.n	8004c1e <_printf_i+0x182>
 8004c50:	4615      	mov	r5, r2
 8004c52:	e7bb      	b.n	8004bcc <_printf_i+0x130>
 8004c54:	682b      	ldr	r3, [r5, #0]
 8004c56:	6826      	ldr	r6, [r4, #0]
 8004c58:	6961      	ldr	r1, [r4, #20]
 8004c5a:	1d18      	adds	r0, r3, #4
 8004c5c:	6028      	str	r0, [r5, #0]
 8004c5e:	0635      	lsls	r5, r6, #24
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	d501      	bpl.n	8004c68 <_printf_i+0x1cc>
 8004c64:	6019      	str	r1, [r3, #0]
 8004c66:	e002      	b.n	8004c6e <_printf_i+0x1d2>
 8004c68:	0670      	lsls	r0, r6, #25
 8004c6a:	d5fb      	bpl.n	8004c64 <_printf_i+0x1c8>
 8004c6c:	8019      	strh	r1, [r3, #0]
 8004c6e:	2300      	movs	r3, #0
 8004c70:	6123      	str	r3, [r4, #16]
 8004c72:	4615      	mov	r5, r2
 8004c74:	e7ba      	b.n	8004bec <_printf_i+0x150>
 8004c76:	682b      	ldr	r3, [r5, #0]
 8004c78:	1d1a      	adds	r2, r3, #4
 8004c7a:	602a      	str	r2, [r5, #0]
 8004c7c:	681d      	ldr	r5, [r3, #0]
 8004c7e:	6862      	ldr	r2, [r4, #4]
 8004c80:	2100      	movs	r1, #0
 8004c82:	4628      	mov	r0, r5
 8004c84:	f7fb faa4 	bl	80001d0 <memchr>
 8004c88:	b108      	cbz	r0, 8004c8e <_printf_i+0x1f2>
 8004c8a:	1b40      	subs	r0, r0, r5
 8004c8c:	6060      	str	r0, [r4, #4]
 8004c8e:	6863      	ldr	r3, [r4, #4]
 8004c90:	6123      	str	r3, [r4, #16]
 8004c92:	2300      	movs	r3, #0
 8004c94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c98:	e7a8      	b.n	8004bec <_printf_i+0x150>
 8004c9a:	6923      	ldr	r3, [r4, #16]
 8004c9c:	462a      	mov	r2, r5
 8004c9e:	4649      	mov	r1, r9
 8004ca0:	4640      	mov	r0, r8
 8004ca2:	47d0      	blx	sl
 8004ca4:	3001      	adds	r0, #1
 8004ca6:	d0ab      	beq.n	8004c00 <_printf_i+0x164>
 8004ca8:	6823      	ldr	r3, [r4, #0]
 8004caa:	079b      	lsls	r3, r3, #30
 8004cac:	d413      	bmi.n	8004cd6 <_printf_i+0x23a>
 8004cae:	68e0      	ldr	r0, [r4, #12]
 8004cb0:	9b03      	ldr	r3, [sp, #12]
 8004cb2:	4298      	cmp	r0, r3
 8004cb4:	bfb8      	it	lt
 8004cb6:	4618      	movlt	r0, r3
 8004cb8:	e7a4      	b.n	8004c04 <_printf_i+0x168>
 8004cba:	2301      	movs	r3, #1
 8004cbc:	4632      	mov	r2, r6
 8004cbe:	4649      	mov	r1, r9
 8004cc0:	4640      	mov	r0, r8
 8004cc2:	47d0      	blx	sl
 8004cc4:	3001      	adds	r0, #1
 8004cc6:	d09b      	beq.n	8004c00 <_printf_i+0x164>
 8004cc8:	3501      	adds	r5, #1
 8004cca:	68e3      	ldr	r3, [r4, #12]
 8004ccc:	9903      	ldr	r1, [sp, #12]
 8004cce:	1a5b      	subs	r3, r3, r1
 8004cd0:	42ab      	cmp	r3, r5
 8004cd2:	dcf2      	bgt.n	8004cba <_printf_i+0x21e>
 8004cd4:	e7eb      	b.n	8004cae <_printf_i+0x212>
 8004cd6:	2500      	movs	r5, #0
 8004cd8:	f104 0619 	add.w	r6, r4, #25
 8004cdc:	e7f5      	b.n	8004cca <_printf_i+0x22e>
 8004cde:	bf00      	nop
 8004ce0:	080057b6 	.word	0x080057b6
 8004ce4:	080057c7 	.word	0x080057c7

08004ce8 <_free_r>:
 8004ce8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004cea:	2900      	cmp	r1, #0
 8004cec:	d044      	beq.n	8004d78 <_free_r+0x90>
 8004cee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cf2:	9001      	str	r0, [sp, #4]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f1a1 0404 	sub.w	r4, r1, #4
 8004cfa:	bfb8      	it	lt
 8004cfc:	18e4      	addlt	r4, r4, r3
 8004cfe:	f000 f913 	bl	8004f28 <__malloc_lock>
 8004d02:	4a1e      	ldr	r2, [pc, #120]	; (8004d7c <_free_r+0x94>)
 8004d04:	9801      	ldr	r0, [sp, #4]
 8004d06:	6813      	ldr	r3, [r2, #0]
 8004d08:	b933      	cbnz	r3, 8004d18 <_free_r+0x30>
 8004d0a:	6063      	str	r3, [r4, #4]
 8004d0c:	6014      	str	r4, [r2, #0]
 8004d0e:	b003      	add	sp, #12
 8004d10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d14:	f000 b90e 	b.w	8004f34 <__malloc_unlock>
 8004d18:	42a3      	cmp	r3, r4
 8004d1a:	d908      	bls.n	8004d2e <_free_r+0x46>
 8004d1c:	6825      	ldr	r5, [r4, #0]
 8004d1e:	1961      	adds	r1, r4, r5
 8004d20:	428b      	cmp	r3, r1
 8004d22:	bf01      	itttt	eq
 8004d24:	6819      	ldreq	r1, [r3, #0]
 8004d26:	685b      	ldreq	r3, [r3, #4]
 8004d28:	1949      	addeq	r1, r1, r5
 8004d2a:	6021      	streq	r1, [r4, #0]
 8004d2c:	e7ed      	b.n	8004d0a <_free_r+0x22>
 8004d2e:	461a      	mov	r2, r3
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	b10b      	cbz	r3, 8004d38 <_free_r+0x50>
 8004d34:	42a3      	cmp	r3, r4
 8004d36:	d9fa      	bls.n	8004d2e <_free_r+0x46>
 8004d38:	6811      	ldr	r1, [r2, #0]
 8004d3a:	1855      	adds	r5, r2, r1
 8004d3c:	42a5      	cmp	r5, r4
 8004d3e:	d10b      	bne.n	8004d58 <_free_r+0x70>
 8004d40:	6824      	ldr	r4, [r4, #0]
 8004d42:	4421      	add	r1, r4
 8004d44:	1854      	adds	r4, r2, r1
 8004d46:	42a3      	cmp	r3, r4
 8004d48:	6011      	str	r1, [r2, #0]
 8004d4a:	d1e0      	bne.n	8004d0e <_free_r+0x26>
 8004d4c:	681c      	ldr	r4, [r3, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	6053      	str	r3, [r2, #4]
 8004d52:	4421      	add	r1, r4
 8004d54:	6011      	str	r1, [r2, #0]
 8004d56:	e7da      	b.n	8004d0e <_free_r+0x26>
 8004d58:	d902      	bls.n	8004d60 <_free_r+0x78>
 8004d5a:	230c      	movs	r3, #12
 8004d5c:	6003      	str	r3, [r0, #0]
 8004d5e:	e7d6      	b.n	8004d0e <_free_r+0x26>
 8004d60:	6825      	ldr	r5, [r4, #0]
 8004d62:	1961      	adds	r1, r4, r5
 8004d64:	428b      	cmp	r3, r1
 8004d66:	bf04      	itt	eq
 8004d68:	6819      	ldreq	r1, [r3, #0]
 8004d6a:	685b      	ldreq	r3, [r3, #4]
 8004d6c:	6063      	str	r3, [r4, #4]
 8004d6e:	bf04      	itt	eq
 8004d70:	1949      	addeq	r1, r1, r5
 8004d72:	6021      	streq	r1, [r4, #0]
 8004d74:	6054      	str	r4, [r2, #4]
 8004d76:	e7ca      	b.n	8004d0e <_free_r+0x26>
 8004d78:	b003      	add	sp, #12
 8004d7a:	bd30      	pop	{r4, r5, pc}
 8004d7c:	20000594 	.word	0x20000594

08004d80 <sbrk_aligned>:
 8004d80:	b570      	push	{r4, r5, r6, lr}
 8004d82:	4e0e      	ldr	r6, [pc, #56]	; (8004dbc <sbrk_aligned+0x3c>)
 8004d84:	460c      	mov	r4, r1
 8004d86:	6831      	ldr	r1, [r6, #0]
 8004d88:	4605      	mov	r5, r0
 8004d8a:	b911      	cbnz	r1, 8004d92 <sbrk_aligned+0x12>
 8004d8c:	f000 f8bc 	bl	8004f08 <_sbrk_r>
 8004d90:	6030      	str	r0, [r6, #0]
 8004d92:	4621      	mov	r1, r4
 8004d94:	4628      	mov	r0, r5
 8004d96:	f000 f8b7 	bl	8004f08 <_sbrk_r>
 8004d9a:	1c43      	adds	r3, r0, #1
 8004d9c:	d00a      	beq.n	8004db4 <sbrk_aligned+0x34>
 8004d9e:	1cc4      	adds	r4, r0, #3
 8004da0:	f024 0403 	bic.w	r4, r4, #3
 8004da4:	42a0      	cmp	r0, r4
 8004da6:	d007      	beq.n	8004db8 <sbrk_aligned+0x38>
 8004da8:	1a21      	subs	r1, r4, r0
 8004daa:	4628      	mov	r0, r5
 8004dac:	f000 f8ac 	bl	8004f08 <_sbrk_r>
 8004db0:	3001      	adds	r0, #1
 8004db2:	d101      	bne.n	8004db8 <sbrk_aligned+0x38>
 8004db4:	f04f 34ff 	mov.w	r4, #4294967295
 8004db8:	4620      	mov	r0, r4
 8004dba:	bd70      	pop	{r4, r5, r6, pc}
 8004dbc:	20000598 	.word	0x20000598

08004dc0 <_malloc_r>:
 8004dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dc4:	1ccd      	adds	r5, r1, #3
 8004dc6:	f025 0503 	bic.w	r5, r5, #3
 8004dca:	3508      	adds	r5, #8
 8004dcc:	2d0c      	cmp	r5, #12
 8004dce:	bf38      	it	cc
 8004dd0:	250c      	movcc	r5, #12
 8004dd2:	2d00      	cmp	r5, #0
 8004dd4:	4607      	mov	r7, r0
 8004dd6:	db01      	blt.n	8004ddc <_malloc_r+0x1c>
 8004dd8:	42a9      	cmp	r1, r5
 8004dda:	d905      	bls.n	8004de8 <_malloc_r+0x28>
 8004ddc:	230c      	movs	r3, #12
 8004dde:	603b      	str	r3, [r7, #0]
 8004de0:	2600      	movs	r6, #0
 8004de2:	4630      	mov	r0, r6
 8004de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004de8:	4e2e      	ldr	r6, [pc, #184]	; (8004ea4 <_malloc_r+0xe4>)
 8004dea:	f000 f89d 	bl	8004f28 <__malloc_lock>
 8004dee:	6833      	ldr	r3, [r6, #0]
 8004df0:	461c      	mov	r4, r3
 8004df2:	bb34      	cbnz	r4, 8004e42 <_malloc_r+0x82>
 8004df4:	4629      	mov	r1, r5
 8004df6:	4638      	mov	r0, r7
 8004df8:	f7ff ffc2 	bl	8004d80 <sbrk_aligned>
 8004dfc:	1c43      	adds	r3, r0, #1
 8004dfe:	4604      	mov	r4, r0
 8004e00:	d14d      	bne.n	8004e9e <_malloc_r+0xde>
 8004e02:	6834      	ldr	r4, [r6, #0]
 8004e04:	4626      	mov	r6, r4
 8004e06:	2e00      	cmp	r6, #0
 8004e08:	d140      	bne.n	8004e8c <_malloc_r+0xcc>
 8004e0a:	6823      	ldr	r3, [r4, #0]
 8004e0c:	4631      	mov	r1, r6
 8004e0e:	4638      	mov	r0, r7
 8004e10:	eb04 0803 	add.w	r8, r4, r3
 8004e14:	f000 f878 	bl	8004f08 <_sbrk_r>
 8004e18:	4580      	cmp	r8, r0
 8004e1a:	d13a      	bne.n	8004e92 <_malloc_r+0xd2>
 8004e1c:	6821      	ldr	r1, [r4, #0]
 8004e1e:	3503      	adds	r5, #3
 8004e20:	1a6d      	subs	r5, r5, r1
 8004e22:	f025 0503 	bic.w	r5, r5, #3
 8004e26:	3508      	adds	r5, #8
 8004e28:	2d0c      	cmp	r5, #12
 8004e2a:	bf38      	it	cc
 8004e2c:	250c      	movcc	r5, #12
 8004e2e:	4629      	mov	r1, r5
 8004e30:	4638      	mov	r0, r7
 8004e32:	f7ff ffa5 	bl	8004d80 <sbrk_aligned>
 8004e36:	3001      	adds	r0, #1
 8004e38:	d02b      	beq.n	8004e92 <_malloc_r+0xd2>
 8004e3a:	6823      	ldr	r3, [r4, #0]
 8004e3c:	442b      	add	r3, r5
 8004e3e:	6023      	str	r3, [r4, #0]
 8004e40:	e00e      	b.n	8004e60 <_malloc_r+0xa0>
 8004e42:	6822      	ldr	r2, [r4, #0]
 8004e44:	1b52      	subs	r2, r2, r5
 8004e46:	d41e      	bmi.n	8004e86 <_malloc_r+0xc6>
 8004e48:	2a0b      	cmp	r2, #11
 8004e4a:	d916      	bls.n	8004e7a <_malloc_r+0xba>
 8004e4c:	1961      	adds	r1, r4, r5
 8004e4e:	42a3      	cmp	r3, r4
 8004e50:	6025      	str	r5, [r4, #0]
 8004e52:	bf18      	it	ne
 8004e54:	6059      	strne	r1, [r3, #4]
 8004e56:	6863      	ldr	r3, [r4, #4]
 8004e58:	bf08      	it	eq
 8004e5a:	6031      	streq	r1, [r6, #0]
 8004e5c:	5162      	str	r2, [r4, r5]
 8004e5e:	604b      	str	r3, [r1, #4]
 8004e60:	4638      	mov	r0, r7
 8004e62:	f104 060b 	add.w	r6, r4, #11
 8004e66:	f000 f865 	bl	8004f34 <__malloc_unlock>
 8004e6a:	f026 0607 	bic.w	r6, r6, #7
 8004e6e:	1d23      	adds	r3, r4, #4
 8004e70:	1af2      	subs	r2, r6, r3
 8004e72:	d0b6      	beq.n	8004de2 <_malloc_r+0x22>
 8004e74:	1b9b      	subs	r3, r3, r6
 8004e76:	50a3      	str	r3, [r4, r2]
 8004e78:	e7b3      	b.n	8004de2 <_malloc_r+0x22>
 8004e7a:	6862      	ldr	r2, [r4, #4]
 8004e7c:	42a3      	cmp	r3, r4
 8004e7e:	bf0c      	ite	eq
 8004e80:	6032      	streq	r2, [r6, #0]
 8004e82:	605a      	strne	r2, [r3, #4]
 8004e84:	e7ec      	b.n	8004e60 <_malloc_r+0xa0>
 8004e86:	4623      	mov	r3, r4
 8004e88:	6864      	ldr	r4, [r4, #4]
 8004e8a:	e7b2      	b.n	8004df2 <_malloc_r+0x32>
 8004e8c:	4634      	mov	r4, r6
 8004e8e:	6876      	ldr	r6, [r6, #4]
 8004e90:	e7b9      	b.n	8004e06 <_malloc_r+0x46>
 8004e92:	230c      	movs	r3, #12
 8004e94:	603b      	str	r3, [r7, #0]
 8004e96:	4638      	mov	r0, r7
 8004e98:	f000 f84c 	bl	8004f34 <__malloc_unlock>
 8004e9c:	e7a1      	b.n	8004de2 <_malloc_r+0x22>
 8004e9e:	6025      	str	r5, [r4, #0]
 8004ea0:	e7de      	b.n	8004e60 <_malloc_r+0xa0>
 8004ea2:	bf00      	nop
 8004ea4:	20000594 	.word	0x20000594

08004ea8 <_realloc_r>:
 8004ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eac:	4680      	mov	r8, r0
 8004eae:	4614      	mov	r4, r2
 8004eb0:	460e      	mov	r6, r1
 8004eb2:	b921      	cbnz	r1, 8004ebe <_realloc_r+0x16>
 8004eb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004eb8:	4611      	mov	r1, r2
 8004eba:	f7ff bf81 	b.w	8004dc0 <_malloc_r>
 8004ebe:	b92a      	cbnz	r2, 8004ecc <_realloc_r+0x24>
 8004ec0:	f7ff ff12 	bl	8004ce8 <_free_r>
 8004ec4:	4625      	mov	r5, r4
 8004ec6:	4628      	mov	r0, r5
 8004ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ecc:	f000 f838 	bl	8004f40 <_malloc_usable_size_r>
 8004ed0:	4284      	cmp	r4, r0
 8004ed2:	4607      	mov	r7, r0
 8004ed4:	d802      	bhi.n	8004edc <_realloc_r+0x34>
 8004ed6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004eda:	d812      	bhi.n	8004f02 <_realloc_r+0x5a>
 8004edc:	4621      	mov	r1, r4
 8004ede:	4640      	mov	r0, r8
 8004ee0:	f7ff ff6e 	bl	8004dc0 <_malloc_r>
 8004ee4:	4605      	mov	r5, r0
 8004ee6:	2800      	cmp	r0, #0
 8004ee8:	d0ed      	beq.n	8004ec6 <_realloc_r+0x1e>
 8004eea:	42bc      	cmp	r4, r7
 8004eec:	4622      	mov	r2, r4
 8004eee:	4631      	mov	r1, r6
 8004ef0:	bf28      	it	cs
 8004ef2:	463a      	movcs	r2, r7
 8004ef4:	f7ff fb90 	bl	8004618 <memcpy>
 8004ef8:	4631      	mov	r1, r6
 8004efa:	4640      	mov	r0, r8
 8004efc:	f7ff fef4 	bl	8004ce8 <_free_r>
 8004f00:	e7e1      	b.n	8004ec6 <_realloc_r+0x1e>
 8004f02:	4635      	mov	r5, r6
 8004f04:	e7df      	b.n	8004ec6 <_realloc_r+0x1e>
	...

08004f08 <_sbrk_r>:
 8004f08:	b538      	push	{r3, r4, r5, lr}
 8004f0a:	4d06      	ldr	r5, [pc, #24]	; (8004f24 <_sbrk_r+0x1c>)
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	4604      	mov	r4, r0
 8004f10:	4608      	mov	r0, r1
 8004f12:	602b      	str	r3, [r5, #0]
 8004f14:	f7fc ff64 	bl	8001de0 <_sbrk>
 8004f18:	1c43      	adds	r3, r0, #1
 8004f1a:	d102      	bne.n	8004f22 <_sbrk_r+0x1a>
 8004f1c:	682b      	ldr	r3, [r5, #0]
 8004f1e:	b103      	cbz	r3, 8004f22 <_sbrk_r+0x1a>
 8004f20:	6023      	str	r3, [r4, #0]
 8004f22:	bd38      	pop	{r3, r4, r5, pc}
 8004f24:	2000059c 	.word	0x2000059c

08004f28 <__malloc_lock>:
 8004f28:	4801      	ldr	r0, [pc, #4]	; (8004f30 <__malloc_lock+0x8>)
 8004f2a:	f000 b811 	b.w	8004f50 <__retarget_lock_acquire_recursive>
 8004f2e:	bf00      	nop
 8004f30:	200005a0 	.word	0x200005a0

08004f34 <__malloc_unlock>:
 8004f34:	4801      	ldr	r0, [pc, #4]	; (8004f3c <__malloc_unlock+0x8>)
 8004f36:	f000 b80c 	b.w	8004f52 <__retarget_lock_release_recursive>
 8004f3a:	bf00      	nop
 8004f3c:	200005a0 	.word	0x200005a0

08004f40 <_malloc_usable_size_r>:
 8004f40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f44:	1f18      	subs	r0, r3, #4
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	bfbc      	itt	lt
 8004f4a:	580b      	ldrlt	r3, [r1, r0]
 8004f4c:	18c0      	addlt	r0, r0, r3
 8004f4e:	4770      	bx	lr

08004f50 <__retarget_lock_acquire_recursive>:
 8004f50:	4770      	bx	lr

08004f52 <__retarget_lock_release_recursive>:
 8004f52:	4770      	bx	lr

08004f54 <_init>:
 8004f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f56:	bf00      	nop
 8004f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f5a:	bc08      	pop	{r3}
 8004f5c:	469e      	mov	lr, r3
 8004f5e:	4770      	bx	lr

08004f60 <_fini>:
 8004f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f62:	bf00      	nop
 8004f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f66:	bc08      	pop	{r3}
 8004f68:	469e      	mov	lr, r3
 8004f6a:	4770      	bx	lr
